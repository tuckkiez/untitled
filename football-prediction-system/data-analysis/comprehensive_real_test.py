#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
- ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡∏°‡∏ä‡∏ô‡∏∞/‡πÅ‡∏û‡πâ/‡πÄ‡∏™‡∏°‡∏≠
- ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏Å‡∏≠‡∏£‡πå‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
- ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥
- ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• 3 ‡∏Ñ‡πà‡∏≤: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô, ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π, ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥
"""

from enhanced_score_predictor import ComprehensiveFootballPredictor
from real_data_example import RealDataPredictor
import pandas as pd
import numpy as np

class ComprehensiveRealTest:
    def __init__(self):
        self.api_token = "052fd4885cf943ad859c89cef542e2e5"
        self.predictor = None
        self.historical_data = None
        
    def load_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô...")
        
        real_predictor = RealDataPredictor(api_key=self.api_token)
        data_2024 = real_predictor.get_premier_league_data(season=2024)
        data_2023 = real_predictor.get_premier_league_data(season=2023)
        
        if data_2024 is None:
            return False
        
        if data_2023 is not None:
            self.historical_data = pd.concat([data_2023, data_2024], ignore_index=True)
        else:
            self.historical_data = data_2024
        
        self.historical_data = self.historical_data.sort_values('date').reset_index(drop=True)
        self.historical_data = self.historical_data.dropna(subset=['home_goals', 'away_goals'])
        
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        return True
    
    def test_comprehensive_predictions(self, test_games=50):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        print(f"\nüéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ({test_games} ‡πÄ‡∏Å‡∏°)")
        print("="*100)
        
        if len(self.historical_data) < test_games + 100:
            print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
            return None
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        train_data = self.historical_data.iloc[:-test_games]
        test_data = self.historical_data.iloc[-test_games:]
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        print("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô...")
        self.predictor = ComprehensiveFootballPredictor()
        if not self.predictor.train(train_data):
            return None
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        results = []
        
        # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        result_correct = 0  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        score_exact_correct = 0  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏Å‡∏≠‡∏£‡πå‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        over_under_correct = 0  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥
        goal_diff_correct = 0  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π (‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á ¬±1)
        
        print(f"{'No.':<3} {'Date':<12} {'Match':<35} {'Actual':<10} {'Pred':<10} {'Score':<10} {'O/U':<6} {'R':<2} {'S':<2} {'O':<2} {'D':<2}")
        print("-" * 100)
        
        for idx, (_, match) in enumerate(test_data.iterrows(), 1):
            # ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
            actual_home = int(match['home_goals'])
            actual_away = int(match['away_goals'])
            actual_total = actual_home + actual_away
            actual_diff = actual_home - actual_away
            
            # ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á
            if actual_home > actual_away:
                actual_result = 'Home Win'
                actual_result_short = 'H'
            elif actual_home < actual_away:
                actual_result = 'Away Win'
                actual_result_short = 'A'
            else:
                actual_result = 'Draw'
                actual_result_short = 'D'
            
            # ‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥‡∏à‡∏£‡∏¥‡∏á
            actual_over_under = "Over" if actual_total > 2.5 else "Under"
            actual_ou_short = "O" if actual_total > 2.5 else "U"
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            prediction = self.predictor.predict_comprehensive(
                match['home_team'], match['away_team'], train_data
            )
            
            if prediction:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                
                # 1. ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
                result_match = prediction['result_prediction'] == actual_result
                if result_match:
                    result_correct += 1
                
                # 2. ‡∏™‡∏Å‡∏≠‡∏£‡πå‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
                score_exact_match = (prediction['home_goals'] == actual_home and 
                                   prediction['away_goals'] == actual_away)
                if score_exact_match:
                    score_exact_correct += 1
                
                # 3. ‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥ 2.5 ‡∏õ‡∏£‡∏∞‡∏ï‡∏π
                over_under_match = prediction['over_under_2_5'] == actual_over_under
                if over_under_match:
                    over_under_correct += 1
                
                # 4. ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π (‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á ¬±1)
                pred_diff = prediction['goal_difference']
                goal_diff_match = abs(pred_diff - actual_diff) <= 1
                if goal_diff_match:
                    goal_diff_correct += 1
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                home_short = match['home_team'].replace(' FC', '').replace(' United', ' Utd')[:15]
                away_short = match['away_team'].replace(' FC', '').replace(' United', ' Utd')[:15]
                match_str = f"{home_short} vs {away_short}"
                
                actual_score_str = f"{actual_home}-{actual_away} ({actual_result_short})"
                pred_result_short = prediction['result_prediction'][0] if prediction['result_prediction'] != 'Draw' else 'D'
                pred_score_str = f"{prediction['predicted_score']} ({pred_result_short})"
                pred_ou_short = "O" if prediction['over_under_2_5'] == "Over" else "U"
                
                # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                r_status = "‚úÖ" if result_match else "‚ùå"
                s_status = "‚úÖ" if score_exact_match else "‚ùå"
                o_status = "‚úÖ" if over_under_match else "‚ùå"
                d_status = "‚úÖ" if goal_diff_match else "‚ùå"
                
                print(f"{idx:<3} {match['date'].strftime('%Y-%m-%d'):<12} {match_str:<35} "
                      f"{actual_score_str:<10} {pred_score_str:<10} "
                      f"{actual_ou_short}/{pred_ou_short}({actual_total:.1f})<6 "
                      f"{r_status:<2} {s_status:<2} {o_status:<2} {d_status:<2}")
                
                results.append({
                    'match': match_str,
                    'date': match['date'],
                    'actual_result': actual_result,
                    'predicted_result': prediction['result_prediction'],
                    'actual_score': f"{actual_home}-{actual_away}",
                    'predicted_score': prediction['predicted_score'],
                    'actual_total': actual_total,
                    'predicted_total': prediction['total_goals'],
                    'actual_over_under': actual_over_under,
                    'predicted_over_under': prediction['over_under_2_5'],
                    'actual_diff': actual_diff,
                    'predicted_diff': pred_diff,
                    'result_correct': result_match,
                    'score_exact_correct': score_exact_match,
                    'over_under_correct': over_under_match,
                    'goal_diff_correct': goal_diff_match,
                    'confidence': prediction['result_confidence']
                })
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        total_tests = len(results)
        
        result_accuracy = result_correct / total_tests
        score_accuracy = score_exact_correct / total_tests
        over_under_accuracy = over_under_correct / total_tests
        goal_diff_accuracy = goal_diff_correct / total_tests
        
        print("\n" + "="*100)
        print(f"üèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ({total_tests} ‡πÄ‡∏Å‡∏°):")
        print(f"="*60)
        print(f"1Ô∏è‚É£  ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô (‡∏ä‡∏ô‡∏∞/‡πÅ‡∏û‡πâ/‡πÄ‡∏™‡∏°‡∏≠):")
        print(f"    ‡∏ñ‡∏π‡∏Å: {result_correct}/{total_tests} = {result_accuracy:.3f} ({result_accuracy*100:.1f}%)")
        
        print(f"\n2Ô∏è‚É£  ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏Å‡∏≠‡∏£‡πå‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô:")
        print(f"    ‡∏ñ‡∏π‡∏Å: {score_exact_correct}/{total_tests} = {score_accuracy:.3f} ({score_accuracy*100:.1f}%)")
        
        print(f"\n3Ô∏è‚É£  ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥ (2.5):")
        print(f"    ‡∏ñ‡∏π‡∏Å: {over_under_correct}/{total_tests} = {over_under_accuracy:.3f} ({over_under_accuracy*100:.1f}%)")
        
        print(f"\n4Ô∏è‚É£  ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π (¬±1):")
        print(f"    ‡∏ñ‡∏π‡∏Å: {goal_diff_correct}/{total_tests} = {goal_diff_accuracy:.3f} ({goal_diff_accuracy*100:.1f}%)")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        self.analyze_detailed_results(results)
        
        return {
            'result_accuracy': result_accuracy,
            'score_accuracy': score_accuracy,
            'over_under_accuracy': over_under_accuracy,
            'goal_diff_accuracy': goal_diff_accuracy,
            'total_tests': total_tests,
            'results': results
        }
    
    def analyze_detailed_results(self, results):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"""
        print(f"\nüîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å:")
        print("="*50)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        high_conf_results = [r for r in results if r['confidence'] > 0.6]
        if high_conf_results:
            high_conf_result_acc = sum(r['result_correct'] for r in high_conf_results) / len(high_conf_results)
            print(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á (>60%): {high_conf_result_acc:.3f} ({len(high_conf_results)} ‡πÄ‡∏Å‡∏°)")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        home_wins = [r for r in results if r['actual_result'] == 'Home Win']
        away_wins = [r for r in results if r['actual_result'] == 'Away Win']
        draws = [r for r in results if r['actual_result'] == 'Draw']
        
        if home_wins:
            home_acc = sum(r['result_correct'] for r in home_wins) / len(home_wins)
            print(f"üè† ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ Home Win: {home_acc:.3f} ({len(home_wins)} ‡πÄ‡∏Å‡∏°)")
        
        if away_wins:
            away_acc = sum(r['result_correct'] for r in away_wins) / len(away_wins)
            print(f"‚úàÔ∏è  ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ Away Win: {away_acc:.3f} ({len(away_wins)} ‡πÄ‡∏Å‡∏°)")
        
        if draws:
            draw_acc = sum(r['result_correct'] for r in draws) / len(draws)
            print(f"ü§ù ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ Draw: {draw_acc:.3f} ({len(draws)} ‡πÄ‡∏Å‡∏°)")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏£‡∏ß‡∏°
        over_games = [r for r in results if r['actual_over_under'] == 'Over']
        under_games = [r for r in results if r['actual_over_under'] == 'Under']
        
        if over_games:
            over_acc = sum(r['over_under_correct'] for r in over_games) / len(over_games)
            print(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ Over 2.5: {over_acc:.3f} ({len(over_games)} ‡πÄ‡∏Å‡∏°)")
        
        if under_games:
            under_acc = sum(r['over_under_correct'] for r in under_games) / len(under_games)
            print(f"üìâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ Under 2.5: {under_acc:.3f} ({len(under_games)} ‡πÄ‡∏Å‡∏°)")
        
        # ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤
        triple_correct = [r for r in results if r['result_correct'] and r['over_under_correct'] and r['goal_diff_correct']]
        triple_accuracy = len(triple_correct) / len(results)
        print(f"\nüéØ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤: {len(triple_correct)}/{len(results)} = {triple_accuracy:.3f} ({triple_accuracy*100:.1f}%)")
        
        if triple_correct:
            print(f"üèÜ ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤:")
            for r in triple_correct[:5]:  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡πÄ‡∏Å‡∏°‡πÅ‡∏£‡∏Å
                print(f"   ‚úÖ {r['match']}: {r['actual_score']} ({r['actual_result']}) - {r['actual_over_under']}")
    
    def predict_sample_matches(self):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏Å‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
        if not self.predictor:
            return
        
        print(f"\nüéÆ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:")
        print("="*80)
        
        sample_matches = [
            ('Arsenal FC', 'Chelsea FC'),
            ('Manchester City FC', 'Liverpool FC'),
            ('Manchester United FC', 'Tottenham Hotspur FC')
        ]
        
        for home, away in sample_matches:
            result = self.predictor.predict_comprehensive(home, away, self.historical_data)
            if result:
                print(f"\n‚öΩ {result['match']}")
                print(f"   üèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {result['result_prediction']} (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {result['result_confidence']:.3f})")
                print(f"   üìä ‡∏™‡∏Å‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î: {result['predicted_score']}")
                print(f"   üìà ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏£‡∏ß‡∏°: {result['total_goals']} ({result['over_under_2_5']})")
                print(f"   üìè ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π: {result['goal_difference']:+d}")
                
                print(f"   üé≤ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô:")
                for outcome, prob in result['result_probabilities'].items():
                    print(f"      {outcome}: {prob:.3f} ({prob*100:.1f}%)")
    
    def run_comprehensive_test(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        print("üèÜ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        print("üéØ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 3 ‡∏Ñ‡πà‡∏≤: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô + ‡∏™‡∏Å‡∏≠‡∏£‡πå + ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥")
        print("="*80)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if not self.load_data():
            return
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
        results = self.test_comprehensive_predictions(test_games=50)
        
        if results:
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            self.predict_sample_matches()
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            print(f"\nüèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:")
            print(f"‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {results['result_accuracy']*100:.1f}%")
            print(f"‚öΩ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏Å‡∏≠‡∏£‡πå‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô: {results['score_accuracy']*100:.1f}%")
            print(f"üìà ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥: {results['over_under_accuracy']*100:.1f}%")
            print(f"üìä ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π: {results['goal_diff_accuracy']*100:.1f}%")
            
            if results['result_accuracy'] > 0.5:
                print(f"\nüéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")
            
            if results['over_under_accuracy'] > 0.55:
                print(f"üî• ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!")
        
        return results

def main():
    tester = ComprehensiveRealTest()
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()
