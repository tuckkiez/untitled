#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏Å‡∏±‡∏ö 20 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
- ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Premier League
- ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å >6
- ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á >6  
- ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏£‡∏ß‡∏° >12
"""

from corner_predictor import CornerPredictor
from ultra_predictor_fixed import UltraAdvancedPredictor
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

class RealCornerTester:
    def __init__(self):
        self.corner_predictor = CornerPredictor()
        self.match_predictor = UltraAdvancedPredictor()
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å 20 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î Premier League (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏£‡∏¥‡∏á)
        self.real_corner_data = [
            # ‡πÄ‡∏Å‡∏° 1-5
            {'home': 'Aston Villa', 'away': 'Tottenham', 'score': '2-0', 'total': 8, '1h': 3, '2h': 5},
            {'home': 'Chelsea', 'away': 'Manchester United', 'score': '1-0', 'total': 12, '1h': 5, '2h': 7},
            {'home': 'Arsenal', 'away': 'Newcastle', 'score': '1-0', 'total': 9, '1h': 4, '2h': 5},
            {'home': 'Leicester', 'away': 'Ipswich', 'score': '2-0', 'total': 6, '1h': 2, '2h': 4},
            {'home': 'West Ham', 'away': 'Nottingham Forest', 'score': '1-2', 'total': 11, '1h': 4, '2h': 7},
            
            # ‡πÄ‡∏Å‡∏° 6-10
            {'home': 'Everton', 'away': 'Southampton', 'score': '2-0', 'total': 7, '1h': 3, '2h': 4},
            {'home': 'Brentford', 'away': 'Fulham', 'score': '2-3', 'total': 13, '1h': 6, '2h': 7},
            {'home': 'Brighton', 'away': 'Liverpool', 'score': '3-2', 'total': 14, '1h': 7, '2h': 7},
            {'home': 'Crystal Palace', 'away': 'Wolves', 'score': '4-2', 'total': 10, '1h': 4, '2h': 6},
            {'home': 'Manchester City', 'away': 'Bournemouth', 'score': '3-1', 'total': 15, '1h': 8, '2h': 7},
            
            # ‡πÄ‡∏Å‡∏° 11-15
            {'home': 'Newcastle', 'away': 'Everton', 'score': '0-1', 'total': 5, '1h': 2, '2h': 3},
            {'home': 'Southampton', 'away': 'Arsenal', 'score': '1-2', 'total': 8, '1h': 3, '2h': 5},
            {'home': 'Nottingham Forest', 'away': 'Chelsea', 'score': '0-1', 'total': 6, '1h': 2, '2h': 4},
            {'home': 'Manchester United', 'away': 'Aston Villa', 'score': '2-0', 'total': 9, '1h': 4, '2h': 5},
            {'home': 'Tottenham', 'away': 'Brighton', 'score': '1-4', 'total': 12, '1h': 5, '2h': 7},
            
            # ‡πÄ‡∏Å‡∏° 16-20
            {'home': 'Ipswich', 'away': 'West Ham', 'score': '1-3', 'total': 7, '1h': 3, '2h': 4},
            {'home': 'Fulham', 'away': 'Manchester City', 'score': '0-2', 'total': 11, '1h': 5, '2h': 6},
            {'home': 'Bournemouth', 'away': 'Leicester', 'score': '2-0', 'total': 8, '1h': 3, '2h': 5},
            {'home': 'Liverpool', 'away': 'Crystal Palace', 'score': '1-1', 'total': 13, '1h': 6, '2h': 7},
            {'home': 'Wolves', 'away': 'Brentford', 'score': '1-1', 'total': 9, '1h': 4, '2h': 5}
        ]
    
    def test_corner_predictions(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        print("‚öΩ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á 20 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        print("="*100)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        match_data = self.match_predictor.load_premier_league_data()
        corner_data = self.corner_predictor.generate_corner_data(match_data)
        self.corner_predictor.train_corner_models(corner_data)
        
        print(f"\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á")
        print("="*100)
        print(f"{'No.':<3} {'Match':<35} {'Score':<8} {'Total':<7} {'1H':<5} {'2H':<5} {'T12':<4} {'1H6':<4} {'2H6':<4} {'Score':<6}")
        print("-"*100)
        
        results = []
        correct_total_12 = 0
        correct_first_half_6 = 0
        correct_second_half_6 = 0
        total_score = 0
        
        for idx, game in enumerate(self.real_corner_data, 1):
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            prediction = self.corner_predictor.predict_corners(
                game['home'], 
                game['away']
            )
            
            if not prediction:
                continue
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
            actual_total = game['total']
            actual_1h = game['1h']
            actual_2h = game['2h']
            
            # ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            pred_total = prediction['predictions']['total_corners']
            pred_1h = prediction['predictions']['first_half_corners']
            pred_2h = prediction['predictions']['second_half_corners']
            
            # Over/Under ‡∏à‡∏£‡∏¥‡∏á
            actual_total_12 = 'Over' if actual_total > 12 else 'Under'
            actual_1h_6 = 'Over' if actual_1h > 6 else 'Under'
            actual_2h_6 = 'Over' if actual_2h > 6 else 'Under'
            
            # Over/Under ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            pred_total_12 = prediction['over_under_analysis']['total_12']
            pred_1h_6 = prediction['over_under_analysis']['first_half_6']
            pred_2h_6 = prediction['over_under_analysis']['second_half_6']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            total_12_correct = pred_total_12 == actual_total_12
            first_half_6_correct = pred_1h_6 == actual_1h_6
            second_half_6_correct = pred_2h_6 == actual_2h_6
            
            if total_12_correct:
                correct_total_12 += 1
            if first_half_6_correct:
                correct_first_half_6 += 1
            if second_half_6_correct:
                correct_second_half_6 += 1
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            game_score = sum([total_12_correct, first_half_6_correct, second_half_6_correct])
            total_score += game_score
            
            # ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
            t12_symbol = "‚úÖ" if total_12_correct else "‚ùå"
            h1_symbol = "‚úÖ" if first_half_6_correct else "‚ùå"
            h2_symbol = "‚úÖ" if second_half_6_correct else "‚ùå"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            match_str = f"{game['home'][:15]} vs {game['away'][:15]}"
            score_str = game['score']
            total_str = f"{actual_total}({pred_total})"
            h1_str = f"{actual_1h}({pred_1h})"
            h2_str = f"{actual_2h}({pred_2h})"
            
            print(f"{idx:<3} {match_str:<35} {score_str:<8} {total_str:<7} {h1_str:<5} {h2_str:<5} "
                  f"{t12_symbol:<4} {h1_symbol:<4} {h2_symbol:<4} {game_score}/3")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            results.append({
                'match_num': idx,
                'home_team': game['home'],
                'away_team': game['away'],
                'score': game['score'],
                'actual_total': actual_total,
                'actual_1h': actual_1h,
                'actual_2h': actual_2h,
                'pred_total': pred_total,
                'pred_1h': pred_1h,
                'pred_2h': pred_2h,
                'total_12_correct': total_12_correct,
                'first_half_6_correct': first_half_6_correct,
                'second_half_6_correct': second_half_6_correct,
                'game_score': game_score
            })
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.analyze_real_corner_results(results, correct_total_12, correct_first_half_6, 
                                       correct_second_half_6, total_score, len(results))
        
        return results
    
    def analyze_real_corner_results(self, results, correct_total_12, correct_first_half_6, 
                                  correct_second_half_6, total_score, total_games):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á"""
        print("\n" + "="*100)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á")
        print("="*100)
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        total_12_accuracy = correct_total_12 / total_games
        first_half_6_accuracy = correct_first_half_6 / total_games
        second_half_6_accuracy = correct_second_half_6 / total_games
        overall_accuracy = total_score / (total_games * 3)
        
        print(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:")
        print(f"   ‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏£‡∏ß‡∏° >12:        {correct_total_12}/{total_games} = {total_12_accuracy:.1%}")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å >6:          {correct_first_half_6}/{total_games} = {first_half_6_accuracy:.1%}")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á >6:         {correct_second_half_6}/{total_games} = {second_half_6_accuracy:.1%}")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏£‡∏ß‡∏°:        {total_score}/{total_games * 3} = {overall_accuracy:.1%}")
        
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
        perfect_scores = sum(1 for r in results if r['game_score'] == 3)
        good_scores = sum(1 for r in results if r['game_score'] >= 2)
        poor_scores = sum(1 for r in results if r['game_score'] <= 1)
        
        print(f"\nüèÜ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°:")
        print(f"   ‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤:        {perfect_scores}/{total_games} = {perfect_scores/total_games:.1%}")
        print(f"   ‡∏ñ‡∏π‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡πà‡∏≤:   {good_scores}/{total_games} = {good_scores/total_games:.1%}")
        print(f"   ‡∏ñ‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏Ñ‡πà‡∏≤:    {poor_scores}/{total_games} = {poor_scores/total_games:.1%}")
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á
        avg_total = np.mean([r['actual_total'] for r in results])
        avg_1h = np.mean([r['actual_1h'] for r in results])
        avg_2h = np.mean([r['actual_2h'] for r in results])
        
        print(f"\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:")
        print(f"   ‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏£‡∏ß‡∏°: {avg_total:.1f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡πÄ‡∏Å‡∏°")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å: {avg_1h:.1f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡πÄ‡∏Å‡∏°")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á: {avg_2h:.1f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡πÄ‡∏Å‡∏°")
        print(f"   ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô 1H:2H = {avg_1h/avg_2h:.2f}:1")
        
        # ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á
        over_12_games = sum(1 for r in results if r['actual_total'] > 12)
        over_6_1h_games = sum(1 for r in results if r['actual_1h'] > 6)
        over_6_2h_games = sum(1 for r in results if r['actual_2h'] > 6)
        
        print(f"\nüìà ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á:")
        print(f"   ‡πÄ‡∏Å‡∏° >12 ‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°: {over_12_games}/{total_games} = {over_12_games/total_games:.1%}")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å >6: {over_6_1h_games}/{total_games} = {over_6_1h_games/total_games:.1%}")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á >6: {over_6_2h_games}/{total_games} = {over_6_2h_games/total_games:.1%}")
        
        # ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        best_games = [r for r in results if r['game_score'] == 3]
        if best_games:
            print(f"\nüèÜ ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤ ({len(best_games)} ‡πÄ‡∏Å‡∏°):")
            for game in best_games:
                print(f"   ‚úÖ {game['home_team']} vs {game['away_team']} ({game['score']}) - "
                      f"Total:{game['actual_total']} 1H:{game['actual_1h']} 2H:{game['actual_2h']}")
        
        # ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏¥‡∏î‡∏°‡∏≤‡∏Å
        worst_games = [r for r in results if r['game_score'] == 0]
        if worst_games:
            print(f"\n‚ö†Ô∏è ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤ ({len(worst_games)} ‡πÄ‡∏Å‡∏°):")
            for game in worst_games:
                print(f"   ‚ùå {game['home_team']} vs {game['away_team']} ({game['score']}) - "
                      f"Total:{game['actual_total']} 1H:{game['actual_1h']} 2H:{game['actual_2h']}")
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        print(f"\nüÜö ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:")
        print(f"   ‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏° (50%):        50.0%")
        print(f"   ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤:           {overall_accuracy:.1%}")
        
        improvement = (overall_accuracy - 0.5) * 100
        if improvement > 0:
            print(f"   üéâ ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°: +{improvement:.1f} percentage points!")
        else:
            print(f"   ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: {improvement:.1f} percentage points")
    
    def demo_corner_predictions(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°"""
        print(f"\nüéÆ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà")
        print("="*80)
        
        demo_matches = [
            ("Arsenal", "Chelsea"),
            ("Manchester City", "Liverpool"),
            ("Manchester United", "Tottenham"),
            ("Brighton", "Newcastle"),
            ("Aston Villa", "West Ham")
        ]
        
        for home, away in demo_matches:
            prediction = self.corner_predictor.predict_corners(home, away)
            if prediction:
                print(f"\n‚öΩ {home} vs {away}")
                print(f"   üéØ ‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏£‡∏ß‡∏°: {prediction['predictions']['total_corners']} "
                      f"({prediction['over_under_analysis']['total_12']} 12)")
                print(f"   üïê ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å: {prediction['predictions']['first_half_corners']} "
                      f"({prediction['over_under_analysis']['first_half_6']} 6)")
                print(f"   üïï ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á: {prediction['predictions']['second_half_corners']} "
                      f"({prediction['over_under_analysis']['second_half_6']} 6)")
                print(f"   üìä ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:")
                
                # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
                total_conf = prediction['confidence_scores']['total_confidence']
                h1_conf = prediction['confidence_scores']['first_half_confidence']
                h2_conf = prediction['confidence_scores']['second_half_confidence']
                
                if total_conf > 70:
                    print(f"      üî• ‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏£‡∏ß‡∏° {prediction['over_under_analysis']['total_12']} 12 (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {total_conf}%)")
                if h1_conf > 70:
                    print(f"      üî• ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å {prediction['over_under_analysis']['first_half_6']} 6 (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {h1_conf}%)")
                if h2_conf > 70:
                    print(f"      üî• ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á {prediction['over_under_analysis']['second_half_6']} 6 (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {h2_conf}%)")

# Main execution
if __name__ == "__main__":
    tester = RealCornerTester()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
    results = tester.test_corner_predictions()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    tester.demo_corner_predictions()
    
    print(f"\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("="*100)
