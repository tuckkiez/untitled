#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API
- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å FotMob API
- ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å The Odds API
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
"""

from real_corner_data import RealCornerDataFetcher
from corner_predictor import CornerPredictor
import pandas as pd
import numpy as np
from datetime import datetime
import json
import warnings
warnings.filterwarnings('ignore')

class RealCornerTester:
    def __init__(self, odds_api_key=None):
        self.data_fetcher = RealCornerDataFetcher(odds_api_key=odds_api_key)
        self.corner_predictor = CornerPredictor()
        self.real_data = None
        
    def fetch_and_test_real_data(self, num_matches=20):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        print("üöÄ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á")
        print("="*100)
        
        # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API
        print("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API...")
        self.real_data = self.data_fetcher.get_comprehensive_corner_data(num_matches)
        
        if not self.real_data:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return None
        
        # 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        print("\nü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        training_data = self.prepare_training_data()
        
        # 3. ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        self.corner_predictor.train_corner_models(training_data)
        
        # 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        print(f"\nüéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á {len(self.real_data)} ‡πÄ‡∏Å‡∏°")
        results = self.test_with_real_data()
        
        return results
    
    def prepare_training_data(self):
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        training_matches = []
        
        for match in self.real_data:
            training_matches.append({
                'home_team': match['home_team'],
                'away_team': match['away_team'],
                'date': match['date'],
                'home_goals': int(match['home_score']),
                'away_goals': int(match['away_score']),
                'home_corners': match['home_corners'],
                'away_corners': match['away_corners'],
                'total_corners': match['total_corners'],
                'first_half_corners': match['first_half_corners'],
                'second_half_corners': match['second_half_corners']
            })
        
        return pd.DataFrame(training_matches)
    
    def test_with_real_data(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        print("\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á")
        print("="*120)
        print(f"{'No.':<3} {'Match':<35} {'Score':<8} {'Total':<7} {'1H':<5} {'2H':<5} {'T12':<4} {'1H6':<4} {'2H6':<4} {'Odds':<8} {'Score':<6}")
        print("-"*120)
        
        results = []
        correct_total_12 = 0
        correct_first_half_6 = 0
        correct_second_half_6 = 0
        total_score = 0
        
        for idx, match in enumerate(self.real_data, 1):
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            prediction = self.corner_predictor.predict_corners(
                match['home_team'],
                match['away_team'],
                datetime.fromisoformat(match['date'].replace('Z', '+00:00'))
            )
            
            if not prediction:
                continue
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
            actual_total = match['total_corners']
            actual_1h = match['first_half_corners']
            actual_2h = match['second_half_corners']
            
            # ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            pred_total = prediction['predictions']['total_corners']
            pred_1h = prediction['predictions']['first_half_corners']
            pred_2h = prediction['predictions']['second_half_corners']
            
            # Over/Under ‡∏à‡∏£‡∏¥‡∏á
            actual_total_12 = 'Over' if actual_total > 12 else 'Under'
            actual_1h_6 = 'Over' if actual_1h > 6 else 'Under'
            actual_2h_6 = 'Over' if actual_2h > 6 else 'Under'
            
            # Over/Under ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            pred_total_12 = prediction['over_under_analysis']['total_12']
            pred_1h_6 = prediction['over_under_analysis']['first_half_6']
            pred_2h_6 = prediction['over_under_analysis']['second_half_6']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            total_12_correct = pred_total_12 == actual_total_12
            first_half_6_correct = pred_1h_6 == actual_1h_6
            second_half_6_correct = pred_2h_6 == actual_2h_6
            
            if total_12_correct:
                correct_total_12 += 1
            if first_half_6_correct:
                correct_first_half_6 += 1
            if second_half_6_correct:
                correct_second_half_6 += 1
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            game_score = sum([total_12_correct, first_half_6_correct, second_half_6_correct])
            total_score += game_score
            
            # ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
            t12_symbol = "‚úÖ" if total_12_correct else "‚ùå"
            h1_symbol = "‚úÖ" if first_half_6_correct else "‚ùå"
            h2_symbol = "‚úÖ" if second_half_6_correct else "‚ùå"
            
            # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
            odds_12 = match['corner_odds'].get('Over_12', 'N/A')
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            match_str = f"{match['home_team'][:15]} vs {match['away_team'][:15]}"
            score_str = f"{match['home_score']}-{match['away_score']}"
            total_str = f"{actual_total}({pred_total})"
            h1_str = f"{actual_1h}({pred_1h})"
            h2_str = f"{actual_2h}({pred_2h})"
            odds_str = f"{odds_12}"
            
            print(f"{idx:<3} {match_str:<35} {score_str:<8} {total_str:<7} {h1_str:<5} {h2_str:<5} "
                  f"{t12_symbol:<4} {h1_symbol:<4} {h2_symbol:<4} {odds_str:<8} {game_score}/3")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            results.append({
                'match_num': idx,
                'home_team': match['home_team'],
                'away_team': match['away_team'],
                'score': f"{match['home_score']}-{match['away_score']}",
                'actual_total': actual_total,
                'actual_1h': actual_1h,
                'actual_2h': actual_2h,
                'pred_total': pred_total,
                'pred_1h': pred_1h,
                'pred_2h': pred_2h,
                'total_12_correct': total_12_correct,
                'first_half_6_correct': first_half_6_correct,
                'second_half_6_correct': second_half_6_correct,
                'game_score': game_score,
                'corner_odds': match['corner_odds'],
                'data_quality': match['data_quality']
            })
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.analyze_real_results(results, correct_total_12, correct_first_half_6, 
                                correct_second_half_6, total_score, len(results))
        
        return results
    
    def analyze_real_results(self, results, correct_total_12, correct_first_half_6, 
                           correct_second_half_6, total_score, total_games):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á"""
        print("\n" + "="*120)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á")
        print("="*120)
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        total_12_accuracy = correct_total_12 / total_games if total_games > 0 else 0
        first_half_6_accuracy = correct_first_half_6 / total_games if total_games > 0 else 0
        second_half_6_accuracy = correct_second_half_6 / total_games if total_games > 0 else 0
        overall_accuracy = total_score / (total_games * 3) if total_games > 0 else 0
        
        print(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á):")
        print(f"   ‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏£‡∏ß‡∏° >12:        {correct_total_12}/{total_games} = {total_12_accuracy:.1%}")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å >6:          {correct_first_half_6}/{total_games} = {first_half_6_accuracy:.1%}")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á >6:         {correct_second_half_6}/{total_games} = {second_half_6_accuracy:.1%}")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏£‡∏ß‡∏°:        {total_score}/{total_games * 3} = {overall_accuracy:.1%}")
        
        # ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        real_data_count = sum(1 for r in results if r['data_quality'] == 'real')
        simulated_data_count = sum(1 for r in results if r['data_quality'] in ['simulated', 'sample'])
        
        print(f"\nüìä ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        print(f"   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API:    {real_data_count}/{total_games} = {real_data_count/total_games:.1%}")
        print(f"   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á:          {simulated_data_count}/{total_games} = {simulated_data_count/total_games:.1%}")
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á
        avg_total = np.mean([r['actual_total'] for r in results])
        avg_1h = np.mean([r['actual_1h'] for r in results])
        avg_2h = np.mean([r['actual_2h'] for r in results])
        
        print(f"\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:")
        print(f"   ‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏£‡∏ß‡∏°: {avg_total:.1f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡πÄ‡∏Å‡∏°")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å: {avg_1h:.1f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡πÄ‡∏Å‡∏°")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á: {avg_2h:.1f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡πÄ‡∏Å‡∏°")
        print(f"   ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô 1H:2H = {avg_1h/avg_2h:.2f}:1")
        
        # ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°
        over_12_games = sum(1 for r in results if r['actual_total'] > 12)
        over_6_1h_games = sum(1 for r in results if r['actual_1h'] > 6)
        over_6_2h_games = sum(1 for r in results if r['actual_2h'] > 6)
        
        print(f"\nüìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á:")
        print(f"   ‡πÄ‡∏Å‡∏° >12 ‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°: {over_12_games}/{total_games} = {over_12_games/total_games:.1%}")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å >6: {over_6_1h_games}/{total_games} = {over_6_1h_games/total_games:.1%}")
        print(f"   ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á >6: {over_6_2h_games}/{total_games} = {over_6_2h_games/total_games:.1%}")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
        self.analyze_betting_value(results)
        
        # ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏î‡∏µ
        perfect_games = [r for r in results if r['game_score'] == 3]
        if perfect_games:
            print(f"\nüèÜ ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤ ({len(perfect_games)} ‡πÄ‡∏Å‡∏°):")
            for game in perfect_games[:5]:  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡πÄ‡∏Å‡∏°‡πÅ‡∏£‡∏Å
                odds_12 = game['corner_odds'].get('Over_12', 'N/A')
                print(f"   ‚úÖ {game['home_team']} vs {game['away_team']} ({game['score']}) - "
                      f"Total:{game['actual_total']} 1H:{game['actual_1h']} 2H:{game['actual_2h']} "
                      f"Odds:{odds_12}")
    
    def analyze_betting_value(self, results):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô"""
        print(f"\nüí∞ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:")
        
        total_bets = 0
        winning_bets = 0
        total_stake = 0
        total_return = 0
        
        for result in results:
            odds = result['corner_odds']
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô Over 12
            if 'Over_12' in odds and isinstance(odds['Over_12'], (int, float)):
                total_bets += 1
                total_stake += 100  # ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô 100 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡∏°
                
                # ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Over ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô Over
                if result['actual_total'] > 12:
                    winning_bets += 1
                    total_return += 100 * odds['Over_12']
                
                # ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Under ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô Under
                elif result['actual_total'] <= 12 and 'Under_12' in odds:
                    if isinstance(odds['Under_12'], (int, float)):
                        winning_bets += 1
                        total_return += 100 * odds['Under_12']
        
        if total_bets > 0:
            win_rate = winning_bets / total_bets
            roi = ((total_return - total_stake) / total_stake) * 100 if total_stake > 0 else 0
            
            print(f"   ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô Over/Under 12:")
            print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: {total_bets} ‡πÄ‡∏Å‡∏°")
            print(f"   ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞: {winning_bets}/{total_bets} = {win_rate:.1%}")
            print(f"   ROI: {roi:+.1f}%")
            
            if roi > 0:
                print(f"   üéâ ‡∏Å‡∏≥‡πÑ‡∏£: +{total_return - total_stake:.0f} ‡∏´‡∏ô‡πà‡∏ß‡∏¢")
            else:
                print(f"   üìâ ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: {total_return - total_stake:.0f} ‡∏´‡∏ô‡πà‡∏ß‡∏¢")
    
    def save_test_results(self, results, filename='real_corner_test_results.json'):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False, default=str)
            print(f"\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô {filename}")
        except Exception as e:
            print(f"‚ùå Error saving results: {e}")

# Main execution
if __name__ == "__main__":
    print("üöÄ Real Corner Data Tester")
    print("="*60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á tester (‡πÉ‡∏™‡πà Odds API key ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    tester = RealCornerTester(
        odds_api_key=None  # ‡πÉ‡∏™‡πà API key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    )
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
    results = tester.fetch_and_test_real_data(num_matches=20)
    
    if results:
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        tester.save_test_results(results)
        
        print(f"\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print(f"üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {len(results)} ‡πÄ‡∏Å‡∏°")
        print(f"üí∞ ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    else:
        print("‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
