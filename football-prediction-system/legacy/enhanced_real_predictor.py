#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
‡πÉ‡∏ä‡πâ Enhanced Model ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
"""

from enhanced_predictor import EnhancedFootballPredictor
from real_data_example import RealDataPredictor
import pandas as pd
import numpy as np

class EnhancedRealPredictor:
    def __init__(self):
        self.api_token = "052fd4885cf943ad859c89cef542e2e5"
        self.enhanced_predictor = None
        self.historical_data = None
        self.teams = []
        
    def load_and_prepare_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å football-data.org...")
        
        real_predictor = RealDataPredictor(api_key=self.api_token)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        data_2024 = real_predictor.get_premier_league_data(season=2024)
        data_2023 = real_predictor.get_premier_league_data(season=2023)
        
        if data_2024 is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return False
        
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•
        if data_2023 is not None:
            self.historical_data = pd.concat([data_2023, data_2024], ignore_index=True)
            print(f"‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 2 ‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        else:
            self.historical_data = data_2024
            print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏• 2024: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        self.historical_data = self.historical_data.sort_values('date').reset_index(drop=True)
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
        self.teams = sorted(list(set(
            self.historical_data['home_team'].tolist() + 
            self.historical_data['away_team'].tolist()
        )))
        
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡∏°: {len(self.teams)} ‡∏ó‡∏µ‡∏°")
        print(f"üìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {self.historical_data['date'].min()} ‡∏ñ‡∏∂‡∏á {self.historical_data['date'].max()}")
        
        return True
    
    def train_enhanced_model(self):
        """‡πÄ‡∏ó‡∏£‡∏ô Enhanced Model"""
        print("\nü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô Enhanced Model...")
        self.enhanced_predictor = EnhancedFootballPredictor()
        
        if not self.enhanced_predictor.train(self.historical_data):
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏ô Enhanced Model ‡πÑ‡∏î‡πâ")
            return False
        
        print("‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô Enhanced Model ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    
    def compare_models(self):
        """‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Enhanced Model ‡∏Å‡∏±‡∏ö Basic Model"""
        print("\nüìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        
        # Enhanced Model Backtest
        enhanced_result = self.enhanced_predictor.backtest(self.historical_data, test_period_games=60)
        
        # Basic Model Backtest (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö)
        from football_predictor import FootballPredictor
        basic_predictor = FootballPredictor()
        basic_predictor.train(self.historical_data.iloc[:-60])
        
        # Manual backtest for basic model
        test_data = self.historical_data.iloc[-60:]
        basic_correct = 0
        basic_total = 0
        
        for _, match in test_data.iterrows():
            result = basic_predictor.predict_match(
                match['home_team'], match['away_team'], 
                self.historical_data.iloc[:-60]
            )
            if result:
                actual = 'Home Win' if match['home_goals'] > match['away_goals'] else \
                        'Away Win' if match['home_goals'] < match['away_goals'] else 'Draw'
                if result['prediction'] == actual:
                    basic_correct += 1
                basic_total += 1
        
        basic_accuracy = basic_correct / basic_total if basic_total > 0 else 0
        
        print(f"\nüèÜ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•:")
        print(f"{'='*50}")
        print(f"üìà Enhanced Model:")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: {enhanced_result['accuracy']:.3f} ({enhanced_result['accuracy']*100:.1f}%)")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {enhanced_result['avg_confidence']:.3f}")
        print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Features: 40")
        print(f"   ‡πÇ‡∏°‡πÄ‡∏î‡∏•: Ensemble (RF + GB + LR)")
        
        print(f"\nüìä Basic Model:")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: {basic_accuracy:.3f} ({basic_accuracy*100:.1f}%)")
        print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Features: 15")
        print(f"   ‡πÇ‡∏°‡πÄ‡∏î‡∏•: Random Forest")
        
        improvement = enhanced_result['accuracy'] - basic_accuracy
        print(f"\nüöÄ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: +{improvement:.3f} ({improvement*100:.1f} percentage points)")
        
        return enhanced_result, basic_accuracy
    
    def predict_with_analysis(self, home_team, away_team):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"""
        result = self.enhanced_predictor.predict_match(home_team, away_team, self.historical_data)
        
        if not result:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")
            return None
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        print("\n" + "="*70)
        print(f"‚öΩ Enhanced Prediction: {home_team.replace(' FC', '')} vs {away_team.replace(' FC', '')}")
        print("="*70)
        
        # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        prediction_emoji = {'Home Win': 'üè†', 'Away Win': '‚úàÔ∏è', 'Draw': 'ü§ù'}
        print(f"\nüéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {prediction_emoji.get(result['prediction'], '‚öΩ')} {result['prediction']}")
        print(f"üé≤ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {result['confidence']:.3f} ({result['confidence']*100:.1f}%)")
        print(f"ü§ñ ‡πÇ‡∏°‡πÄ‡∏î‡∏•: {result['model_type']}")
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        print(f"\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏•:")
        for outcome, prob in result['probabilities'].items():
            emoji = prediction_emoji.get(outcome, '‚öΩ')
            bar_length = int(prob * 25)
            bar = "‚ñà" * bar_length + "‚ñë" * (25 - bar_length)
            print(f"   {emoji} {outcome:10s}: {bar} {prob:.3f} ({prob*100:.1f}%)")
        
        # ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
        confidence_level = "‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å" if result['confidence'] > 0.7 else \
                          "‡∏™‡∏π‡∏á" if result['confidence'] > 0.6 else \
                          "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" if result['confidence'] > 0.5 else "‡∏ï‡πà‡∏≥"
        
        print(f"\nüîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
        print(f"   ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠: {confidence_level}")
        
        if result['confidence'] > 0.65:
            print(f"   üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏™‡∏π‡∏á")
        elif result['confidence'] < 0.45:
            print(f"   ‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏™‡∏π‡∏á")
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡∏°
        self.show_team_comparison(home_team, away_team)
        
        return result
    
    def show_team_comparison(self, home_team, away_team):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡∏°"""
        print(f"\nüìà ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡∏°:")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
        home_stats = self.enhanced_predictor.calculate_advanced_team_stats(self.historical_data, home_team)
        away_stats = self.enhanced_predictor.calculate_advanced_team_stats(self.historical_data, away_team)
        
        stats_to_show = [
            ('Win Rate', 'win_rate'),
            ('Recent Form', 'recent_form'),
            ('Goals/Game', 'avg_goals_for'),
            ('Clean Sheets', 'clean_sheet_rate'),
            ('Home Win Rate', 'home_win_rate'),
            ('Momentum', 'momentum')
        ]
        
        print(f"   {'Stat':<15} {'Home':<15} {'Away':<15} {'Advantage':<10}")
        print(f"   {'-'*55}")
        
        for stat_name, stat_key in stats_to_show:
            home_val = home_stats[stat_key]
            away_val = away_stats[stat_key]
            
            if home_val > away_val:
                advantage = "üè† Home"
            elif away_val > home_val:
                advantage = "‚úàÔ∏è Away"
            else:
                advantage = "ü§ù Equal"
            
            print(f"   {stat_name:<15} {home_val:<15.3f} {away_val:<15.3f} {advantage:<10}")
    
    def run_enhanced_analysis(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        print("üèÜ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á - Enhanced Model")
        print("üìä ‡πÉ‡∏ä‡πâ Ensemble Learning ‡πÅ‡∏•‡∏∞ Advanced Features")
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if not self.load_and_prepare_data():
            return
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        if not self.train_enhanced_model():
            return
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
        enhanced_result, basic_accuracy = self.compare_models()
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        print(f"\nüéÆ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á:")
        sample_matches = [
            ('Arsenal FC', 'Chelsea FC'),
            ('Manchester City FC', 'Liverpool FC'),
            ('Manchester United FC', 'Tottenham Hotspur FC')
        ]
        
        for home, away in sample_matches:
            self.predict_with_analysis(home, away)
            print("\n" + "-"*70)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        print(f"\nüèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:")
        print(f"‚úÖ Enhanced Model ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ {enhanced_result['accuracy']*100:.1f}%")
        print(f"üìà ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≤‡∏Å Basic Model {(enhanced_result['accuracy'] - basic_accuracy)*100:.1f} percentage points")
        print(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {enhanced_result['avg_confidence']*100:.1f}%")
        
        # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if enhanced_result['accuracy'] > 0.55:
            print(f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        else:
            print(f"\n‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏™‡∏π‡∏á ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        
        return enhanced_result

def main():
    predictor = EnhancedRealPredictor()
    predictor.run_enhanced_analysis()

if __name__ == "__main__":
    main()
