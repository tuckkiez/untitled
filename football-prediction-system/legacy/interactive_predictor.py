#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡πÅ‡∏ö‡∏ö Interactive
‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
"""

from real_data_example import RealDataPredictor
from football_predictor import FootballPredictor
import pandas as pd

class InteractiveFootballPredictor:
    def __init__(self):
        self.api_token = "052fd4885cf943ad859c89cef542e2e5"
        self.predictor = None
        self.historical_data = None
        self.teams = []
        
    def load_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å football-data.org...")
        
        real_predictor = RealDataPredictor(api_key=self.api_token)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏• 2024
        self.historical_data = real_predictor.get_premier_league_data(season=2024)
        
        if self.historical_data is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return False
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
        self.teams = sorted(list(set(
            self.historical_data['home_team'].tolist() + 
            self.historical_data['away_team'].tolist()
        )))
        
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡∏°: {len(self.teams)} ‡∏ó‡∏µ‡∏°")
        
        return True
    
    def train_model(self):
        """‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        print("\nü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        self.predictor = FootballPredictor()
        
        if not self.predictor.train(self.historical_data):
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ")
            return False
        
        print("‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    
    def show_teams(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("\nüìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡πÉ‡∏ô‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å:")
        print("=" * 50)
        
        for i, team in enumerate(self.teams, 1):
            # ‡∏•‡∏ö "FC" ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
            display_name = team.replace(" FC", "").replace(" United FC", " United")
            print(f"{i:2d}. {display_name}")
    
    def get_team_choice(self, prompt):
        """‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°"""
        while True:
            try:
                print(f"\n{prompt}")
                choice = input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡∏° (‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå 'list' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠): ").strip()
                
                if choice.lower() == 'list':
                    self.show_teams()
                    continue
                
                team_index = int(choice) - 1
                
                if 0 <= team_index < len(self.teams):
                    return self.teams[team_index]
                else:
                    print(f"‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-{len(self.teams)}")
                    
            except ValueError:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    def predict_match(self, home_team, away_team):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô"""
        result = self.predictor.predict_match(home_team, away_team, self.historical_data)
        
        if not result:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")
            return
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        print("\n" + "="*60)
        print(f"‚öΩ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {home_team.replace(' FC', '')} vs {away_team.replace(' FC', '')}")
        print("="*60)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        prediction_emoji = {
            'Home Win': 'üè†',
            'Away Win': '‚úàÔ∏è',
            'Draw': 'ü§ù'
        }
        
        print(f"\nüéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {prediction_emoji.get(result['prediction'], '‚öΩ')} {result['prediction']}")
        print(f"üé≤ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {result['confidence']:.3f} ({result['confidence']*100:.1f}%)")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        print(f"\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏•:")
        for outcome, prob in result['probabilities'].items():
            emoji = prediction_emoji.get(outcome, '‚öΩ')
            bar_length = int(prob * 20)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar
            bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)
            print(f"   {emoji} {outcome:10s}: {bar} {prob:.3f} ({prob*100:.1f}%)")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡∏°
        self.show_team_stats(home_team, away_team)
    
    def show_team_stats(self, home_team, away_team):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°"""
        print(f"\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        
        # ‡∏´‡∏≤‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
        head_to_head = self.historical_data[
            ((self.historical_data['home_team'] == home_team) & 
             (self.historical_data['away_team'] == away_team)) |
            ((self.historical_data['home_team'] == away_team) & 
             (self.historical_data['away_team'] == home_team))
        ].tail(5)
        
        if len(head_to_head) > 0:
            print(f"   ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {len(head_to_head)} ‡∏ô‡∏±‡∏î:")
            for _, match in head_to_head.iterrows():
                date = match['date'].strftime('%Y-%m-%d')
                home = match['home_team'].replace(' FC', '')
                away = match['away_team'].replace(' FC', '')
                score = f"{match['home_goals']}-{match['away_goals']}"
                print(f"   üìÖ {date}: {home} {score} {away}")
        else:
            print("   ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏ô‡∏µ‡πâ")
    
    def run_interactive_session(self):
        """‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡∏ö interactive"""
        print("üèÜ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å!")
        print("üìä ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å football-data.org")
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        if not self.load_data():
            return
        
        if not self.train_model():
            return
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
        self.show_teams()
        
        while True:
            try:
                print("\n" + "="*60)
                print("üéÆ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
                print("="*60)
                
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏¢‡πâ‡∏≤
                home_team = self.get_team_choice("üè† ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏¢‡πâ‡∏≤:")
                
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô
                while True:
                    away_team = self.get_team_choice("‚úàÔ∏è  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô:")
                    if away_team != home_team:
                        break
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ")
                
                # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
                self.predict_match(home_team, away_team)
                
                # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                print("\n" + "="*60)
                continue_choice = input("üîÑ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏Å‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").strip().lower()
                
                if continue_choice not in ['y', 'yes', '‡πÉ‡∏ä‡πà']:
                    break
                    
            except KeyboardInterrupt:
                print("\n\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
                break
            except Exception as e:
                print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                continue
        
        print("\nüèÜ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•!")
        print("üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 46% ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ backtest")
        print("‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

def main():
    predictor = InteractiveFootballPredictor()
    predictor.run_interactive_session()

if __name__ == "__main__":
    main()
