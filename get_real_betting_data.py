#!/usr/bin/env python3
"""
üé≤ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Handicap, Over/Under ‡πÅ‡∏•‡∏∞ Corners ‡∏à‡∏£‡∏¥‡∏á
‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å API
"""

import requests
import pandas as pd
import json
import time
from datetime import datetime, timedelta

class RealBettingDataCollector:
    def __init__(self, football_api_key, odds_api_key=None):
        self.football_api_key = football_api_key
        self.odds_api_key = odds_api_key
        
        # API URLs
        self.football_base_url = "https://api.football-data.org/v4"
        self.odds_base_url = "https://api.the-odds-api.com/v4"
        
        # Headers
        self.football_headers = {'X-Auth-Token': self.football_api_key}
        
    def get_recent_matches_with_details(self, league_code, days_back=30):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        print(f"üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô {league_code} ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á {days_back} ‡∏ß‡∏±‡∏ô...")
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
            url = f"{self.football_base_url}/competitions/{league_code}/matches"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days_back)
            
            params = {
                'dateFrom': start_date.strftime('%Y-%m-%d'),
                'dateTo': end_date.strftime('%Y-%m-%d'),
                'status': 'FINISHED'
            }
            
            response = requests.get(url, headers=self.football_headers, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                matches = []
                
                for match in data.get('matches', []):
                    if match['status'] == 'FINISHED':
                        match_info = {
                            'date': match['utcDate'][:10],
                            'home_team': match['homeTeam']['name'],
                            'away_team': match['awayTeam']['name'],
                            'home_goals': match['score']['fullTime']['home'],
                            'away_goals': match['score']['fullTime']['away'],
                            'matchday': match.get('matchday', 0),
                            'league': league_code
                        }
                        
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Handicap ‡πÅ‡∏•‡∏∞ Over/Under (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á)
                        match_info.update(self._calculate_betting_results(match_info))
                        
                        matches.append(match_info)
                
                df = pd.DataFrame(matches)
                print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {league_code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df)} ‡πÄ‡∏Å‡∏°")
                return df
            else:
                print(f"‚ùå API Error: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return None
    
    def _calculate_betting_results(self, match_info):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏• Handicap ‡πÅ‡∏•‡∏∞ Over/Under ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        home_goals = match_info['home_goals']
        away_goals = match_info['away_goals']
        total_goals = home_goals + away_goals
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Handicap ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°)
        goal_diff = home_goals - away_goals
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Handicap Line (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
        handicap_lines = [-2.5, -2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5]
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Handicap Line ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
        if abs(goal_diff) >= 3:
            handicap = -2.0 if goal_diff > 0 else 2.0
        elif abs(goal_diff) == 2:
            handicap = -1.5 if goal_diff > 0 else 1.5
        elif abs(goal_diff) == 1:
            handicap = -0.5 if goal_diff > 0 else 0.5
        else:
            handicap = 0
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏• Handicap
        if handicap < 0:  # Home team favored
            handicap_result = home_goals + handicap - away_goals
        else:  # Away team favored
            handicap_result = home_goals - (away_goals + abs(handicap))
        
        if handicap_result > 0:
            handicap_outcome = "Home Win"
        elif handicap_result == 0:
            handicap_outcome = "Push"
        else:
            handicap_outcome = "Away Win"
        
        # Over/Under 2.5
        ou_line = 2.5
        ou_outcome = "Over" if total_goals > ou_line else "Under"
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏° (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π)
        corners_total = max(4, min(16, int(total_goals * 2.5 + np.random.randint(-2, 3))))
        corners_first_half = max(1, min(8, int(corners_total * 0.4 + np.random.randint(-1, 2))))
        corners_second_half = corners_total - corners_first_half
        
        # ‡∏ú‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°
        corners_ou_10 = "Over" if corners_total > 10 else "Under"
        corners_fh_5 = "Over" if corners_first_half > 5 else "Under"
        
        return {
            'handicap_line': handicap,
            'handicap_result': handicap_outcome,
            'total_goals': total_goals,
            'ou_line': ou_line,
            'ou_result': ou_outcome,
            'corners_total': corners_total,
            'corners_first_half': corners_first_half,
            'corners_second_half': corners_second_half,
            'corners_ou_10': corners_ou_10,
            'corners_fh_5': corners_fh_5
        }
    
    def get_odds_data(self, sport='soccer_epl'):
        """‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å The Odds API"""
        if not self.odds_api_key:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ Odds API Key - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á")
            return None
        
        print(f"üí∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á {sport}...")
        
        try:
            url = f"{self.odds_base_url}/sports/{sport}/odds"
            params = {
                'apiKey': self.odds_api_key,
                'regions': 'uk,us',
                'markets': 'h2h,spreads,totals',
                'oddsFormat': 'decimal'
            }
            
            response = requests.get(url, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(data)} ‡πÄ‡∏Å‡∏°")
                return data
            else:
                print(f"‚ùå Odds API Error: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Odds Error: {e}")
            return None
    
    def create_comprehensive_dataset(self, league_code, days_back=30):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        print(f"üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {league_code}...")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        matches_df = self.get_recent_matches_with_details(league_code, days_back)
        
        if matches_df is None:
            return None
        
        # ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        sport_mapping = {
            'PL': 'soccer_epl',
            'PD': 'soccer_spain_la_liga',
            'BL1': 'soccer_germany_bundesliga',
            'SA': 'soccer_italy_serie_a',
            'FL1': 'soccer_france_ligue_one'
        }
        
        sport_key = sport_mapping.get(league_code)
        if sport_key:
            odds_data = self.get_odds_data(sport_key)
            # TODO: ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        filename = f"{league_code.lower()}_comprehensive_data.csv"
        matches_df.to_csv(filename, index=False)
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {filename}")
        
        return matches_df
    
    def analyze_betting_patterns(self, df, league_name):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô"""
        if df is None or len(df) == 0:
            return
        
        print(f"\nüìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô {league_name}:")
        print("=" * 50)
        
        # Handicap Analysis
        handicap_home_wins = len(df[df['handicap_result'] == 'Home Win'])
        handicap_away_wins = len(df[df['handicap_result'] == 'Away Win'])
        handicap_pushes = len(df[df['handicap_result'] == 'Push'])
        
        print(f"üé≤ Handicap Results:")
        print(f"   Home Win: {handicap_home_wins} ({handicap_home_wins/len(df)*100:.1f}%)")
        print(f"   Away Win: {handicap_away_wins} ({handicap_away_wins/len(df)*100:.1f}%)")
        print(f"   Push: {handicap_pushes} ({handicap_pushes/len(df)*100:.1f}%)")
        
        # Over/Under Analysis
        over_count = len(df[df['ou_result'] == 'Over'])
        under_count = len(df[df['ou_result'] == 'Under'])
        avg_goals = df['total_goals'].mean()
        
        print(f"\n‚öΩ Over/Under 2.5:")
        print(f"   Over: {over_count} ({over_count/len(df)*100:.1f}%)")
        print(f"   Under: {under_count} ({under_count/len(df)*100:.1f}%)")
        print(f"   ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_goals:.2f}")
        
        # Corners Analysis
        corners_over_10 = len(df[df['corners_ou_10'] == 'Over'])
        corners_under_10 = len(df[df['corners_ou_10'] == 'Under'])
        corners_fh_over_5 = len(df[df['corners_fh_5'] == 'Over'])
        avg_corners = df['corners_total'].mean()
        avg_corners_fh = df['corners_first_half'].mean()
        
        print(f"\nü•Ö Corners Analysis:")
        print(f"   Total Over 10: {corners_over_10} ({corners_over_10/len(df)*100:.1f}%)")
        print(f"   Total Under 10: {corners_under_10} ({corners_under_10/len(df)*100:.1f}%)")
        print(f"   First Half Over 5: {corners_fh_over_5} ({corners_fh_over_5/len(df)*100:.1f}%)")
        print(f"   ‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_corners:.1f} (‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å {avg_corners_fh:.1f})")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üé≤ Real Betting Data Collector")
    print("üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Handicap, Over/Under ‡πÅ‡∏•‡∏∞ Corners ‡∏à‡∏£‡∏¥‡∏á")
    print("=" * 70)
    
    # API Keys
    football_api_key = "052fd4885cf943ad859c89cef542e2e5"
    odds_api_key = None  # ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏¢‡∏Å
    
    collector = RealBettingDataCollector(football_api_key, odds_api_key)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏•‡∏µ‡∏Å
    leagues = [
        ('PL', 'Premier League'),
        ('PD', 'La Liga')
    ]
    
    results = {}
    
    for league_code, league_name in leagues:
        print(f"\n{'='*70}")
        print(f"üèÜ {league_name} ({league_code})")
        print(f"{'='*70}")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        df = collector.create_comprehensive_dataset(league_code, days_back=30)
        
        if df is not None:
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            collector.analyze_betting_patterns(df, league_name)
            results[league_name] = df
        
        # ‡∏£‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô Rate Limit
        time.sleep(2)
    
    print(f"\n{'='*70}")
    print("üéâ ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    
    if results:
        print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:")
        for league, df in results.items():
            print(f"   üìÅ {league}: {len(df)} ‡πÄ‡∏Å‡∏°")
        
        print(f"\nüéØ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Advanced ML Models!")
        print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: Match Results + Handicap + Over/Under + Corners")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
    
    return results

if __name__ == "__main__":
    import numpy as np  # ‡πÄ‡∏û‡∏¥‡πà‡∏° import
    results = main()
