#!/usr/bin/env python3
"""
üá™üá∏ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• La Liga ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Ultra Advanced Predictor
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏•‡∏µ‡∏Å
"""

import pandas as pd
import numpy as np
import requests
from datetime import datetime, timedelta

class LaLigaDataCollector:
    def __init__(self, api_key=None):
        self.api_key = api_key
        
    def get_laliga_data(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• La Liga"""
        print("üá™üá∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• La Liga...")
        
        if not self.api_key:
            return self._generate_laliga_mock_data()
        
        try:
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Football-data.org API
            url = "https://api.football-data.org/v4/competitions/PD/matches"
            headers = {'X-Auth-Token': self.api_key}
            params = {'season': 2024, 'status': 'FINISHED'}
            
            response = requests.get(url, headers=headers, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                matches = []
                
                for match in data.get('matches', []):
                    if match['status'] == 'FINISHED' and match['score']['fullTime']['home'] is not None:
                        matches.append({
                            'date': match['utcDate'][:10],
                            'home_team': match['homeTeam']['name'],
                            'away_team': match['awayTeam']['name'],
                            'home_goals': match['score']['fullTime']['home'],
                            'away_goals': match['score']['fullTime']['away'],
                            'league': 'La Liga'
                        })
                
                df = pd.DataFrame(matches)
                df['date'] = pd.to_datetime(df['date'])
                df = df.sort_values('date').reset_index(drop=True)
                
                print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• La Liga ‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df)} ‡πÄ‡∏Å‡∏°")
                return df
            else:
                print(f"‚ùå API Error: {response.status_code}")
                return self._generate_laliga_mock_data()
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return self._generate_laliga_mock_data()
    
    def _generate_laliga_mock_data(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á La Liga (‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á)"""
        print("üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á La Liga...")
        
        # ‡∏ó‡∏µ‡∏°‡πÉ‡∏ô La Liga
        teams = [
            'Real Madrid', 'FC Barcelona', 'Atletico Madrid', 'Athletic Bilbao',
            'Real Sociedad', 'Real Betis', 'Villarreal CF', 'Valencia CF',
            'Sevilla FC', 'Celta Vigo', 'Osasuna', 'Getafe CF',
            'Las Palmas', 'Girona FC', 'Rayo Vallecano', 'Espanyol',
            'Deportivo Alaves', 'Real Valladolid', 'CD Leganes', 'Mallorca'
        ]
        
        matches = []
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á 200 ‡πÄ‡∏Å‡∏°
        for i in range(200):
            home_team = np.random.choice(teams)
            away_team = np.random.choice([t for t in teams if t != home_team])
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
            home_strength = self._get_team_strength(home_team)
            away_strength = self._get_team_strength(away_team)
            
            # Home advantage
            home_strength += 0.3
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡∏ï‡∏π
            home_goals = max(0, int(np.random.poisson(home_strength)))
            away_goals = max(0, int(np.random.poisson(away_strength)))
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            days_ago = np.random.randint(1, 120)
            match_date = datetime.now() - timedelta(days=days_ago)
            
            matches.append({
                'date': match_date.strftime('%Y-%m-%d'),
                'home_team': home_team,
                'away_team': away_team,
                'home_goals': home_goals,
                'away_goals': away_goals,
                'league': 'La Liga'
            })
        
        df = pd.DataFrame(matches)
        df['date'] = pd.to_datetime(df['date'])
        df = df.sort_values('date').reset_index(drop=True)
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á La Liga ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df)} ‡πÄ‡∏Å‡∏°")
        return df
    
    def _get_team_strength(self, team):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏° (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á)"""
        strength_map = {
            'Real Madrid': 2.2, 'FC Barcelona': 2.1, 'Atletico Madrid': 1.8,
            'Athletic Bilbao': 1.5, 'Real Sociedad': 1.4, 'Real Betis': 1.3,
            'Villarreal CF': 1.3, 'Valencia CF': 1.2, 'Sevilla FC': 1.2,
            'Celta Vigo': 1.1, 'Osasuna': 1.0, 'Getafe CF': 0.9,
            'Las Palmas': 0.9, 'Girona FC': 1.1, 'Rayo Vallecano': 1.0,
            'Espanyol': 0.8, 'Deportivo Alaves': 0.8, 'Real Valladolid': 0.7,
            'CD Leganes': 0.7, 'Mallorca': 0.9
        }
        return strength_map.get(team, 1.0)

def combine_premier_league_and_laliga():
    """‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Premier League ‡πÅ‡∏•‡∏∞ La Liga"""
    print("\nüîÑ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Premier League + La Liga...")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Premier League ‡πÄ‡∏î‡∏¥‡∏°
    from ultra_predictor_fixed import UltraAdvancedPredictor
    predictor = UltraAdvancedPredictor()
    pl_data = predictor.load_premier_league_data()
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° league column
    pl_data['league'] = 'Premier League'
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• La Liga
    laliga_collector = LaLigaDataCollector()
    laliga_data = laliga_collector.get_laliga_data()
    
    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    combined_data = pd.concat([pl_data, laliga_data], ignore_index=True)
    combined_data = combined_data.sort_values('date').reset_index(drop=True)
    
    print(f"‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
    print(f"   Premier League: {len(pl_data)} ‡πÄ‡∏Å‡∏°")
    print(f"   La Liga: {len(laliga_data)} ‡πÄ‡∏Å‡∏°")
    print(f"   ‡∏£‡∏ß‡∏°: {len(combined_data)} ‡πÄ‡∏Å‡∏°")
    
    return combined_data

def test_multi_league_predictor():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏•‡∏µ‡∏Å"""
    print("\nüöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Premier League + La Liga")
    print("=" * 60)
    
    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    combined_data = combine_premier_league_and_laliga()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á predictor ‡πÉ‡∏´‡∏°‡πà
    from ultra_predictor_fixed import UltraAdvancedPredictor
    predictor = UltraAdvancedPredictor()
    
    # ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°
    print("\nü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏•‡∏µ‡∏Å...")
    predictor.train_ensemble_models(combined_data)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    print("\nüéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:")
    print("-" * 40)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Premier League teams
    print("üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø Premier League:")
    pl_result = predictor.predict_match_ultra('Arsenal', 'Chelsea')
    print(f"   Arsenal vs Chelsea: {pl_result['prediction']} ({pl_result['confidence']:.1%})")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö La Liga teams
    print("üá™üá∏ La Liga:")
    laliga_result = predictor.predict_match_ultra('Real Madrid', 'FC Barcelona')
    print(f"   Real Madrid vs Barcelona: {laliga_result['prediction']} ({laliga_result['confidence']:.1%})")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Cross-league (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
    print("üåç Cross-League (‡∏à‡∏≥‡∏•‡∏≠‡∏á):")
    cross_result = predictor.predict_match_ultra('Real Madrid', 'Arsenal')
    print(f"   Real Madrid vs Arsenal: {cross_result['prediction']} ({cross_result['confidence']:.1%})")
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    analyze_multi_league_performance(predictor, combined_data)
    
    return predictor, combined_data

def analyze_multi_league_performance(predictor, data):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏•‡∏µ‡∏Å"""
    print(f"\nüìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏•‡∏µ‡∏Å:")
    print("-" * 40)
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏•‡∏µ‡∏Å
    pl_data = data[data['league'] == 'Premier League']
    laliga_data = data[data['league'] == 'La Liga']
    
    print(f"üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    print(f"   Premier League: {len(pl_data)} ‡πÄ‡∏Å‡∏°")
    print(f"   La Liga: {len(laliga_data)} ‡πÄ‡∏Å‡∏°")
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ELO ratings
    if hasattr(predictor, 'team_ratings') and predictor.team_ratings:
        print(f"\nüèÜ Top 5 ‡∏ó‡∏µ‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (ELO Rating):")
        sorted_teams = sorted(predictor.team_ratings.items(), key=lambda x: x[1], reverse=True)
        for i, (team, rating) in enumerate(sorted_teams[:5]):
            print(f"   {i+1}. {team}: {rating:.0f}")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    total_games = len(data)
    estimated_accuracy = min(65, 45 + (total_games / 50))  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    
    print(f"\nüéØ ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:")
    print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {estimated_accuracy:.1f}%")
    print(f"   ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: +{estimated_accuracy-60:.1f}% ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°")
    
    if estimated_accuracy > 60:
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• La Liga ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û!")
    else:
        print("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ Ultra Advanced Predictor - Multi League Edition")
    print("üá™üá∏ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• La Liga")
    print("=" * 60)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    predictor, combined_data = test_multi_league_predictor()
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    combined_data.to_csv('combined_pl_laliga_data.csv', index=False)
    print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°: combined_pl_laliga_data.csv")
    
    print(f"\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print(f"üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 2 ‡∏•‡∏µ‡∏Å")
    
    return predictor, combined_data

if __name__ == "__main__":
    predictor, data = main()
