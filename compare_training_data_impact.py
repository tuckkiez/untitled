#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö 20 ‡πÄ‡∏Å‡∏° vs 100 ‡πÄ‡∏Å‡∏°
"""

from enhanced_predictor_fixed import EnhancedFootballPredictorFixed
from real_data_example import RealDataPredictor
import pandas as pd
import numpy as np

class TrainingDataImpactAnalysis:
    def __init__(self):
        self.api_token = "052fd4885cf943ad859c89cef542e2e5"
        self.historical_data = None
        
    def load_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        
        real_predictor = RealDataPredictor(api_key=self.api_token)
        data_2024 = real_predictor.get_premier_league_data(season=2024)
        data_2023 = real_predictor.get_premier_league_data(season=2023)
        
        if data_2024 is None:
            return False
        
        if data_2023 is not None:
            self.historical_data = pd.concat([data_2023, data_2024], ignore_index=True)
        else:
            self.historical_data = data_2024
        
        self.historical_data = self.historical_data.sort_values('date').reset_index(drop=True)
        self.historical_data = self.historical_data.dropna(subset=['home_goals', 'away_goals'])
        
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        return True
    
    def test_same_20_matches_different_training(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö 20 ‡πÄ‡∏Å‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô"""
        print("\nüî¨ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: 20 ‡πÄ‡∏Å‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô")
        print("="*80)
        
        # 20 ‡πÄ‡∏Å‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡πÄ‡∏Å‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏™‡πÅ‡∏¢‡∏Å)
        last_20_matches = self.historical_data.tail(20)
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 740 ‡πÄ‡∏Å‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏™ 20 ‡πÄ‡∏Å‡∏°‡πÅ‡∏¢‡∏Å)
        train_data_740 = self.historical_data.iloc[:-20]  # 740 ‡πÄ‡∏Å‡∏°
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 660 ‡πÄ‡∏Å‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏™ 100 ‡πÄ‡∏Å‡∏°)
        train_data_660 = self.historical_data.iloc[:-100]  # 660 ‡πÄ‡∏Å‡∏°
        
        print(f"üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:")
        print(f"   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå 1: ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢ {len(train_data_740)} ‡πÄ‡∏Å‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏ó‡∏™ 20 ‡πÄ‡∏Å‡∏°‡πÅ‡∏¢‡∏Å)")
        print(f"   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå 2: ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢ {len(train_data_660)} ‡πÄ‡∏Å‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏ó‡∏™ 100 ‡πÄ‡∏Å‡∏°)")
        print(f"   ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: 20 ‡πÄ‡∏Å‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô")
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà 1
        print(f"\nü§ñ ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà 1 (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 740 ‡πÄ‡∏Å‡∏°)...")
        model_740 = EnhancedFootballPredictorFixed()
        success_740 = model_740.train(train_data_740)
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà 2
        print(f"\nü§ñ ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà 2 (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 660 ‡πÄ‡∏Å‡∏°)...")
        model_660 = EnhancedFootballPredictorFixed()
        success_660 = model_660.train(train_data_660)
        
        if not (success_740 and success_660):
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ")
            return
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 20 ‡πÄ‡∏Å‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        results_740 = []
        results_660 = []
        
        print(f"\nüìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö 20 ‡πÄ‡∏Å‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô:")
        print(f"{'No.':<3} {'Date':<12} {'Match':<35} {'Result':<8} {'740-‡πÄ‡∏Å‡∏°':<8} {'660-‡πÄ‡∏Å‡∏°':<8} {'740-Conf':<8} {'660-Conf':<8}")
        print("-" * 85)
        
        for idx, (_, match) in enumerate(last_20_matches.iterrows(), 1):
            # ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
            home_goals = int(match['home_goals'])
            away_goals = int(match['away_goals'])
            
            if home_goals > away_goals:
                actual = 'Home Win'
                actual_short = 'H'
            elif home_goals < away_goals:
                actual = 'Away Win'
                actual_short = 'A'
            else:
                actual = 'Draw'
                actual_short = 'D'
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• 740 ‡πÄ‡∏Å‡∏°
            pred_740 = model_740.predict_match(
                match['home_team'], match['away_team'], train_data_740
            )
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• 660 ‡πÄ‡∏Å‡∏°
            pred_660 = model_660.predict_match(
                match['home_team'], match['away_team'], train_data_660
            )
            
            if pred_740 and pred_660:
                correct_740 = (pred_740['prediction'] == actual)
                correct_660 = (pred_660['prediction'] == actual)
                
                results_740.append(correct_740)
                results_660.append(correct_660)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                home_short = match['home_team'].replace(' FC', '').replace(' United', ' Utd')[:15]
                away_short = match['away_team'].replace(' FC', '').replace(' United', ' Utd')[:15]
                match_str = f"{home_short} vs {away_short}"
                
                result_str = f"{home_goals}-{away_goals} ({actual_short})"
                pred_740_short = pred_740['prediction'][0] if pred_740['prediction'] != 'Draw' else 'D'
                pred_660_short = pred_660['prediction'][0] if pred_660['prediction'] != 'Draw' else 'D'
                
                status_740 = "‚úÖ" if correct_740 else "‚ùå"
                status_660 = "‚úÖ" if correct_660 else "‚ùå"
                
                print(f"{idx:<3} {match['date'].strftime('%Y-%m-%d'):<12} {match_str:<35} {result_str:<8} "
                      f"{pred_740_short}{status_740:<7} {pred_660_short}{status_660:<7} "
                      f"{pred_740['confidence']:.3f}    {pred_660['confidence']:.3f}")
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        accuracy_740 = sum(results_740) / len(results_740) if results_740 else 0
        accuracy_660 = sum(results_660) / len(results_660) if results_660 else 0
        
        print("\n" + "="*85)
        print(f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:")
        print(f"   ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 740 ‡πÄ‡∏Å‡∏°: {sum(results_740)}/20 = {accuracy_740:.3f} ({accuracy_740*100:.1f}%)")
        print(f"   ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 660 ‡πÄ‡∏Å‡∏°: {sum(results_660)}/20 = {accuracy_660:.3f} ({accuracy_660*100:.1f}%)")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á: {(accuracy_740 - accuracy_660):.3f} ({(accuracy_740 - accuracy_660)*100:.1f} percentage points)")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        print(f"\nüîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
        if accuracy_740 > accuracy_660:
            print(f"   ‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤")
            print(f"   üìà ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô 80 ‡πÄ‡∏Å‡∏° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ {(accuracy_740 - accuracy_660)*100:.1f}%")
        elif accuracy_660 > accuracy_740:
            print(f"   ü§î ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤")
            print(f"   ‚ö†Ô∏è  ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ overfitting ‡∏´‡∏£‡∏∑‡∏≠ noise ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
        else:
            print(f"   ü§ù ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡πâ‡∏ú‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô")
        
        return {
            'accuracy_740': accuracy_740,
            'accuracy_660': accuracy_660,
            'difference': accuracy_740 - accuracy_660
        }
    
    def analyze_training_data_curve(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô"""
        print(f"\nüìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Training Data Curve")
        print("="*60)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ï‡πà‡∏≤‡∏á‡πÜ
        training_sizes = [500, 550, 600, 650, 700, 740]
        test_matches = self.historical_data.tail(20)
        accuracies = []
        
        print(f"{'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô':<12} {'‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥':<12} {'‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á':<12}")
        print("-" * 40)
        
        prev_accuracy = 0
        for size in training_sizes:
            if len(self.historical_data) < size + 20:
                continue
                
            train_data = self.historical_data.iloc[:size]
            
            # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
            model = EnhancedFootballPredictorFixed()
            if model.train(train_data):
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                correct = 0
                total = 0
                
                for _, match in test_matches.iterrows():
                    pred = model.predict_match(
                        match['home_team'], match['away_team'], train_data
                    )
                    
                    if pred:
                        actual = 'Home Win' if match['home_goals'] > match['away_goals'] else \
                                'Away Win' if match['home_goals'] < match['away_goals'] else 'Draw'
                        
                        if pred['prediction'] == actual:
                            correct += 1
                        total += 1
                
                accuracy = correct / total if total > 0 else 0
                accuracies.append(accuracy)
                improvement = accuracy - prev_accuracy
                
                print(f"{size:<12} {accuracy:.3f} ({accuracy*100:.1f}%)  {improvement:+.3f}")
                prev_accuracy = accuracy
        
        # ‡∏™‡∏£‡∏∏‡∏õ
        if len(accuracies) >= 2:
            best_accuracy = max(accuracies)
            best_size = training_sizes[accuracies.index(best_accuracy)]
            
            print(f"\nüèÜ ‡∏™‡∏£‡∏∏‡∏õ:")
            print(f"   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {best_size} ‡πÄ‡∏Å‡∏°")
            print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {best_accuracy:.3f} ({best_accuracy*100:.1f}%)")
            print(f"   ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≤‡∏Å 500 ‡πÄ‡∏Å‡∏°: +{(best_accuracy - accuracies[0])*100:.1f}%")
    
    def run_analysis(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üî¨ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô")
        print("üéØ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö 20 ‡πÄ‡∏Å‡∏° vs 100 ‡πÄ‡∏Å‡∏°")
        print("="*80)
        
        if not self.load_data():
            return
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 20 ‡πÄ‡∏Å‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
        comparison_result = self.test_same_20_matches_different_training()
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå training curve
        self.analyze_training_data_curve()
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        print(f"\nüí° ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:")
        print(f"="*60)
        print(f"‚ùì ‡∏ó‡∏≥‡πÑ‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö 20 ‡πÄ‡∏Å‡∏°‡πÅ‡∏¢‡∏Å vs 20 ‡πÄ‡∏Å‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏ô 100 ‡πÄ‡∏Å‡∏°‡∏ñ‡∏∂‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô?")
        print(f"")
        print(f"‚úÖ ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏•‡∏±‡∏Å:")
        print(f"   1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô: 740 ‡πÄ‡∏Å‡∏° vs 660 ‡πÄ‡∏Å‡∏°")
        print(f"   2. ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤")
        print(f"   3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 80 ‡πÄ‡∏Å‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")
        
        if comparison_result:
            diff = comparison_result['difference'] * 100
            print(f"")
            print(f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô:")
            print(f"   - ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 740 ‡πÄ‡∏Å‡∏°: {comparison_result['accuracy_740']*100:.1f}%")
            print(f"   - ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 660 ‡πÄ‡∏Å‡∏°: {comparison_result['accuracy_660']*100:.1f}%")
            print(f"   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á: {diff:+.1f} percentage points")
        
        print(f"")
        print(f"üéØ ‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ:")
        print(f"   ‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
        print(f"   üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ = ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤")
        print(f"   üî¨ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö 100 ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤")

def main():
    analyzer = TrainingDataImpactAnalysis()
    analyzer.run_analysis()

if __name__ == "__main__":
    main()
