#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å football-data.org API
"""

from real_data_example import RealDataPredictor
from football_predictor import FootballPredictor
import pandas as pd
from datetime import datetime

def main():
    # API Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    API_TOKEN = "052fd4885cf943ad859c89cef542e2e5"
    
    print("=== ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á ===")
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö football-data.org API...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á predictor
    predictor = RealDataPredictor(api_key=API_TOKEN)
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏• 2024
        print("\n1. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏• 2024...")
        historical_data = predictor.get_premier_league_data(season=2024)
        
        if historical_data is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API token")
            return
        
        print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(historical_data)} ‡πÄ‡∏Å‡∏°")
        print(f"üìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {historical_data['date'].min()} ‡∏ñ‡∏∂‡∏á {historical_data['date'].max()}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        print("\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        print(historical_data.tail(5)[['date', 'home_team', 'away_team', 'home_goals', 'away_goals']].to_string(index=False))
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if len(historical_data) < 50:
            print(f"‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô (‡∏°‡∏µ {len(historical_data)} ‡πÄ‡∏Å‡∏°, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 50 ‡πÄ‡∏Å‡∏°)")
            print("üí° ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢...")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏• 2023 ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            historical_2023 = predictor.get_premier_league_data(season=2023)
            if historical_2023 is not None:
                historical_data = pd.concat([historical_2023, historical_data], ignore_index=True)
                historical_data = historical_data.sort_values('date').reset_index(drop=True)
                print(f"‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß: {len(historical_data)} ‡πÄ‡∏Å‡∏°")
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        print(f"\n2. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á...")
        football_predictor = FootballPredictor()
        
        if not football_predictor.train(historical_data):
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ")
            return
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏°
        print(f"\n3. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á:")
        team_stats = analyze_real_team_performance(historical_data)
        print(team_stats.head(10).to_string(index=False))
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        team_stats.to_csv('/Users/80090/Desktop/Project/untitle/real_team_analysis.csv', index=False)
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°‡πÉ‡∏ô real_team_analysis.csv")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á
        print(f"\n4. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á...")
        upcoming_matches = predictor.get_upcoming_matches(days_ahead=14)
        
        if upcoming_matches is not None and len(upcoming_matches) > 0:
            print(f"üîÆ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô {len(upcoming_matches)} ‡∏ô‡∏±‡∏î‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 14 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤:")
            print(upcoming_matches[['date', 'time', 'home_team', 'away_team']].to_string(index=False))
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á
            print(f"\n5. ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á:")
            predictions = []
            
            for _, match in upcoming_matches.iterrows():
                result = football_predictor.predict_match(
                    match['home_team'], 
                    match['away_team'], 
                    historical_data
                )
                
                if result:
                    predictions.append({
                        'date': match['date'],
                        'time': match['time'],
                        'home_team': match['home_team'],
                        'away_team': match['away_team'],
                        'prediction': result['prediction'],
                        'confidence': result['confidence'],
                        'home_win_prob': result['probabilities']['Home Win'],
                        'draw_prob': result['probabilities']['Draw'],
                        'away_win_prob': result['probabilities']['Away Win']
                    })
                    
                    print(f"\nüìÖ {match['date']} {match['time']}")
                    print(f"‚öΩ {match['home_team']} vs {match['away_team']}")
                    print(f"üéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {result['prediction']}")
                    print(f"üé≤ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {result['confidence']:.3f} ({result['confidence']*100:.1f}%)")
                    print("üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô:")
                    for outcome, prob in result['probabilities'].items():
                        print(f"   {outcome}: {prob:.3f} ({prob*100:.1f}%)")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            if predictions:
                predictions_df = pd.DataFrame(predictions)
                predictions_df.to_csv('/Users/80090/Desktop/Project/untitle/real_predictions.csv', index=False)
                print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏ô real_predictions.csv")
        else:
            print("‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ")
        
        # ‡∏ó‡∏≥ backtest ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        print(f"\n6. ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Backtest ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á:")
        if len(historical_data) >= 100:
            backtest_games = min(50, len(historical_data) // 4)
            backtest_result = football_predictor.backtest(historical_data, test_period_games=backtest_games)
            
            if backtest_result:
                print(f"üìà ‡∏ú‡∏• Backtest ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á:")
                print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {backtest_result['total_games']}")
                print(f"   ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å: {backtest_result['correct_predictions']}")
                print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: {backtest_result['accuracy']:.3f} ({backtest_result['accuracy']*100:.1f}%)")
        else:
            print("‚ÑπÔ∏è  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backtest")
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
        print(f"\n7. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°:")
        popular_matches = [
            ('Arsenal', 'Chelsea'),
            ('Manchester City', 'Liverpool'),
            ('Manchester United', 'Tottenham'),
            ('Newcastle United', 'Brighton & Hove Albion')
        ]
        
        for home, away in popular_matches:
            result = football_predictor.predict_match(home, away, historical_data)
            if result:
                print(f"\n‚öΩ {home} vs {away}")
                print(f"üéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {result['prediction']}")
                print(f"üé≤ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {result['confidence']:.3f} ({result['confidence']*100:.1f}%)")
        
        print(f"\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô:")
        print(f"   - real_team_analysis.csv (‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°)")
        print(f"   - real_predictions.csv (‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á)")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("   1. API token ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        print("   2. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï")
        print("   3. API rate limit (‡∏ü‡∏£‡∏µ‡πÅ‡∏û‡∏•‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î)")

def analyze_real_team_performance(matches_df):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
    teams = list(set(matches_df['home_team'].tolist() + matches_df['away_team'].tolist()))
    team_stats = []
    
    for team in teams:
        # ‡∏´‡∏≤‡πÄ‡∏Å‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
        home_games = matches_df[matches_df['home_team'] == team]
        away_games = matches_df[matches_df['away_team'] == team]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        total_games = len(home_games) + len(away_games)
        
        if total_games == 0:
            continue
        
        # ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        home_wins = len(home_games[home_games['home_goals'] > home_games['away_goals']])
        home_draws = len(home_games[home_games['home_goals'] == home_games['away_goals']])
        home_losses = len(home_games[home_games['home_goals'] < home_games['away_goals']])
        
        away_wins = len(away_games[away_games['away_goals'] > away_games['home_goals']])
        away_draws = len(away_games[away_games['away_goals'] == away_games['home_goals']])
        away_losses = len(away_games[away_games['away_goals'] < away_games['home_goals']])
        
        total_wins = home_wins + away_wins
        total_draws = home_draws + away_draws
        total_losses = home_losses + away_losses
        
        # ‡∏õ‡∏£‡∏∞‡∏ï‡∏π
        goals_for = (home_games['home_goals'].sum() + away_games['away_goals'].sum())
        goals_against = (home_games['away_goals'].sum() + away_games['home_goals'].sum())
        
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (3 ‡πÅ‡∏ï‡πâ‡∏°‡∏ï‡πà‡∏≠‡∏ä‡∏ô‡∏∞, 1 ‡πÅ‡∏ï‡πâ‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏°‡∏≠)
        points = total_wins * 3 + total_draws * 1
        
        team_stats.append({
            'team': team,
            'games': total_games,
            'wins': total_wins,
            'draws': total_draws,
            'losses': total_losses,
            'goals_for': goals_for,
            'goals_against': goals_against,
            'goal_difference': goals_for - goals_against,
            'points': points,
            'win_rate': round(total_wins / total_games, 3) if total_games > 0 else 0,
            'points_per_game': round(points / total_games, 3) if total_games > 0 else 0
        })
    
    team_stats_df = pd.DataFrame(team_stats)
    team_stats_df = team_stats_df.sort_values('points', ascending=False).reset_index(drop=True)
    team_stats_df.index = team_stats_df.index + 1  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å 1
    
    return team_stats_df

if __name__ == "__main__":
    main()
