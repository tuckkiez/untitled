#!/usr/bin/env python3
"""
üöÄ Update Index with H2H Percentages - July 17-18, 2025
‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤ index.html ‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
"""

import json
import os
import re
from datetime import datetime

def update_index_with_h2h_percentages():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤ index.html ‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå"""
    print("üöÄ Update Index with H2H Percentages - July 17-18, 2025")
    print("=" * 60)
    
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        with open('uefa_competitions_real_data_analysis_with_exact_scores_final.json', 'r', encoding='utf-8') as f:
            analysis_data = json.load(f)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå head-to-head ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        for league in ['europa_league', 'conference_league']:
            for match in analysis_data[league]:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå head-to-head
                calculate_h2h_percentages(match)
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head
                update_predictions_with_h2h(match)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        with open('uefa_competitions_real_data_analysis_with_h2h_percentages.json', 'w', encoding='utf-8') as f:
            json.dump(analysis_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: uefa_competitions_real_data_analysis_with_h2h_percentages.json")
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå index.html
        with open('index.html', 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        europa_league_html = generate_league_table_html(analysis_data['europa_league'], 'UEFA Europa League')
        conference_league_html = generate_league_table_html(analysis_data['conference_league'], 'UEFA Europa Conference League')
        
        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå index.html
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á UEFA Europa League
        europa_pattern = r'<!-- UEFA Europa League Section Start -->.*?<!-- UEFA Europa League Section End -->'
        europa_replacement = f'<!-- UEFA Europa League Section Start -->\n{europa_league_html}\n<!-- UEFA Europa League Section End -->'
        html_content = re.sub(europa_pattern, europa_replacement, html_content, flags=re.DOTALL)
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á UEFA Europa Conference League
        conference_pattern = r'<!-- UEFA Conference League Section Start -->.*?<!-- UEFA Conference League Section End -->'
        conference_replacement = f'<!-- UEFA Conference League Section Start -->\n{conference_league_html}\n<!-- UEFA Conference League Section End -->'
        html_content = re.sub(conference_pattern, conference_replacement, html_content, flags=re.DOTALL)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå index.html ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_filename = f'index_backup_{timestamp}.html'
        with open(backup_filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        with open('index.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå index.html ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà {backup_filename})")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

def calculate_h2h_percentages(match):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå head-to-head"""
    h2h = match['head_to_head']
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head
    if h2h['matches_count'] > 0:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞ ‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏û‡πâ
        h2h['home_win_pct'] = round((h2h['home_wins'] / h2h['matches_count']) * 100, 1)
        h2h['away_win_pct'] = round((h2h['away_wins'] / h2h['matches_count']) * 100, 1)
        h2h['draw_pct'] = round((h2h['draws'] / h2h['matches_count']) * 100, 1)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå over/under
        h2h['over_pct'] = round(h2h['over_2_5_rate'] * 100, 1)
        h2h['under_pct'] = round((1 - h2h['over_2_5_rate']) * 100, 1)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå both teams to score
        h2h['btts_yes_pct'] = round(h2h['both_teams_scored_rate'] * 100, 1)
        h2h['btts_no_pct'] = round((1 - h2h['both_teams_scored_rate']) * 100, 1)
    else:
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head
        h2h['home_win_pct'] = 0
        h2h['away_win_pct'] = 0
        h2h['draw_pct'] = 0
        h2h['over_pct'] = 0
        h2h['under_pct'] = 0
        h2h['btts_yes_pct'] = 0
        h2h['btts_no_pct'] = 0

def update_predictions_with_h2h(match):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head"""
    h2h = match['head_to_head']
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head
    if h2h['matches_count'] > 0:
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head
        h2h_weight = min(0.4, h2h['matches_count'] * 0.15)  # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 40%
        team_weight = 1 - h2h_weight
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        match_result = match['match_result']
        home_win_prob = match_result['home_win'] / 100
        away_win_prob = match_result['away_win'] / 100
        draw_prob = match_result['draw'] / 100
        
        # ‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head
        h2h_home_win_prob = h2h['home_win_pct'] / 100
        h2h_away_win_prob = h2h['away_win_pct'] / 100
        h2h_draw_prob = h2h['draw_pct'] / 100
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà
        new_home_win_prob = (home_win_prob * team_weight) + (h2h_home_win_prob * h2h_weight)
        new_away_win_prob = (away_win_prob * team_weight) + (h2h_away_win_prob * h2h_weight)
        new_draw_prob = (draw_prob * team_weight) + (h2h_draw_prob * h2h_weight)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 1
        total = new_home_win_prob + new_away_win_prob + new_draw_prob
        new_home_win_prob /= total
        new_away_win_prob /= total
        new_draw_prob /= total
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
        match_result['home_win'] = round(new_home_win_prob * 100, 1)
        match_result['away_win'] = round(new_away_win_prob * 100, 1)
        match_result['draw'] = round(new_draw_prob * 100, 1)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        if new_home_win_prob > max(new_draw_prob, new_away_win_prob):
            match_result['prediction'] = "Home Win"
            match_result['confidence'] = round(new_home_win_prob * 100, 1)
        elif new_draw_prob > max(new_home_win_prob, new_away_win_prob):
            match_result['prediction'] = "Draw"
            match_result['confidence'] = round(new_draw_prob * 100, 1)
        else:
            match_result['prediction'] = "Away Win"
            match_result['confidence'] = round(new_away_win_prob * 100, 1)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ over/under
        over_under = match['over_under']
        over_prob = over_under['over_prob'] / 100
        under_prob = over_under['under_prob'] / 100
        
        # ‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head
        h2h_over_prob = h2h['over_pct'] / 100
        h2h_under_prob = h2h['under_pct'] / 100
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà
        new_over_prob = (over_prob * team_weight) + (h2h_over_prob * h2h_weight)
        new_under_prob = (under_prob * team_weight) + (h2h_under_prob * h2h_weight)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 1
        total = new_over_prob + new_under_prob
        new_over_prob /= total
        new_under_prob /= total
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
        over_under['over_prob'] = round(new_over_prob * 100, 1)
        over_under['under_prob'] = round(new_under_prob * 100, 1)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        if new_over_prob > new_under_prob:
            over_under['prediction'] = "Over"
            over_under['confidence'] = round(new_over_prob * 100, 1)
        else:
            over_under['prediction'] = "Under"
            over_under['confidence'] = round(new_under_prob * 100, 1)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ both teams to score
        btts = match['both_teams_score']
        yes_prob = btts['yes_prob'] / 100
        no_prob = btts['no_prob'] / 100
        
        # ‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head-to-head
        h2h_yes_prob = h2h['btts_yes_pct'] / 100
        h2h_no_prob = h2h['btts_no_pct'] / 100
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà
        new_yes_prob = (yes_prob * team_weight) + (h2h_yes_prob * h2h_weight)
        new_no_prob = (no_prob * team_weight) + (h2h_no_prob * h2h_weight)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 1
        total = new_yes_prob + new_no_prob
        new_yes_prob /= total
        new_no_prob /= total
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
        btts['yes_prob'] = round(new_yes_prob * 100, 1)
        btts['no_prob'] = round(new_no_prob * 100, 1)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        if new_yes_prob > new_no_prob:
            btts['prediction'] = "Yes"
            btts['confidence'] = round(new_yes_prob * 100, 1)
        else:
            btts['prediction'] = "No"
            btts['confidence'] = round(new_no_prob * 100, 1)

def generate_league_table_html(matches, league_name):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
    html = f'''
    <div class="league-section mb-5">
        <h3 class="text-primary mb-3">{league_name} - July 17-18, 2025</h3>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Match</th>
                        <th>Time (Thai)</th>
                        <th>Match Result</th>
                        <th>Over/Under 2.5</th>
                        <th>Both Teams Score</th>
                        <th>Corners</th>
                        <th>H2H Stats</th>
                        <th>Exact Score</th>
                    </tr>
                </thead>
                <tbody>
    '''
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    matches = sorted(matches, key=lambda x: x['kickoff_thai'])
    
    for match in matches:
        home_team = match['home_team']
        away_team = match['away_team']
        kickoff = match['kickoff_thai']
        
        # Match Result
        match_result = match['match_result']
        match_prediction = match_result['prediction']
        match_confidence = match_result['confidence']
        match_color = get_confidence_color(match_confidence)
        
        # Over/Under
        over_under = match['over_under']
        ou_prediction = over_under['prediction']
        ou_confidence = over_under['confidence']
        ou_color = get_confidence_color(ou_confidence)
        
        # Both Teams Score
        btts = match['both_teams_score']
        btts_prediction = btts['prediction']
        btts_confidence = btts['confidence']
        btts_color = get_confidence_color(btts_confidence)
        
        # Corners
        corners = match['corners']['total']
        corners_prediction = corners['prediction']
        corners_confidence = corners['confidence']
        corners_color = get_confidence_color(corners_confidence)
        
        # Head to Head
        h2h = match['head_to_head']
        if h2h['matches_count'] > 0:
            h2h_text = f"{h2h['matches_count']} matches<br>"
            h2h_text += f"<span class='text-success'>Home: {h2h['home_win_pct']}%</span> | "
            h2h_text += f"<span class='text-warning'>Draw: {h2h['draw_pct']}%</span> | "
            h2h_text += f"<span class='text-danger'>Away: {h2h['away_win_pct']}%</span><br>"
            h2h_text += f"Over: {h2h['over_pct']}% | Under: {h2h['under_pct']}%<br>"
            h2h_text += f"BTTS: Yes {h2h['btts_yes_pct']}% | No {h2h['btts_no_pct']}%"
        else:
            h2h_text = "No previous meetings"
        
        # Exact Score
        exact_score = match.get('exact_score', {})
        score_prediction = exact_score.get('prediction', 'N/A')
        score_confidence = exact_score.get('confidence', 0)
        score_color = get_confidence_color(score_confidence)
        
        html += f'''
        <tr>
            <td>{home_team} vs {away_team}</td>
            <td>{kickoff.split(' ')[1]}</td>
            <td class="{match_color}">{match_prediction} ({match_confidence}%)</td>
            <td class="{ou_color}">{ou_prediction} ({ou_confidence}%)</td>
            <td class="{btts_color}">{btts_prediction} ({btts_confidence}%)</td>
            <td class="{corners_color}">{corners_prediction} {corners['line']} ({corners_confidence}%)</td>
            <td>{h2h_text}</td>
            <td class="{score_color}">{score_prediction} ({score_confidence}%)</td>
        </tr>
        '''
    
    html += '''
                </tbody>
            </table>
        </div>
    </div>
    '''
    
    return html

def get_confidence_color(confidence):
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô"""
    if confidence >= 80:
        return "text-success font-weight-bold"  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    elif confidence >= 65:
        return "text-primary"  # ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
    elif confidence >= 55:
        return ""  # ‡∏™‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥
    else:
        return "text-muted"  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤

if __name__ == "__main__":
    update_index_with_h2h_percentages()
