#!/usr/bin/env python3
"""
üìÖ Today Matches Fetcher
‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å API-Football ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 13 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á ‡∏ñ‡∏∂‡∏á 14 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)
"""

import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import pytz
import json
from typing import Dict, List, Any
import warnings
warnings.filterwarnings('ignore')

class TodayMatchesFetcher:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api-football-v1.p.rapidapi.com/v3"
        self.headers = {
            'x-rapidapi-host': 'api-football-v1.p.rapidapi.com',
            'x-rapidapi-key': api_key
        }
        
        # Major leagues to focus on
        self.target_leagues = {
            39: 'Premier League',
            140: 'La Liga', 
            78: 'Bundesliga',
            61: 'Ligue 1',
            135: 'Serie A',
            99: 'J-League 2',
            88: 'Eredivisie',
            94: 'Primeira Liga',
            203: 'Turkish Super League',
            144: 'Belgian Pro League'
        }
        
        print("üìÖ Today Matches Fetcher initialized!")
        print(f"üéØ Targeting {len(self.target_leagues)} major leagues")

    def get_today_matches(self) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (13 ‡∏Å.‡∏Ñ. ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á - 14 ‡∏Å.‡∏Ñ. ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á)"""
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ UTC+7)
        thailand_tz = pytz.timezone('Asia/Bangkok')
        
        # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 13 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2025 ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á (12:00) ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
        start_time = thailand_tz.localize(datetime(2025, 7, 13, 12, 0, 0))
        # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 14 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2025 ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á (12:00) ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢  
        end_time = thailand_tz.localize(datetime(2025, 7, 14, 12, 0, 0))
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
        start_utc = start_time.astimezone(pytz.UTC)
        end_utc = end_time.astimezone(pytz.UTC)
        
        print(f"üïê ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:")
        print(f"   ‡πÄ‡∏£‡∏¥‡πà‡∏°: {start_time.strftime('%Y-%m-%d %H:%M:%S %Z')}")
        print(f"   ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {end_time.strftime('%Y-%m-%d %H:%M:%S %Z')}")
        
        all_matches = []
        
        try:
            # ‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 13 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°
            matches_13 = self._fetch_matches_by_date("2025-07-13")
            # ‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 14 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°  
            matches_14 = self._fetch_matches_by_date("2025-07-14")
            
            # ‡∏£‡∏ß‡∏°‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            all_fixtures = matches_13 + matches_14
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏µ‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            for fixture in all_fixtures:
                match_time_str = fixture['fixture']['date']
                match_time_utc = datetime.fromisoformat(match_time_str.replace('Z', '+00:00'))
                match_time_utc = match_time_utc.replace(tzinfo=pytz.UTC)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                if start_utc <= match_time_utc < end_utc:
                    league_id = fixture['league']['id']
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏µ‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏ô‡πÉ‡∏à
                    if league_id in self.target_leagues:
                        match_data = self._extract_match_data(fixture)
                        if match_data:
                            all_matches.append(match_data)
            
            print(f"‚úÖ ‡∏û‡∏ö‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_matches)} ‡πÅ‡∏°‡∏ï‡∏ä‡πå")
            return all_matches
            
        except Exception as e:
            print(f"‚ùå Error fetching today matches: {e}")
            return []

    def _fetch_matches_by_date(self, date: str) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"""
        try:
            url = f"{self.base_url}/fixtures"
            params = {'date': date}
            
            response = requests.get(url, headers=self.headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                return data['response']
            else:
                print(f"‚ö†Ô∏è API Error for date {date}: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"‚ùå Error fetching matches for {date}: {e}")
            return []

    def _extract_match_data(self, fixture: Dict) -> Dict:
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"""
        try:
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
            match_time_str = fixture['fixture']['date']
            match_time_utc = datetime.fromisoformat(match_time_str.replace('Z', '+00:00'))
            match_time_utc = match_time_utc.replace(tzinfo=pytz.UTC)
            thailand_time = match_time_utc.astimezone(pytz.timezone('Asia/Bangkok'))
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            odds_data = self._get_match_odds(fixture['fixture']['id'])
            
            match_data = {
                'fixture_id': fixture['fixture']['id'],
                'league': self.target_leagues.get(fixture['league']['id'], fixture['league']['name']),
                'league_id': fixture['league']['id'],
                'match_time_thai': thailand_time.strftime('%H:%M'),
                'match_date_thai': thailand_time.strftime('%Y-%m-%d'),
                'home_team': fixture['teams']['home']['name'],
                'away_team': fixture['teams']['away']['name'],
                'home_team_id': fixture['teams']['home']['id'],
                'away_team_id': fixture['teams']['away']['id'],
                'venue': fixture['fixture']['venue']['name'] if fixture['fixture']['venue'] else 'TBD',
                'status': fixture['fixture']['status']['short'],
                
                # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
                'odds_home': odds_data.get('home', 'N/A'),
                'odds_draw': odds_data.get('draw', 'N/A'), 
                'odds_away': odds_data.get('away', 'N/A'),
                'odds_over_25': odds_data.get('over_25', 'N/A'),
                'odds_under_25': odds_data.get('under_25', 'N/A'),
                
                # ‡∏ú‡∏•‡∏ö‡∏≠‡∏• (‡∏ñ‡πâ‡∏≤‡πÅ‡∏Ç‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß)
                'home_score': fixture['goals']['home'] if fixture['goals']['home'] is not None else '',
                'away_score': fixture['goals']['away'] if fixture['goals']['away'] is not None else '',
                'match_result': self._get_match_result(fixture),
                
                # Prediction columns (‡πÄ‡∏ß‡πâ‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô)
                'prediction_home_away': '',
                'prediction_handicap': '',
                'prediction_over_under': '',
                'prediction_score': '',
                'prediction_corner_1st_half': '',
                'prediction_corner_full_match': '',
                
                # Additional info
                'referee': fixture['fixture']['referee'] if fixture['fixture']['referee'] else 'TBD'
            }
            
            return match_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error extracting match data: {e}")
            return None

    def _get_match_odds(self, fixture_id: int) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå"""
        try:
            url = f"{self.base_url}/odds"
            params = {
                'fixture': fixture_id,
                'bookmaker': 8  # Bet365
            }
            
            response = requests.get(url, headers=self.headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                if data['response']:
                    odds_data = data['response'][0]
                    bookmaker = odds_data['bookmakers'][0] if odds_data['bookmakers'] else None
                    
                    if bookmaker:
                        odds = {}
                        for bet in bookmaker['bets']:
                            if bet['name'] == 'Match Winner':
                                for value in bet['values']:
                                    if value['value'] == 'Home':
                                        odds['home'] = float(value['odd'])
                                    elif value['value'] == 'Draw':
                                        odds['draw'] = float(value['odd'])
                                    elif value['value'] == 'Away':
                                        odds['away'] = float(value['odd'])
                            
                            elif bet['name'] == 'Goals Over/Under':
                                for value in bet['values']:
                                    if '2.5' in value['value']:
                                        if 'Over' in value['value']:
                                            odds['over_25'] = float(value['odd'])
                                        elif 'Under' in value['value']:
                                            odds['under_25'] = float(value['odd'])
                        
                        return odds
            
            # Return default if no odds found
            return {}
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error getting odds for fixture {fixture_id}: {e}")
            return {}

    def _get_match_result(self, fixture: Dict) -> str:
        """‡πÑ‡∏î‡πâ‡∏ú‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå (‡∏ñ‡πâ‡∏≤‡πÅ‡∏Ç‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß)"""
        if fixture['fixture']['status']['short'] == 'FT':
            home_score = fixture['goals']['home']
            away_score = fixture['goals']['away']
            
            if home_score > away_score:
                return 'Home Win'
            elif home_score < away_score:
                return 'Away Win'
            else:
                return 'Draw'
        return ''

    def create_matches_dataframe(self, matches: List[Dict]) -> pd.DataFrame:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå"""
        if not matches:
            return pd.DataFrame()
        
        df = pd.DataFrame(matches)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏µ‡∏Å
        df = df.sort_values(['match_time_thai', 'league'])
        
        # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á columns ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        column_order = [
            'league', 'match_time_thai', 'home_team', 'odds_home', 'odds_draw', 'odds_away',
            'away_team', 'home_score', 'away_score', 'match_result',
            'prediction_home_away', 'prediction_handicap', 'prediction_over_under',
            'prediction_score', 'prediction_corner_1st_half', 'prediction_corner_full_match',
            'venue', 'referee', 'fixture_id'
        ]
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ
        available_columns = [col for col in column_order if col in df.columns]
        df = df[available_columns]
        
        return df

    def save_to_csv(self, df: pd.DataFrame, filename: str = "today_matches.csv"):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á CSV"""
        try:
            df.to_csv(filename, index=False, encoding='utf-8-sig')
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á {filename} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ({len(df)} ‡πÅ‡∏°‡∏ï‡∏ä‡πå)")
        except Exception as e:
            print(f"‚ùå Error saving CSV: {e}")

    def create_today_matches_website(self, df: pd.DataFrame):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
        
        html_content = f"""<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚öΩ Today Matches - {datetime.now().strftime('%d/%m/%Y')}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            min-height: 100vh;
            line-height: 1.6;
        }}

        .container {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }}

        .header {{
            text-align: center;
            margin-bottom: 30px;
            padding: 30px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }}

        .header h1 {{
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }}

        .header .subtitle {{
            font-size: 1.1rem;
            color: #666;
            margin-bottom: 15px;
        }}

        .stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }}

        .stat-item {{
            text-align: center;
            padding: 15px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
        }}

        .stat-number {{
            font-size: 1.8rem;
            font-weight: 700;
            color: #667eea;
        }}

        .stat-label {{
            font-size: 0.9rem;
            color: #666;
        }}

        .matches-table {{
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }}

        table {{
            width: 100%;
            border-collapse: collapse;
        }}

        th {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 10px;
            text-align: center;
            font-weight: 600;
            font-size: 0.9rem;
        }}

        td {{
            padding: 12px 10px;
            text-align: center;
            border-bottom: 1px solid #eee;
            font-size: 0.9rem;
        }}

        tr:hover {{
            background-color: rgba(102, 126, 234, 0.05);
        }}

        .league-name {{
            font-weight: 600;
            color: #667eea;
        }}

        .team-name {{
            font-weight: 500;
            color: #333;
        }}

        .odds {{
            font-weight: 600;
            color: #28a745;
        }}

        .time {{
            font-weight: 600;
            color: #dc3545;
        }}

        .score {{
            font-weight: 700;
            color: #fd7e14;
            font-size: 1.1rem;
        }}

        .prediction-placeholder {{
            color: #999;
            font-style: italic;
        }}

        .footer {{
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            color: #666;
        }}

        @media (max-width: 768px) {{
            .header h1 {{
                font-size: 2rem;
            }}
            
            table {{
                font-size: 0.8rem;
            }}
            
            th, td {{
                padding: 8px 5px;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚öΩ Today Matches</h1>
            <div class="subtitle">‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - {datetime.now().strftime('%d %B %Y')}</div>
            <div class="subtitle">üïê ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ | üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á | üîÆ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ)</div>
            
            <div class="stats">
                <div class="stat-item">
                    <div class="stat-number">{len(df)}</div>
                    <div class="stat-label">‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">{len(df['league'].unique())}</div>
                    <div class="stat-label">‡∏•‡∏µ‡∏Å</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">{len(df[df['match_result'] == ''])}</div>
                    <div class="stat-label">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏Ç‡πà‡∏á</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">{len(df[df['match_result'] != ''])}</div>
                    <div class="stat-label">‡πÅ‡∏Ç‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</div>
                </div>
            </div>
        </div>

        <div class="matches-table">
            <table>
                <thead>
                    <tr>
                        <th>‡∏•‡∏µ‡∏Å</th>
                        <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
                        <th>‡πÄ‡∏à‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô</th>
                        <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á</th>
                        <th>‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô</th>
                        <th>‡∏ú‡∏•‡∏ö‡∏≠‡∏•</th>
                        <th>Prediction<br>Home/Away</th>
                        <th>Prediction<br>Handicap</th>
                        <th>Over/Under</th>
                        <th>Score</th>
                        <th>Corner<br>1st Half</th>
                        <th>Corner<br>Full Match</th>
                    </tr>
                </thead>
                <tbody>"""
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå
        for _, match in df.iterrows():
            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
            odds_display = f"{match.get('odds_home', 'N/A')} | {match.get('odds_draw', 'N/A')} | {match.get('odds_away', 'N/A')}"
            
            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏ö‡∏≠‡∏•
            if match.get('home_score') != '' and match.get('away_score') != '':
                score_display = f"{match['home_score']}-{match['away_score']}"
            else:
                score_display = "vs"
            
            html_content += f"""
                    <tr>
                        <td class="league-name">{match['league']}</td>
                        <td class="time">{match['match_time_thai']}</td>
                        <td class="team-name">{match['home_team']}</td>
                        <td class="odds">{odds_display}</td>
                        <td class="team-name">{match['away_team']}</td>
                        <td class="score">{score_display}</td>
                        <td class="prediction-placeholder">‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ</td>
                        <td class="prediction-placeholder">‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ</td>
                        <td class="prediction-placeholder">‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ</td>
                        <td class="prediction-placeholder">‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ</td>
                        <td class="prediction-placeholder">‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ</td>
                        <td class="prediction-placeholder">‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ</td>
                    </tr>"""
        
        html_content += """
                </tbody>
            </table>
        </div>

        <div class="footer">
            <p>ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Advanced ML ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì...</p>
            <p>üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API-Football | ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: """ + datetime.now().strftime('%H:%M:%S') + """</p>
        </div>
    </div>
</body>
</html>"""
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå HTML
        with open('today_matches.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö today_matches.html ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
    # ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    API_KEY = "your_api_key_here"
    
    if API_KEY == "your_api_key_here":
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡πÉ‡∏ô API_KEY variable")
        return
    
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ...")
    print("=" * 50)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á fetcher
    fetcher = TodayMatchesFetcher(API_KEY)
    
    # ‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    matches = fetcher.get_today_matches()
    
    if matches:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
        df = fetcher.create_matches_dataframe(matches)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        print(f"   ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df)}")
        print(f"   ‡∏•‡∏µ‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö: {', '.join(df['league'].unique())}")
        print(f"   ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {df['match_time_thai'].min()} - {df['match_time_thai'].max()}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å CSV
        fetcher.save_to_csv(df)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        fetcher.create_today_matches_website(df)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        print(f"\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÅ‡∏£‡∏Å:")
        print(df[['league', 'match_time_thai', 'home_team', 'away_team', 'odds_home', 'odds_away']].head())
        
        print(f"\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:")
        print(f"   üìÑ today_matches.csv - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV")
        print(f"   üåê today_matches.html - ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö")
        
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")

if __name__ == "__main__":
    main()
