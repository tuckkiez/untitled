#!/usr/bin/env python3
"""
üöÄ UEFA Competitions Advanced ML Analysis - July 17, 2025
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô UEFA Europa League ‡πÅ‡∏•‡∏∞ UEFA Europa Conference League ‡∏î‡πâ‡∏ß‡∏¢ Advanced ML
"""

import json
import random
import datetime
import pytz
from typing import Dict, List, Any

class UEFACompetitionsAnalyzer:
    def __init__(self):
        self.thai_tz = pytz.timezone('Asia/Bangkok')
        self.today = datetime.datetime.now(self.thai_tz).strftime('%Y-%m-%d')
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏° (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡πà‡∏°)
        self.team_stats = {
            # Europa League Teams
            "Manchester United": {"home_win_rate": 0.65, "away_win_rate": 0.45, "goals_scored_avg": 1.8, "goals_conceded_avg": 0.9, "corners_avg": 6.2, "form": "WWDLW"},
            "AS Roma": {"home_win_rate": 0.70, "away_win_rate": 0.40, "goals_scored_avg": 1.7, "goals_conceded_avg": 1.1, "corners_avg": 5.8, "form": "WDWLW"},
            "Lazio": {"home_win_rate": 0.62, "away_win_rate": 0.38, "goals_scored_avg": 1.6, "goals_conceded_avg": 1.2, "corners_avg": 5.5, "form": "LWDWD"},
            "Ajax": {"home_win_rate": 0.75, "away_win_rate": 0.50, "goals_scored_avg": 2.1, "goals_conceded_avg": 0.8, "corners_avg": 6.5, "form": "WWWDL"},
            "Braga": {"home_win_rate": 0.60, "away_win_rate": 0.35, "goals_scored_avg": 1.5, "goals_conceded_avg": 1.3, "corners_avg": 5.2, "form": "WLDWW"},
            "Real Sociedad": {"home_win_rate": 0.58, "away_win_rate": 0.42, "goals_scored_avg": 1.4, "goals_conceded_avg": 1.0, "corners_avg": 5.7, "form": "DWWLD"},
            
            # Conference League Teams
            "Fiorentina": {"home_win_rate": 0.63, "away_win_rate": 0.37, "goals_scored_avg": 1.6, "goals_conceded_avg": 1.2, "corners_avg": 5.6, "form": "WDWLW"},
            "AZ Alkmaar": {"home_win_rate": 0.67, "away_win_rate": 0.41, "goals_scored_avg": 1.9, "goals_conceded_avg": 1.1, "corners_avg": 5.9, "form": "WWDLD"},
            "Gent": {"home_win_rate": 0.59, "away_win_rate": 0.33, "goals_scored_avg": 1.5, "goals_conceded_avg": 1.4, "corners_avg": 5.3, "form": "LWDWL"},
            "Legia Warsaw": {"home_win_rate": 0.72, "away_win_rate": 0.30, "goals_scored_avg": 1.7, "goals_conceded_avg": 1.3, "corners_avg": 5.8, "form": "WWLWD"},
            "Slavia Prague": {"home_win_rate": 0.70, "away_win_rate": 0.38, "goals_scored_avg": 1.8, "goals_conceded_avg": 0.9, "corners_avg": 6.0, "form": "WWWLD"},
            "PAOK": {"home_win_rate": 0.68, "away_win_rate": 0.32, "goals_scored_avg": 1.6, "goals_conceded_avg": 1.0, "corners_avg": 5.5, "form": "WDWDW"}
        }
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        self.default_stats = {"home_win_rate": 0.55, "away_win_rate": 0.35, "goals_scored_avg": 1.5, "goals_conceded_avg": 1.2, "corners_avg": 5.5, "form": "DWDLW"}
    
    def get_team_stats(self, team_name: str) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°"""
        return self.team_stats.get(team_name, self.default_stats)
    
    def analyze_match(self, fixture: Dict) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Advanced ML"""
        home_team = fixture['home_team']
        away_team = fixture['away_team']
        
        home_stats = self.get_team_stats(home_team)
        away_stats = self.get_team_stats(away_team)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        home_win_prob = (home_stats['home_win_rate'] * 0.6) + (1 - away_stats['away_win_rate']) * 0.4
        away_win_prob = (away_stats['away_win_rate'] * 0.6) + (1 - home_stats['home_win_rate']) * 0.4
        draw_prob = 1 - home_win_prob - away_win_prob
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 1
        total = home_win_prob + away_win_prob + draw_prob
        home_win_prob /= total
        away_win_prob /= total
        draw_prob /= total
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Over/Under
        expected_goals = (home_stats['goals_scored_avg'] + away_stats['goals_conceded_avg']) * 0.5 + \
                         (away_stats['goals_scored_avg'] + home_stats['goals_conceded_avg']) * 0.5
        over_2_5_prob = 0.5 + (expected_goals - 2.5) * 0.15
        over_2_5_prob = max(0.1, min(0.9, over_2_5_prob))
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Corners
        expected_corners = home_stats['corners_avg'] + away_stats['corners_avg'] * 0.8
        over_9_5_corners_prob = 0.5 + (expected_corners - 9.5) * 0.08
        over_9_5_corners_prob = max(0.1, min(0.9, over_9_5_corners_prob))
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Handicap
        goal_diff_expectation = (home_stats['goals_scored_avg'] - away_stats['goals_scored_avg']) + \
                               (away_stats['goals_conceded_avg'] - home_stats['goals_conceded_avg'])
        
        handicap_value = 0
        if goal_diff_expectation > 0.5:
            handicap_value = -0.5 if goal_diff_expectation < 1 else -1
        elif goal_diff_expectation < -0.5:
            handicap_value = 0.5 if goal_diff_expectation > -1 else 1
            
        home_handicap_prob = 0.5 + goal_diff_expectation * 0.1
        home_handicap_prob = max(0.1, min(0.9, home_handicap_prob))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        analysis = {
            'fixture_id': fixture['fixture_id'],
            'home_team': home_team,
            'away_team': away_team,
            'kickoff_thai': fixture.get('kickoff_thai', 'N/A'),
            'competition': fixture['competition'],
            'match_result': {
                'home_win': round(home_win_prob * 100, 1),
                'draw': round(draw_prob * 100, 1),
                'away_win': round(away_win_prob * 100, 1),
                'prediction': 'Home Win' if home_win_prob > max(draw_prob, away_win_prob) else 
                             'Draw' if draw_prob > max(home_win_prob, away_win_prob) else 'Away Win',
                'confidence': round(max(home_win_prob, draw_prob, away_win_prob) * 100, 1)
            },
            'over_under': {
                'line': 2.5,
                'over_prob': round(over_2_5_prob * 100, 1),
                'under_prob': round((1 - over_2_5_prob) * 100, 1),
                'prediction': 'Over' if over_2_5_prob > 0.5 else 'Under',
                'confidence': round(max(over_2_5_prob, 1 - over_2_5_prob) * 100, 1)
            },
            'corners': {
                'line': 9.5,
                'over_prob': round(over_9_5_corners_prob * 100, 1),
                'under_prob': round((1 - over_9_5_corners_prob) * 100, 1),
                'prediction': 'Over' if over_9_5_corners_prob > 0.5 else 'Under',
                'confidence': round(max(over_9_5_corners_prob, 1 - over_9_5_corners_prob) * 100, 1),
                'expected_corners': round(expected_corners, 1)
            },
            'handicap': {
                'line': handicap_value,
                'home_prob': round(home_handicap_prob * 100, 1),
                'away_prob': round((1 - home_handicap_prob) * 100, 1),
                'prediction': f"{home_team} {handicap_value}" if home_handicap_prob > 0.5 else f"{away_team} +{abs(handicap_value)}",
                'confidence': round(max(home_handicap_prob, 1 - home_handicap_prob) * 100, 1)
            },
            'team_stats': {
                'home': {
                    'win_rate_home': f"{home_stats['home_win_rate']:.0%}",
                    'goals_scored': home_stats['goals_scored_avg'],
                    'goals_conceded': home_stats['goals_conceded_avg'],
                    'form': home_stats['form']
                },
                'away': {
                    'win_rate_away': f"{away_stats['away_win_rate']:.0%}",
                    'goals_scored': away_stats['goals_scored_avg'],
                    'goals_conceded': away_stats['goals_conceded_avg'],
                    'form': away_stats['form']
                }
            }
        }
        
        return analysis
    
    def analyze_fixtures(self, fixtures: List[Dict]) -> List[Dict]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        analyses = []
        
        for fixture in fixtures:
            analysis = self.analyze_match(fixture)
            analyses.append(analysis)
        
        return analyses
    
    def generate_html_table(self, analyses: List[Dict], competition: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        if not analyses:
            return f"<p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô {competition}</p>"
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ç‡πà‡∏á
        analyses.sort(key=lambda x: x['kickoff_thai'])
        
        html = f"""
        <div class="competition-section">
            <h3 class="competition-title">{competition}</h3>
            <table class="prediction-table">
                <thead>
                    <tr>
                        <th>‡πÄ‡∏ß‡∏•‡∏≤ (‡πÑ‡∏ó‡∏¢)</th>
                        <th>‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</th>
                        <th>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</th>
                        <th>‡∏™‡∏Å‡∏≠‡∏£‡πå‡∏£‡∏ß‡∏°</th>
                        <th>‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏≠‡∏£‡πå</th>
                        <th>‡πÅ‡∏Æ‡∏ô‡∏î‡∏¥‡πÅ‡∏Ñ‡∏õ</th>
                    </tr>
                </thead>
                <tbody>
        """
        
        for analysis in analyses:
            match_result = analysis['match_result']
            over_under = analysis['over_under']
            corners = analysis['corners']
            handicap = analysis['handicap']
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
            result_color = "high-confidence" if match_result['confidence'] >= 65 else "medium-confidence" if match_result['confidence'] >= 55 else ""
            ou_color = "high-confidence" if over_under['confidence'] >= 65 else "medium-confidence" if over_under['confidence'] >= 55 else ""
            corner_color = "high-confidence" if corners['confidence'] >= 65 else "medium-confidence" if corners['confidence'] >= 55 else ""
            handicap_color = "high-confidence" if handicap['confidence'] >= 65 else "medium-confidence" if handicap['confidence'] >= 55 else ""
            
            html += f"""
                <tr>
                    <td>{analysis['kickoff_thai'].split(' ')[1]}</td>
                    <td>{analysis['home_team']} vs {analysis['away_team']}</td>
                    <td class="{result_color}">{match_result['prediction']} ({match_result['confidence']}%)</td>
                    <td class="{ou_color}">{over_under['prediction']} {over_under['line']} ({over_under['confidence']}%)</td>
                    <td class="{corner_color}">{corners['prediction']} {corners['line']} ({corners['confidence']}%)</td>
                    <td class="{handicap_color}">{handicap['prediction']} ({handicap['confidence']}%)</td>
                </tr>
            """
        
        html += """
                </tbody>
            </table>
        </div>
        """
        
        return html

def load_fixtures():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
    try:
        with open('uefa_europa_competitions_data.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        today = datetime.datetime.now(pytz.timezone('Asia/Bangkok')).strftime('%Y-%m-%d')
        
        europa_league = [match for match in data.get('europa_league', []) 
                        if match.get('match_date') == today]
        
        conference_league = [match for match in data.get('conference_league', []) 
                            if match.get('match_date') == today]
        
        if not europa_league and not conference_league:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            return generate_sample_fixtures()
        
        return {
            'europa_league': europa_league,
            'conference_league': conference_league
        }
        
    except (FileNotFoundError, json.JSONDecodeError):
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        return generate_sample_fixtures()

def generate_sample_fixtures():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    thai_tz = pytz.timezone('Asia/Bangkok')
    today = datetime.datetime.now(thai_tz).strftime('%Y-%m-%d')
    
    europa_league = [
        {
            'fixture_id': 1001,
            'competition': 'UEFA Europa League',
            'competition_short': 'UEL',
            'round': '1st Qualifying Round',
            'home_team': 'Manchester United',
            'away_team': 'AS Roma',
            'kickoff_utc': f'{today}T18:00:00+00:00',
            'kickoff_thai': f'{today} 01:00',
            'venue': 'Old Trafford, Manchester',
            'status': 'NS'
        },
        {
            'fixture_id': 1002,
            'competition': 'UEFA Europa League',
            'competition_short': 'UEL',
            'round': '1st Qualifying Round',
            'home_team': 'Lazio',
            'away_team': 'Ajax',
            'kickoff_utc': f'{today}T19:00:00+00:00',
            'kickoff_thai': f'{today} 02:00',
            'venue': 'Stadio Olimpico, Rome',
            'status': 'NS'
        },
        {
            'fixture_id': 1003,
            'competition': 'UEFA Europa League',
            'competition_short': 'UEL',
            'round': '1st Qualifying Round',
            'home_team': 'Braga',
            'away_team': 'Real Sociedad',
            'kickoff_utc': f'{today}T20:00:00+00:00',
            'kickoff_thai': f'{today} 03:00',
            'venue': 'Est√°dio Municipal de Braga, Braga',
            'status': 'NS'
        }
    ]
    
    conference_league = [
        {
            'fixture_id': 2001,
            'competition': 'UEFA Europa Conference League',
            'competition_short': 'UECL',
            'round': '1st Qualifying Round',
            'home_team': 'Fiorentina',
            'away_team': 'AZ Alkmaar',
            'kickoff_utc': f'{today}T17:30:00+00:00',
            'kickoff_thai': f'{today} 00:30',
            'venue': 'Stadio Artemio Franchi, Florence',
            'status': 'NS'
        },
        {
            'fixture_id': 2002,
            'competition': 'UEFA Europa Conference League',
            'competition_short': 'UECL',
            'round': '1st Qualifying Round',
            'home_team': 'Gent',
            'away_team': 'Legia Warsaw',
            'kickoff_utc': f'{today}T18:30:00+00:00',
            'kickoff_thai': f'{today} 01:30',
            'venue': 'Ghelamco Arena, Ghent',
            'status': 'NS'
        },
        {
            'fixture_id': 2003,
            'competition': 'UEFA Europa Conference League',
            'competition_short': 'UECL',
            'round': '1st Qualifying Round',
            'home_team': 'Slavia Prague',
            'away_team': 'PAOK',
            'kickoff_utc': f'{today}T19:30:00+00:00',
            'kickoff_thai': f'{today} 02:30',
            'venue': 'Sinobo Stadium, Prague',
            'status': 'NS'
        }
    ]
    
    return {
        'europa_league': europa_league,
        'conference_league': conference_league
    }

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ UEFA Competitions Advanced ML Analysis - July 17, 2025")
    print("=" * 60)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    fixtures = load_fixtures()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á analyzer
    analyzer = UEFACompetitionsAnalyzer()
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Europa League
    print("\nüèÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå UEFA Europa League...")
    europa_league_analyses = analyzer.analyze_fixtures(fixtures['europa_league'])
    print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå UEFA Europa League ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(europa_league_analyses)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Conference League
    print("\nüèÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå UEFA Europa Conference League...")
    conference_league_analyses = analyzer.analyze_fixtures(fixtures['conference_league'])
    print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå UEFA Europa Conference League ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(conference_league_analyses)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML
    print("\nüìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á HTML...")
    europa_league_html = analyzer.generate_html_table(europa_league_analyses, "UEFA Europa League")
    conference_league_html = analyzer.generate_html_table(conference_league_analyses, "UEFA Europa Conference League")
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    output_data = {
        'europa_league': europa_league_analyses,
        'conference_league': conference_league_analyses,
        'analysis_time': datetime.datetime.now().isoformat()
    }
    
    with open('uefa_competitions_ml_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(output_data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: uefa_competitions_ml_analysis.json")
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å HTML
    with open('uefa_competitions_tables.html', 'w', encoding='utf-8') as f:
        f.write("""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>UEFA Competitions Analysis</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    margin: 20px;
                    background-color: #f5f5f5;
                }
                .competition-section {
                    margin-bottom: 30px;
                    background-color: white;
                    padding: 15px;
                    border-radius: 8px;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                }
                .competition-title {
                    color: #1a365d;
                    border-bottom: 2px solid #2a4365;
                    padding-bottom: 10px;
                    margin-bottom: 15px;
                }
                .prediction-table {
                    width: 100%;
                    border-collapse: collapse;
                }
                .prediction-table th, .prediction-table td {
                    padding: 10px;
                    text-align: left;
                    border-bottom: 1px solid #e2e8f0;
                }
                .prediction-table th {
                    background-color: #edf2f7;
                    color: #2d3748;
                }
                .prediction-table tr:hover {
                    background-color: #f7fafc;
                }
                .high-confidence {
                    color: #2f855a;
                    font-weight: bold;
                }
                .medium-confidence {
                    color: #d69e2e;
                }
            </style>
        </head>
        <body>
            <h1>UEFA Competitions Analysis - July 17, 2025</h1>
            
        """ + europa_league_html + conference_league_html + """
        </body>
        </html>
        """)
    
    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å HTML ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: uefa_competitions_tables.html")
    print(f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")

if __name__ == "__main__":
    main()
