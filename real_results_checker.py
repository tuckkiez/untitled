#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å 20 ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
"""

from final_enhanced_predictor import FinalEnhancedPredictor
from real_data_example import RealDataPredictor
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

class RealResultsChecker:
    def __init__(self):
        self.api_token = "052fd4885cf943ad859c89cef542e2e5"
        self.predictor = None
        self.historical_data = None
        
    def load_latest_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏à‡∏ö"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")
        
        real_predictor = RealDataPredictor(api_key=self.api_token)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        data_2024 = real_predictor.get_premier_league_data(season=2024)
        data_2023 = real_predictor.get_premier_league_data(season=2023)
        
        if data_2024 is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return False
        
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if data_2023 is not None:
            self.historical_data = pd.concat([data_2023, data_2024], ignore_index=True)
        else:
            self.historical_data = data_2024
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        self.historical_data = self.historical_data.sort_values('date').reset_index(drop=True)
        self.historical_data = self.historical_data.dropna(subset=['home_goals', 'away_goals'])
        
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        print(f"üìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {self.historical_data['date'].max()}")
        
        return True
    
    def setup_predictor(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ predictor"""
        print("\nü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Enhanced Predictor...")
        
        self.predictor = FinalEnhancedPredictor()
        self.predictor.api_token = self.api_token
        self.predictor.historical_data = self.historical_data
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô 20 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        train_data = self.historical_data.iloc[:-20]
        
        if not self.predictor.train_both_models():
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
            from enhanced_predictor_fixed import EnhancedFootballPredictorFixed
            self.predictor.enhanced_predictor = EnhancedFootballPredictorFixed()
            self.predictor.enhanced_predictor.train(train_data)
            
        print("‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Predictor ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    
    def check_last_20_matches(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 20 ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 20 ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")
        print("="*80)
        
        # ‡πÄ‡∏≠‡∏≤ 20 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        last_20_matches = self.historical_data.tail(20)
        train_data = self.historical_data.iloc[:-20]
        
        results = []
        correct_predictions = 0
        high_confidence_correct = 0
        high_confidence_total = 0
        
        print(f"{'No.':<3} {'Date':<12} {'Match':<35} {'Result':<8} {'Predicted':<10} {'Confidence':<10} {'Status':<8}")
        print("-" * 80)
        
        for idx, (_, match) in enumerate(last_20_matches.iterrows(), 1):
            # ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
            home_goals = int(match['home_goals'])
            away_goals = int(match['away_goals'])
            
            if home_goals > away_goals:
                actual_result = 'Home Win'
                actual_short = 'H'
            elif home_goals < away_goals:
                actual_result = 'Away Win'
                actual_short = 'A'
            else:
                actual_result = 'Draw'
                actual_short = 'D'
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            try:
                if hasattr(self.predictor, 'enhanced_predictor') and self.predictor.enhanced_predictor:
                    prediction = self.predictor.enhanced_predictor.predict_match(
                        match['home_team'], match['away_team'], train_data
                    )
                else:
                    # ‡πÉ‡∏ä‡πâ basic predictor
                    from football_predictor import FootballPredictor
                    basic_predictor = FootballPredictor()
                    basic_predictor.train(train_data)
                    prediction = basic_predictor.predict_match(
                        match['home_team'], match['away_team'], train_data
                    )
            except:
                prediction = None
            
            if prediction:
                predicted_result = prediction['prediction']
                confidence = prediction['confidence']
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                is_correct = (predicted_result == actual_result)
                if is_correct:
                    correct_predictions += 1
                    status = "‚úÖ"
                else:
                    status = "‚ùå"
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö high confidence
                if confidence > 0.6:
                    high_confidence_total += 1
                    if is_correct:
                        high_confidence_correct += 1
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                home_team_short = match['home_team'].replace(' FC', '').replace(' United', ' Utd')[:15]
                away_team_short = match['away_team'].replace(' FC', '').replace(' United', ' Utd')[:15]
                match_str = f"{home_team_short} vs {away_team_short}"
                
                predicted_short = predicted_result[0] if predicted_result != 'Draw' else 'D'
                result_str = f"{home_goals}-{away_goals} ({actual_short})"
                
                print(f"{idx:<3} {match['date'].strftime('%Y-%m-%d'):<12} {match_str:<35} {result_str:<8} "
                      f"{predicted_short:<10} {confidence:.3f}     {status:<8}")
                
                results.append({
                    'match': f"{match['home_team']} vs {match['away_team']}",
                    'date': match['date'],
                    'actual': actual_result,
                    'predicted': predicted_result,
                    'confidence': confidence,
                    'correct': is_correct,
                    'home_goals': home_goals,
                    'away_goals': away_goals
                })
            else:
                print(f"{idx:<3} {match['date'].strftime('%Y-%m-%d'):<12} {match_str:<35} {result_str:<8} "
                      f"{'N/A':<10} {'N/A':<10} {'‚ö†Ô∏è':<8}")
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        total_predictions = len([r for r in results if r is not None])
        overall_accuracy = correct_predictions / total_predictions if total_predictions > 0 else 0
        high_conf_accuracy = high_confidence_correct / high_confidence_total if high_confidence_total > 0 else 0
        
        print("\n" + "="*80)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 20 ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        print(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {correct_predictions}/{total_predictions} = {overall_accuracy:.3f} ({overall_accuracy*100:.1f}%)")
        print(f"üî• ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à > 60%: {high_confidence_correct}/{high_confidence_total} = {high_conf_accuracy:.3f} ({high_conf_accuracy*100:.1f}%)")
        print(f"üìà ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á: {high_confidence_total}/20 ({high_confidence_total/20*100:.1f}%)")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        home_wins_actual = len([r for r in results if r['actual'] == 'Home Win'])
        away_wins_actual = len([r for r in results if r['actual'] == 'Away Win'])
        draws_actual = len([r for r in results if r['actual'] == 'Draw'])
        
        home_wins_predicted = len([r for r in results if r['predicted'] == 'Home Win'])
        away_wins_predicted = len([r for r in results if r['predicted'] == 'Away Win'])
        draws_predicted = len([r for r in results if r['predicted'] == 'Draw'])
        
        print(f"\nüìã ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
        print(f"   Home Win: ‡∏à‡∏£‡∏¥‡∏á {home_wins_actual}, ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ {home_wins_predicted}")
        print(f"   Away Win: ‡∏à‡∏£‡∏¥‡∏á {away_wins_actual}, ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ {away_wins_predicted}")
        print(f"   Draw: ‡∏à‡∏£‡∏¥‡∏á {draws_actual}, ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ {draws_predicted}")
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        home_win_correct = len([r for r in results if r['actual'] == 'Home Win' and r['predicted'] == 'Home Win'])
        away_win_correct = len([r for r in results if r['actual'] == 'Away Win' and r['predicted'] == 'Away Win'])
        draw_correct = len([r for r in results if r['actual'] == 'Draw' and r['predicted'] == 'Draw'])
        
        print(f"\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
        if home_wins_actual > 0:
            print(f"   Home Win: {home_win_correct}/{home_wins_actual} = {home_win_correct/home_wins_actual:.3f}")
        if away_wins_actual > 0:
            print(f"   Away Win: {away_win_correct}/{away_wins_actual} = {away_win_correct/away_wins_actual:.3f}")
        if draws_actual > 0:
            print(f"   Draw: {draw_correct}/{draws_actual} = {draw_correct/draws_actual:.3f}")
        
        return {
            'results': results,
            'overall_accuracy': overall_accuracy,
            'high_confidence_accuracy': high_conf_accuracy,
            'high_confidence_count': high_confidence_total,
            'total_predictions': total_predictions,
            'correct_predictions': correct_predictions
        }
    
    def show_detailed_analysis(self, results_data):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"""
        results = results_data['results']
        
        print(f"\nüî¨ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å:")
        print("="*60)
        
        # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á
        high_conf_correct = [r for r in results if r['confidence'] > 0.6 and r['correct']]
        if high_conf_correct:
            print(f"üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á ({len(high_conf_correct)} ‡πÄ‡∏Å‡∏°):")
            for r in high_conf_correct:
                print(f"   ‚úÖ {r['match']}: {r['predicted']} (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {r['confidence']:.3f})")
        
        # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á
        high_conf_wrong = [r for r in results if r['confidence'] > 0.6 and not r['correct']]
        if high_conf_wrong:
            print(f"\n‚ö†Ô∏è  ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡πÅ‡∏ï‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á ({len(high_conf_wrong)} ‡πÄ‡∏Å‡∏°):")
            for r in high_conf_wrong:
                print(f"   ‚ùå {r['match']}: ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ {r['predicted']}, ‡∏à‡∏£‡∏¥‡∏á {r['actual']} (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {r['confidence']:.3f})")
        
        # ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏Å‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥)
        low_conf = [r for r in results if r['confidence'] < 0.5]
        if low_conf:
            print(f"\nü§î ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏Å‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ({len(low_conf)} ‡πÄ‡∏Å‡∏°):")
            for r in low_conf:
                status = "‚úÖ" if r['correct'] else "‚ùå"
                print(f"   {status} {r['match']}: ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {r['confidence']:.3f}")
        
        # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        avg_confidence = np.mean([r['confidence'] for r in results])
        print(f"\nüìä ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {avg_confidence:.3f}")
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö backtest
        print(f"\nüìà ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Backtest:")
        print(f"   Backtest (100 ‡πÄ‡∏Å‡∏°): 51.0% accuracy")
        print(f"   Real Check (20 ‡πÄ‡∏Å‡∏°): {results_data['overall_accuracy']*100:.1f}% accuracy")
        
        if results_data['overall_accuracy'] > 0.51:
            print(f"   üéâ ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ Backtest!")
        elif results_data['overall_accuracy'] > 0.45:
            print(f"   ‚úÖ ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á Backtest")
        else:
            print(f"   ‚ö†Ô∏è  ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ Backtest (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢)")
    
    def run_real_check(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        print("üèÜ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á - 20 ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        print("üîç ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á")
        print("="*80)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if not self.load_latest_data():
            return
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ predictor
        if not self.setup_predictor():
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 20 ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        results_data = self.check_last_20_matches()
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å
        self.show_detailed_analysis(results_data)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        print(f"\nüèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print(f"‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏à‡∏£‡∏¥‡∏á: {results_data['overall_accuracy']*100:.1f}%")
        print(f"üî• ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á: {results_data['high_confidence_accuracy']*100:.1f}%")
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á: {results_data['high_confidence_count']}/20")
        
        if results_data['overall_accuracy'] >= 0.5:
            print(f"\nüéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‚â• 50% ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á")
        elif results_data['overall_accuracy'] >= 0.45:
            print(f"\n‚úÖ ‡∏î‡∏µ! ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö backtest")
        else:
            print(f"\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 20 ‡πÄ‡∏Å‡∏°‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
        
        return results_data

def main():
    checker = RealResultsChecker()
    checker.run_real_check()

if __name__ == "__main__":
    main()
