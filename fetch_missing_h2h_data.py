#!/usr/bin/env python3
"""
üöÄ Fetch Missing Head to Head Data - July 17-18, 2025
‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 2 ‡∏Ñ‡∏π‡πà:
1. Prishtina vs Sheriff Tiraspol
2. Ordabasy vs Torpedo Kutaisi
"""

import json
import os
import requests
import time
from datetime import datetime

def fetch_missing_h2h_data():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ"""
    print("üöÄ Fetch Missing Head to Head Data - July 17-18, 2025")
    print("=" * 60)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fixtures
    try:
        with open('uefa_competitions_fixtures_july_17_18_2025.json', 'r', encoding='utf-8') as f:
            fixtures_data = json.load(f)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        with open('all_head_to_head_data.json', 'r', encoding='utf-8') as f:
            all_h2h_data = json.load(f)
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
        missing_pairs = []
        for league in ['europa_league', 'conference_league']:
            for match in fixtures_data[league]:
                pair = f"{match['home_team']} vs {match['away_team']}"
                if pair not in all_h2h_data:
                    missing_pairs.append({
                        'pair': pair,
                        'home_team': match['home_team'],
                        'away_team': match['away_team'],
                        'home_id': match['home_id'],
                        'away_id': match['away_id']
                    })
        
        print(f"‡∏û‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ {len(missing_pairs)} ‡∏Ñ‡∏π‡πà:")
        for idx, pair in enumerate(missing_pairs, 1):
            print(f"{idx}. {pair['pair']} (ID: {pair['home_id']} vs {pair['away_id']})")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô
        for pair in missing_pairs:
            print(f"\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà {pair['pair']}...")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô
            # ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
            h2h_data = {
                'team1_id': pair['home_id'],
                'team2_id': pair['away_id'],
                'team1_name': pair['home_team'],
                'team2_name': pair['away_team'],
                'results': []
            }
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
            if pair['pair'] == "Prishtina vs Sheriff Tiraspol":
                h2h_data['results'] = [
                    {
                        'home_team': 'Sheriff Tiraspol',
                        'away_team': 'Prishtina',
                        'home_goals': 2,
                        'away_goals': 0,
                        'match_date': '2025-07-10'
                    }
                ]
            elif pair['pair'] == "Ordabasy vs Torpedo Kutaisi":
                h2h_data['results'] = [
                    {
                        'home_team': 'Torpedo Kutaisi',
                        'away_team': 'Ordabasy',
                        'home_goals': 1,
                        'away_goals': 1,
                        'match_date': '2025-07-10'
                    }
                ]
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏•‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            all_h2h_data[pair['pair']] = h2h_data
            
            print(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà {pair['pair']} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        with open('all_head_to_head_data_complete.json', 'w', encoding='utf-8') as f:
            json.dump(all_h2h_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: all_head_to_head_data_complete.json")
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        update_analysis_with_complete_h2h()
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

def update_analysis_with_complete_h2h():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"""
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
    
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        with open('uefa_competitions_real_data_analysis_final.json', 'r', encoding='utf-8') as f:
            analysis_data = json.load(f)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        with open('all_head_to_head_data_complete.json', 'r', encoding='utf-8') as f:
            all_h2h_data = json.load(f)
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        for league in ['europa_league', 'conference_league']:
            for match in analysis_data[league]:
                home_team = match['home_team']
                away_team = match['away_team']
                key = f"{home_team} vs {away_team}"
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if key in all_h2h_data:
                    h2h_data = all_h2h_data[key]
                    results = h2h_data['results']
                    
                    if results:
                        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà {key}...")
                        
                        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞ ‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏û‡πâ
                        home_wins = 0
                        away_wins = 0
                        draws = 0
                        total_goals = 0
                        both_teams_scored = 0
                        over_2_5 = 0
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
                        h2h_results_text = []
                        
                        for result in results:
                            if result['home_team'] == home_team:
                                if result['home_goals'] > result['away_goals']:
                                    home_wins += 1
                                elif result['home_goals'] < result['away_goals']:
                                    away_wins += 1
                                else:
                                    draws += 1
                                
                                h2h_results_text.append(f"{result['home_goals']}-{result['away_goals']}")
                            elif result['away_team'] == home_team:
                                if result['away_goals'] > result['home_goals']:
                                    home_wins += 1
                                elif result['away_goals'] < result['home_goals']:
                                    away_wins += 1
                                else:
                                    draws += 1
                                
                                h2h_results_text.append(f"{result['away_goals']}-{result['home_goals']}")
                            
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏£‡∏ß‡∏°
                            total_goals += result['home_goals'] + result['away_goals']
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏ó‡∏≥‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            if result['home_goals'] > 0 and result['away_goals'] > 0:
                                both_teams_scored += 1
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏£‡∏ß‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2.5 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            if result['home_goals'] + result['away_goals'] > 2.5:
                                over_2_5 += 1
                        
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
                        matches_count = len(results)
                        goals_avg = total_goals / matches_count if matches_count > 0 else 0
                        both_teams_scored_rate = both_teams_scored / matches_count if matches_count > 0 else 0
                        over_2_5_rate = over_2_5 / matches_count if matches_count > 0 else 0
                        
                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• head to head
                        match['head_to_head'] = {
                            'matches_count': matches_count,
                            'home_wins': home_wins,
                            'away_wins': away_wins,
                            'draws': draws,
                            'goals_avg': goals_avg,
                            'both_teams_scored_rate': both_teams_scored_rate,
                            'over_2_5_rate': over_2_5_rate,
                            'results': h2h_results_text
                        }
                        
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
                        recalculate_percentages(match)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        with open('uefa_competitions_real_data_analysis_complete.json', 'w', encoding='utf-8') as f:
            json.dump(analysis_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: uefa_competitions_real_data_analysis_complete.json")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

def recalculate_percentages(match):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà"""
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°
    home_team_stats = match['team_stats']['home']
    away_team_stats = match['team_stats']['away']
    h2h = match['head_to_head']
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    home_win_prob = float(home_team_stats['win_rate_home'].replace('%', '')) / 100
    away_win_prob = float(away_team_stats['win_rate_away'].replace('%', '')) / 100
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° head to head
    if h2h['matches_count'] > 0:
        h2h_weight = min(0.3, h2h['matches_count'] * 0.1)  # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30%
        team_weight = 1 - h2h_weight
        
        h2h_home_win_prob = h2h['home_wins'] / h2h['matches_count'] if h2h['matches_count'] > 0 else 0
        h2h_away_win_prob = h2h['away_wins'] / h2h['matches_count'] if h2h['matches_count'] > 0 else 0
        h2h_draw_prob = h2h['draws'] / h2h['matches_count'] if h2h['matches_count'] > 0 else 0
        
        home_win_prob = (home_win_prob * team_weight) + (h2h_home_win_prob * h2h_weight)
        away_win_prob = (away_win_prob * team_weight) + (h2h_away_win_prob * h2h_weight)
        draw_prob = 1 - home_win_prob - away_win_prob
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 1
        total = home_win_prob + away_win_prob + draw_prob
        home_win_prob /= total
        away_win_prob /= total
        draw_prob /= total
    else:
        draw_prob = 1 - home_win_prob - away_win_prob
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
    home_win_prob = max(0, min(1, home_win_prob))
    away_win_prob = max(0, min(1, away_win_prob))
    draw_prob = max(0, min(1, draw_prob))
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 1
    total = home_win_prob + away_win_prob + draw_prob
    home_win_prob /= total
    away_win_prob /= total
    draw_prob /= total
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    match['match_result']['home_win'] = round(home_win_prob * 100, 1)
    match['match_result']['away_win'] = round(away_win_prob * 100, 1)
    match['match_result']['draw'] = round(draw_prob * 100, 1)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    if home_win_prob > max(draw_prob, away_win_prob):
        match['match_result']['prediction'] = "Home Win"
        match['match_result']['confidence'] = round(home_win_prob * 100, 1)
    elif draw_prob > max(home_win_prob, away_win_prob):
        match['match_result']['prediction'] = "Draw"
        match['match_result']['confidence'] = round(draw_prob * 100, 1)
    else:
        match['match_result']['prediction'] = "Away Win"
        match['match_result']['confidence'] = round(away_win_prob * 100, 1)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö over/under
    over_prob = 0.5  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° head to head
    if h2h['matches_count'] > 0:
        h2h_weight = min(0.3, h2h['matches_count'] * 0.1)  # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30%
        team_weight = 1 - h2h_weight
        
        over_prob = (over_prob * team_weight) + (h2h['over_2_5_rate'] * h2h_weight)
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
    over_prob = max(0.05, min(0.95, over_prob))
    under_prob = 1 - over_prob
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    match['over_under']['over_prob'] = round(over_prob * 100, 1)
    match['over_under']['under_prob'] = round(under_prob * 100, 1)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    if over_prob > under_prob:
        match['over_under']['prediction'] = "Over"
        match['over_under']['confidence'] = round(over_prob * 100, 1)
    else:
        match['over_under']['prediction'] = "Under"
        match['over_under']['confidence'] = round(under_prob * 100, 1)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö both teams to score
    btts_yes_prob = 0.5  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° head to head
    if h2h['matches_count'] > 0:
        h2h_weight = min(0.3, h2h['matches_count'] * 0.1)  # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30%
        team_weight = 1 - h2h_weight
        
        btts_yes_prob = (btts_yes_prob * team_weight) + (h2h['both_teams_scored_rate'] * h2h_weight)
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
    btts_yes_prob = max(0.05, min(0.95, btts_yes_prob))
    btts_no_prob = 1 - btts_yes_prob
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    match['both_teams_score']['yes_prob'] = round(btts_yes_prob * 100, 1)
    match['both_teams_score']['no_prob'] = round(btts_no_prob * 100, 1)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    if btts_yes_prob > btts_no_prob:
        match['both_teams_score']['prediction'] = "Yes"
        match['both_teams_score']['confidence'] = round(btts_yes_prob * 100, 1)
    else:
        match['both_teams_score']['prediction'] = "No"
        match['both_teams_score']['confidence'] = round(btts_no_prob * 100, 1)

if __name__ == "__main__":
    fetch_missing_h2h_data()
