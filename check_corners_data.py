#!/usr/bin/env python3
"""
üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Corners ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
"""

import pandas as pd
import numpy as np

def check_corners_data():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"""
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Corners ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    print("=" * 60)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Premier League
    try:
        data = pd.read_csv('premier_league_real_data.csv')
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Premier League: {len(data)} ‡πÄ‡∏Å‡∏°")
        print(f"üìã Columns: {list(data.columns)}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if 'corners_total' in data.columns:
            print("‚úÖ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners_total")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners_total")
            
        if 'corners_first_half' in data.columns:
            print("‚úÖ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners_first_half")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners_first_half")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    print(f"\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Corners ‡∏à‡∏≥‡∏•‡∏≠‡∏á:")
    print("=" * 50)
    
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners
    test_matches = [
        {'home_goals': 2, 'away_goals': 0, 'match': 'Aston Villa 2-0 Tottenham'},
        {'home_goals': 1, 'away_goals': 0, 'match': 'Chelsea 1-0 Man United'},
        {'home_goals': 2, 'away_goals': 3, 'match': 'Brentford 2-3 Fulham'},
        {'home_goals': 3, 'away_goals': 2, 'match': 'Brighton 3-2 Liverpool'},
        {'home_goals': 4, 'away_goals': 2, 'match': 'Crystal Palace 4-2 Wolves'}
    ]
    
    print("üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Corners:")
    for match in test_matches:
        home_goals = match['home_goals']
        away_goals = match['away_goals']
        total_goals = home_goals + away_goals
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
        base_corners = max(6, min(14, int(total_goals * 2.2 + np.random.normal(0, 1.5))))
        corners_total = max(4, min(16, base_corners))
        corners_first_half = max(1, min(8, int(corners_total * 0.45 + np.random.normal(0, 0.8))))
        
        corners_ou_10 = "Over" if corners_total > 10 else "Under"
        corners_fh_5 = "Over" if corners_first_half > 5 else "Under"
        
        print(f"   {match['match']}")
        print(f"     ‡∏õ‡∏£‡∏∞‡∏ï‡∏π: {total_goals} -> Corners: {corners_total} ({corners_ou_10} 10)")
        print(f"     ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å: {corners_first_half} ({corners_fh_5} 5)")
    
    print(f"\n‚ùå ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
    print("=" * 30)
    print("1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Corners ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π")
    print("2. ‡πÉ‡∏ä‡πâ random ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠")
    print("3. ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á -> bias")
    print("4. ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API")
    
    print(f"\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
    print("=" * 20)
    print("1. ‡∏´‡∏≤ API ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners ‡∏à‡∏£‡∏¥‡∏á")
    print("2. ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•")
    print("3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏ß‡πà‡∏≤")
    print("4. ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà bias")

def simulate_realistic_corners():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏ß‡πà‡∏≤"""
    print(f"\nüîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Corners ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏ß‡πà‡∏≤:")
    print("=" * 50)
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Premier League
    # ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ corners ‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡∏°: 10-12 ‡∏°‡∏∏‡∏°
    # ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢: 6-16 ‡∏°‡∏∏‡∏°
    
    realistic_corners = []
    
    for i in range(20):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏ß‡πà‡∏≤
        corners_total = np.random.choice([8, 9, 10, 11, 12, 13, 14], 
                                       p=[0.1, 0.15, 0.2, 0.25, 0.15, 0.1, 0.05])
        
        corners_first_half = np.random.choice([3, 4, 5, 6, 7], 
                                            p=[0.2, 0.3, 0.3, 0.15, 0.05])
        
        corners_ou_10 = "Over" if corners_total > 10 else "Under"
        corners_fh_5 = "Over" if corners_first_half > 5 else "Under"
        
        realistic_corners.append({
            'total': corners_total,
            'first_half': corners_first_half,
            'ou_10': corners_ou_10,
            'fh_5': corners_fh_5
        })
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢
    over_10_count = sum(1 for c in realistic_corners if c['ou_10'] == 'Over')
    over_5_fh_count = sum(1 for c in realistic_corners if c['fh_5'] == 'Over')
    
    print(f"üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏ß‡πà‡∏≤ (20 ‡πÄ‡∏Å‡∏°):")
    print(f"   Over 10 Total: {over_10_count}/20 = {over_10_count/20:.1%}")
    print(f"   Under 10 Total: {20-over_10_count}/20 = {(20-over_10_count)/20:.1%}")
    print(f"   Over 5 First Half: {over_5_fh_count}/20 = {over_5_fh_count/20:.1%}")
    print(f"   Under 5 First Half: {20-over_5_fh_count}/20 = {(20-over_5_fh_count)/20:.1%}")
    
    print(f"\n‚úÖ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏ß‡πà‡∏≤!")
    print("   ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Under ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üîç Corner Data Investigation")
    print("=" * 60)
    
    check_corners_data()
    simulate_realistic_corners()
    
    print(f"\nüéØ ‡∏™‡∏£‡∏∏‡∏õ:")
    print("=" * 20)
    print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Corners ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á")
    print("‚ùå ‡πÇ‡∏°‡πÄ‡∏î‡∏• bias ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡πÑ‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á")
    print("‚ùå ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Under ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà < 10")
    print("‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• corners ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")

if __name__ == "__main__":
    main()
