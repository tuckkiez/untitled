#!/usr/bin/env python3
"""
üöÄ Real API Data Fetcher - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API-Sports
‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 13 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2025 ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏•‡∏µ‡∏Å‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
"""

import requests
import json
from datetime import datetime
from typing import Dict, List, Any
import time

class RealAPIDataFetcher:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api-football-v1.p.rapidapi.com/v3"
        self.headers = {
            'x-rapidapi-host': 'api-football-v1.p.rapidapi.com',
            'x-rapidapi-key': api_key
        }
        
        # ‡∏•‡∏µ‡∏Å‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏ô‡πÉ‡∏à
        self.major_leagues = {
            39: {"name": "Premier League", "country": "England", "flag": "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø"},
            140: {"name": "La Liga", "country": "Spain", "flag": "üá™üá∏"},
            78: {"name": "Bundesliga", "country": "Germany", "flag": "üá©üá™"},
            135: {"name": "Serie A", "country": "Italy", "flag": "üáÆüáπ"},
            61: {"name": "Ligue 1", "country": "France", "flag": "üá´üá∑"},
            293: {"name": "K League 2", "country": "South Korea", "flag": "üá∞üá∑"},
            253: {"name": "Major League Soccer", "country": "USA", "flag": "üá∫üá∏"},
            262: {"name": "Liga MX", "country": "Mexico", "flag": "üá≤üáΩ"},
            71: {"name": "Serie A", "country": "Brazil", "flag": "üáßüá∑"},
            239: {"name": "Primera A", "country": "Colombia", "flag": "üá®üá¥"},
            113: {"name": "Allsvenskan", "country": "Sweden", "flag": "üá∏üá™"},
            103: {"name": "Eliteserien", "country": "Norway", "flag": "üá≥üá¥"},
            244: {"name": "Veikkausliiga", "country": "Finland", "flag": "üá´üáÆ"},
            170: {"name": "League One", "country": "China", "flag": "üá®üá≥"},
            497: {"name": "Japan Football League", "country": "Japan", "flag": "üáØüáµ"}
        }
        
    def fetch_todays_matches(self, date: str = "2025-07-13") -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        url = f"{self.base_url}/fixtures"
        params = {'date': date}
        
        try:
            response = requests.get(url, headers=self.headers, params=params, timeout=15)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå API Error: {response.status_code}")
                return {}
        except Exception as e:
            print(f"üö® Request Error: {e}")
            return {}
    
    def categorize_matches(self, api_data: Dict) -> Dict[str, List[Dict]]:
        """‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏µ‡∏Å"""
        if not api_data or 'response' not in api_data:
            return {}
        
        categorized = {}
        other_matches = []
        
        for match in api_data['response']:
            league_id = match['league']['id']
            league_name = match['league']['name']
            country = match['league']['country']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏µ‡∏Å‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if league_id in self.major_leagues:
                league_info = self.major_leagues[league_id]
                category_key = f"{league_info['flag']} {league_info['name']} ({league_info['country']})"
            else:
                # ‡∏•‡∏µ‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
                if any(keyword in league_name.lower() for keyword in ['premier', 'liga', 'league', 'championship', 'cup']):
                    category_key = f"üåç {league_name} ({country})"
                else:
                    other_matches.append(match)
                    continue
            
            if category_key not in categorized:
                categorized[category_key] = []
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            match_info = {
                'fixture_id': match['fixture']['id'],
                'home_team': match['teams']['home']['name'],
                'away_team': match['teams']['away']['name'],
                'home_id': match['teams']['home']['id'],
                'away_id': match['teams']['away']['id'],
                'date': match['fixture']['date'],
                'status': match['fixture']['status']['short'],
                'venue': match['fixture']['venue']['name'] if match['fixture']['venue'] else 'TBD',
                'league_id': league_id,
                'league_name': league_name,
                'country': country
            }
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            if match['fixture']['status']['short'] == 'FT':
                match_info['home_goals'] = match['goals']['home']
                match_info['away_goals'] = match['goals']['away']
            
            categorized[category_key].append(match_info)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        sorted_categories = {}
        
        # ‡∏•‡∏µ‡∏Å‡πÉ‡∏´‡∏ç‡πà‡∏Å‡πà‡∏≠‡∏ô
        for league_id, info in self.major_leagues.items():
            key = f"{info['flag']} {info['name']} ({info['country']})"
            if key in categorized:
                sorted_categories[key] = categorized[key]
        
        # ‡∏•‡∏µ‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°
        for key in sorted(categorized.keys()):
            if key not in sorted_categories:
                sorted_categories[key] = categorized[key]
        
        return sorted_categories
    
    def get_match_summary(self, categorized_matches: Dict) -> Dict:
        """‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô"""
        summary = {
            'total_leagues': len(categorized_matches),
            'total_matches': sum(len(matches) for matches in categorized_matches.values()),
            'leagues_breakdown': {}
        }
        
        for league, matches in categorized_matches.items():
            finished = len([m for m in matches if m['status'] == 'FT'])
            upcoming = len([m for m in matches if m['status'] in ['NS', 'TBD']])
            live = len([m for m in matches if m['status'] in ['1H', '2H', 'HT']])
            
            summary['leagues_breakdown'][league] = {
                'total': len(matches),
                'finished': finished,
                'upcoming': upcoming,
                'live': live
            }
        
        return summary

if __name__ == "__main__":
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    api_key = "f9cf9a3854mshf30572945114fb4p105c26jsnbbc82dcea9c0"
    fetcher = RealAPIDataFetcher(api_key)
    
    print("üöÄ Real API Data Fetcher - July 13, 2025")
    print("=" * 60)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    print("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API...")
    api_data = fetcher.fetch_todays_matches()
    
    if api_data:
        print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ {api_data.get('results', 0)} ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
        print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏•‡∏µ‡∏Å...")
        categorized = fetcher.categorize_matches(api_data)
        
        # ‡∏™‡∏£‡∏∏‡∏õ
        summary = fetcher.get_match_summary(categorized)
        
        print(f"\nüìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•:")
        print(f"üèÜ ‡∏•‡∏µ‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {summary['total_leagues']}")
        print(f"‚öΩ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {summary['total_matches']}")
        
        print(f"\nüî• ‡∏•‡∏µ‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô:")
        for league, info in summary['leagues_breakdown'].items():
            print(f"   {league}: {info['total']} ‡∏ô‡∏±‡∏î (‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß: {info['finished']}, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ç‡πà‡∏á: {info['live']}, ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°: {info['upcoming']})")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏µ‡∏Å‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        print(f"\n‚öΩ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô:")
        count = 0
        for league, matches in categorized.items():
            if count >= 10:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏ô‡∏±‡∏î‡πÅ‡∏£‡∏Å
                break
            for match in matches[:2]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 2 ‡∏ô‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏•‡∏µ‡∏Å
                status_emoji = "‚úÖ" if match['status'] == 'FT' else "üî¥" if match['status'] in ['1H', '2H', 'HT'] else "‚è∞"
                print(f"   {status_emoji} {match['home_team']} vs {match['away_team']} ({league})")
                count += 1
                if count >= 10:
                    break
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        output_file = f"real_matches_data_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump({
                'summary': summary,
                'categorized_matches': categorized,
                'fetch_time': datetime.now().isoformat()
            }, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: {output_file}")
        
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
