#!/usr/bin/env python3
"""
üá™üá∏ La Liga Predictor with Real Data
‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡∏µ‡∏Å‡∏™‡πÄ‡∏õ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡∏à‡∏≤‡∏Å Premier League)
"""

import pandas as pd
import numpy as np
from datetime import datetime
import sys
import os

# Copy ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å Ultra Advanced Predictor
class LaLigaPredictorReal:
    def __init__(self):
        self.team_ratings = {}
        self.historical_data = None
        self.is_trained = False
        
    def load_laliga_real_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• La Liga ‡∏à‡∏£‡∏¥‡∏á"""
        print("üá™üá∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• La Liga ‡∏à‡∏£‡∏¥‡∏á...")
        
        try:
            # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API ‡∏Å‡πà‡∏≠‡∏ô
            if os.path.exists('laliga_real_matches.csv'):
                data = pd.read_csv('laliga_real_matches.csv')
                print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(data)} ‡πÄ‡∏Å‡∏°")
            else:
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
                data = pd.read_csv('laliga_realistic_matches.csv')
                print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(data)} ‡πÄ‡∏Å‡∏°")
            
            data['date'] = pd.to_datetime(data['date'])
            data = data.sort_values('date').reset_index(drop=True)
            
            self.historical_data = data
            return data
            
        except FileNotFoundError:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• La Liga")
            print("üí° ‡∏£‡∏±‡∏ô create_laliga_sample_data.py ‡∏Å‡πà‡∏≠‡∏ô")
            return None
        except Exception as e:
            print(f"‚ùå Error loading data: {e}")
            return None
    
    def calculate_elo_ratings(self, matches_df):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ELO Rating ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö La Liga"""
        print("üèÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ELO Ratings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö La Liga...")
        
        teams = set(matches_df['home_team'].unique()) | set(matches_df['away_team'].unique())
        elo_ratings = {team: 1500 for team in teams}
        
        K = 32  # K-factor ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        
        for _, match in matches_df.iterrows():
            home_team = match['home_team']
            away_team = match['away_team']
            home_goals = match['home_goals']
            away_goals = match['away_goals']
            
            if home_goals > away_goals:
                home_result, away_result = 1.0, 0.0
            elif home_goals == away_goals:
                home_result, away_result = 0.5, 0.5
            else:
                home_result, away_result = 0.0, 1.0
            
            home_expected = 1 / (1 + 10**((elo_ratings[away_team] - elo_ratings[home_team]) / 400))
            away_expected = 1 - home_expected
            
            elo_ratings[home_team] += K * (home_result - home_expected)
            elo_ratings[away_team] += K * (away_result - away_expected)
        
        self.team_ratings = elo_ratings
        return elo_ratings
    
    def create_advanced_features(self, matches_df):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Advanced Features ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö La Liga"""
        print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Advanced Features ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö La Liga...")
        
        features = []
        
        for idx, match in matches_df.iterrows():
            if idx < 20:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠
                continue
                
            home_team = match['home_team']
            away_team = match['away_team']
            match_date = pd.to_datetime(match['date'])
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            prev_matches = matches_df[matches_df['date'] < match_date]
            
            feature_dict = {}
            
            # 1. ELO Ratings
            feature_dict['home_elo'] = self.team_ratings.get(home_team, 1500)
            feature_dict['away_elo'] = self.team_ratings.get(away_team, 1500)
            feature_dict['elo_diff'] = feature_dict['home_elo'] - feature_dict['away_elo']
            
            # 2. Recent Form (5 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
            home_recent = self._get_recent_form(prev_matches, home_team, 5)
            away_recent = self._get_recent_form(prev_matches, away_team, 5)
            
            feature_dict['home_recent_points'] = home_recent['points']
            feature_dict['away_recent_points'] = away_recent['points']
            feature_dict['home_recent_goals_for'] = home_recent['goals_for']
            feature_dict['away_recent_goals_for'] = away_recent['goals_for']
            feature_dict['home_recent_goals_against'] = home_recent['goals_against']
            feature_dict['away_recent_goals_against'] = away_recent['goals_against']
            
            # 3. Season Form
            home_season = self._get_season_form(prev_matches, home_team)
            away_season = self._get_season_form(prev_matches, away_team)
            
            feature_dict['home_season_ppg'] = home_season['ppg']
            feature_dict['away_season_ppg'] = away_season['ppg']
            feature_dict['home_goals_per_game'] = home_season['goals_for'] / max(1, home_season['games'])
            feature_dict['away_goals_per_game'] = away_season['goals_for'] / max(1, away_season['games'])
            
            # 4. Head to Head
            h2h = self._get_head_to_head(prev_matches, home_team, away_team)
            feature_dict['h2h_home_wins'] = h2h['home_wins']
            feature_dict['h2h_away_wins'] = h2h['away_wins']
            feature_dict['h2h_draws'] = h2h['draws']
            
            # 5. Home/Away Performance
            home_home_form = self._get_home_away_form(prev_matches, home_team, 'home')
            away_away_form = self._get_home_away_form(prev_matches, away_team, 'away')
            
            feature_dict['home_home_ppg'] = home_home_form['ppg']
            feature_dict['away_away_ppg'] = away_away_form['ppg']
            
            # Target
            if match['home_goals'] > match['away_goals']:
                target = 'Home Win'
            elif match['home_goals'] == match['away_goals']:
                target = 'Draw'
            else:
                target = 'Away Win'
            
            feature_dict['target'] = target
            features.append(feature_dict)
        
        features_df = pd.DataFrame(features)
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á {len(features_df.columns)-1} Features ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        return features_df
    
    def train_simple_model(self, data):
        """‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        print("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• La Liga...")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ELO ratings
        self.calculate_elo_ratings(data)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á features
        features_df = self.create_advanced_features(data)
        
        if len(features_df) < 50:
            print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô")
            return False
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        self.features_data = features_df
        self.is_trained = True
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        accuracy = self._calculate_accuracy(features_df)
        print(f"üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏•: {accuracy:.1%}")
        
        return True
    
    def _calculate_accuracy(self, features_df):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        correct = 0
        total = len(features_df)
        
        for _, row in features_df.iterrows():
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å ELO
            elo_diff = row['elo_diff']
            
            if elo_diff > 100:
                prediction = 'Home Win'
            elif elo_diff < -100:
                prediction = 'Away Win'
            else:
                prediction = 'Draw'
            
            if prediction == row['target']:
                correct += 1
        
        return correct / total
    
    def predict_match_laliga(self, home_team, away_team):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô La Liga"""
        if not self.is_trained:
            print("‚ùå ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡∏£‡∏ô!")
            return None
        
        print(f"üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ {home_team} vs {away_team}...")
        
        # ‡∏î‡∏∂‡∏á ELO ratings
        home_elo = self.team_ratings.get(home_team, 1500)
        away_elo = self.team_ratings.get(away_team, 1500)
        
        # Home advantage
        home_elo += 100
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        home_expected = 1 / (1 + 10**((away_elo - home_elo) / 400))
        away_expected = 1 - home_expected
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        home_form = self._get_team_form(home_team)
        away_form = self._get_team_form(away_team)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        home_prob = home_expected * (1 + home_form * 0.1)
        away_prob = away_expected * (1 + away_form * 0.1)
        draw_prob = 0.25
        
        # Normalize
        total_prob = home_prob + away_prob + draw_prob
        home_prob /= total_prob
        away_prob /= total_prob
        draw_prob /= total_prob
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
        if home_prob > away_prob and home_prob > draw_prob:
            prediction = "Home Win"
            confidence = home_prob
        elif away_prob > home_prob and away_prob > draw_prob:
            prediction = "Away Win"
            confidence = away_prob
        else:
            prediction = "Draw"
            confidence = draw_prob
        
        return {
            'prediction': prediction,
            'confidence': confidence,
            'probabilities': {
                'Home Win': home_prob,
                'Draw': draw_prob,
                'Away Win': away_prob
            },
            'elo_ratings': {
                'home_elo': home_elo - 100,  # ‡∏•‡∏ö home advantage
                'away_elo': away_elo
            }
        }
    
    def _get_team_form(self, team):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡∏° (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)"""
        if not hasattr(self, 'historical_data'):
            return 0
        
        recent_matches = self.historical_data[
            (self.historical_data['home_team'] == team) | 
            (self.historical_data['away_team'] == team)
        ].tail(5)
        
        points = 0
        for _, match in recent_matches.iterrows():
            if match['home_team'] == team:
                if match['home_goals'] > match['away_goals']:
                    points += 3
                elif match['home_goals'] == match['away_goals']:
                    points += 1
            else:
                if match['away_goals'] > match['home_goals']:
                    points += 3
                elif match['away_goals'] == match['home_goals']:
                    points += 1
        
        return (points / 15) - 0.5  # normalize to -0.5 to 0.5
    
    # Helper methods (‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Ultra Advanced)
    def _get_recent_form(self, matches_df, team, n_games):
        team_matches = matches_df[
            (matches_df['home_team'] == team) | (matches_df['away_team'] == team)
        ].tail(n_games)
        
        points = goals_for = goals_against = 0
        
        for _, match in team_matches.iterrows():
            if match['home_team'] == team:
                goals_for += match['home_goals']
                goals_against += match['away_goals']
                if match['home_goals'] > match['away_goals']:
                    points += 3
                elif match['home_goals'] == match['away_goals']:
                    points += 1
            else:
                goals_for += match['away_goals']
                goals_against += match['home_goals']
                if match['away_goals'] > match['home_goals']:
                    points += 3
                elif match['away_goals'] == match['home_goals']:
                    points += 1
        
        return {'points': points, 'goals_for': goals_for, 'goals_against': goals_against}
    
    def _get_season_form(self, matches_df, team):
        team_matches = matches_df[
            (matches_df['home_team'] == team) | (matches_df['away_team'] == team)
        ]
        
        points = goals_for = goals_against = games = 0
        
        for _, match in team_matches.iterrows():
            games += 1
            if match['home_team'] == team:
                goals_for += match['home_goals']
                goals_against += match['away_goals']
                if match['home_goals'] > match['away_goals']:
                    points += 3
                elif match['home_goals'] == match['away_goals']:
                    points += 1
            else:
                goals_for += match['away_goals']
                goals_against += match['home_goals']
                if match['away_goals'] > match['home_goals']:
                    points += 3
                elif match['away_goals'] == match['home_goals']:
                    points += 1
        
        return {
            'points': points, 'games': games, 'ppg': points / max(1, games),
            'goals_for': goals_for, 'goals_against': goals_against
        }
    
    def _get_head_to_head(self, matches_df, home_team, away_team):
        h2h_matches = matches_df[
            ((matches_df['home_team'] == home_team) & (matches_df['away_team'] == away_team)) |
            ((matches_df['home_team'] == away_team) & (matches_df['away_team'] == home_team))
        ]
        
        home_wins = away_wins = draws = 0
        
        for _, match in h2h_matches.iterrows():
            if match['home_team'] == home_team:
                if match['home_goals'] > match['away_goals']:
                    home_wins += 1
                elif match['home_goals'] == match['away_goals']:
                    draws += 1
                else:
                    away_wins += 1
            else:
                if match['away_goals'] > match['home_goals']:
                    home_wins += 1
                elif match['away_goals'] == match['home_goals']:
                    draws += 1
                else:
                    away_wins += 1
        
        return {'home_wins': home_wins, 'away_wins': away_wins, 'draws': draws}
    
    def _get_home_away_form(self, matches_df, team, venue):
        if venue == 'home':
            team_matches = matches_df[matches_df['home_team'] == team]
        else:
            team_matches = matches_df[matches_df['away_team'] == team]
        
        points = games = 0
        
        for _, match in team_matches.iterrows():
            games += 1
            if venue == 'home':
                if match['home_goals'] > match['away_goals']:
                    points += 3
                elif match['home_goals'] == match['away_goals']:
                    points += 1
            else:
                if match['away_goals'] > match['home_goals']:
                    points += 3
                elif match['away_goals'] == match['home_goals']:
                    points += 1
        
        return {'ppg': points / max(1, games)}

def test_laliga_with_real_data():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö La Liga ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
    print("üá™üá∏ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö La Liga Predictor ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á")
    print("=" * 60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á predictor
    predictor = LaLigaPredictorReal()
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    data = predictor.load_laliga_real_data()
    if data is None:
        return None
    
    # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
    success = predictor.train_simple_model(data)
    if not success:
        return None
    
    # ‡πÅ‡∏™‡∏î‡∏á Top 5 ‡∏ó‡∏µ‡∏°
    print(f"\nüèÜ Top 5 ‡∏ó‡∏µ‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (ELO Rating):")
    sorted_teams = sorted(predictor.team_ratings.items(), key=lambda x: x[1], reverse=True)
    for i, (team, rating) in enumerate(sorted_teams[:5]):
        print(f"   {i+1}. {team}: {rating:.0f}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    print(f"\nüéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:")
    test_matches = [
        ('Real Madrid', 'FC Barcelona'),
        ('Atletico Madrid', 'Real Sociedad'),
        ('Sevilla FC', 'Valencia CF'),
        ('Athletic Bilbao', 'Real Betis'),
        ('Villarreal CF', 'Girona FC')
    ]
    
    results = []
    
    for home, away in test_matches:
        result = predictor.predict_match_laliga(home, away)
        if result:
            results.append(result)
            print(f"\n‚öΩ {home} vs {away}")
            print(f"   üéØ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {result['prediction']} ({result['confidence']:.1%})")
            print(f"   üìä ELO: {home} {result['elo_ratings']['home_elo']:.0f} vs {away} {result['elo_ratings']['away_elo']:.0f}")
            
            probs = result['probabilities']
            print(f"   üìà {home}: {probs['Home Win']:.1%} | ‡πÄ‡∏™‡∏°‡∏≠: {probs['Draw']:.1%} | {away}: {probs['Away Win']:.1%}")
    
    # ‡∏™‡∏£‡∏∏‡∏õ
    if results:
        avg_confidence = sum(r['confidence'] for r in results) / len(results)
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
        print(f"   ‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(results)} ‡∏Ñ‡∏π‡πà")
        print(f"   üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_confidence:.1%}")
        
        if avg_confidence > 0.5:
            print(f"   üéâ ‡∏£‡∏∞‡∏ö‡∏ö La Liga ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!")
        else:
            print(f"   ‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    
    return predictor

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ La Liga Predictor with Real Data")
    print("üá™üá∏ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡∏µ‡∏Å‡∏™‡πÄ‡∏õ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á")
    print("üìù ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡∏à‡∏≤‡∏Å Premier League")
    print("=" * 70)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    predictor = test_laliga_with_real_data()
    
    if predictor:
        print(f"\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö La Liga Predictor ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        print(f"üìä ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á/‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á")
        print(f"üîß ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡∏à‡∏≤‡∏Å Premier League")
        print(f"‚ö° ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ")
    else:
        print(f"\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    return predictor

if __name__ == "__main__":
    predictor = main()
