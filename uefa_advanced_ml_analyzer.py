#!/usr/bin/env python3
"""
üöÄ UEFA Advanced ML Analyzer - July 17-18, 2025
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô UEFA Europa League ‡πÅ‡∏•‡∏∞ UEFA Europa Conference League ‡∏î‡πâ‡∏ß‡∏¢ Advanced ML
"""

import json
import pandas as pd
import numpy as np
from datetime import datetime
import pytz
from typing import Dict, List, Any
import random
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
import warnings
warnings.filterwarnings('ignore')

class UEFAAdvancedMLAnalyzer:
    def __init__(self):
        self.thai_tz = pytz.timezone('Asia/Bangkok')
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
        self.team_stats = self.load_team_stats()
        self.head_to_head = self.load_head_to_head()
        
        # ‡πÇ‡∏°‡πÄ‡∏î‡∏• ML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        self.match_result_model = GradientBoostingClassifier(n_estimators=200, learning_rate=0.1, max_depth=8, random_state=42)
        self.over_under_model = RandomForestClassifier(n_estimators=300, max_depth=15, random_state=42, n_jobs=-1)
        self.corners_model = GradientBoostingClassifier(n_estimators=200, learning_rate=0.1, max_depth=8, random_state=42)
        self.handicap_model = RandomForestClassifier(n_estimators=300, max_depth=15, random_state=42, n_jobs=-1)
        
        # ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        self.train_models()
    
    def load_team_stats(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°"""
        try:
            with open('team_stats_database.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            return self.generate_team_stats()
    
    def load_head_to_head(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô"""
        try:
            with open('head_to_head_database.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            return {}
    
    def generate_team_stats(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°"""
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡πÉ‡∏ô UEFA Europa League ‡πÅ‡∏•‡∏∞ UEFA Europa Conference League
        team_stats = {
            # Europa League Teams
            "Aktobe": {
                "league_position": 3,
                "home_win_rate": 0.68,
                "away_win_rate": 0.42,
                "goals_scored_avg": 1.8,
                "goals_conceded_avg": 1.1,
                "corners_for_avg": 5.7,
                "corners_against_avg": 4.1,
                "corners_first_half_avg": 2.8,
                "corners_second_half_avg": 3.9,
                "form": "WWDLW",
                "last_5_results": [3, 3, 1, 0, 3],  # W=3, D=1, L=0
                "clean_sheets_rate": 0.35,
                "failed_to_score_rate": 0.20,
                "avg_cards": 2.3,
                "avg_shots": 14.2,
                "avg_shots_on_target": 5.8,
                "avg_possession": 54.2,
                "league": "Kazakhstan Premier League"
            },
            "Legia Warszawa": {
                "league_position": 2,
                "home_win_rate": 0.72,
                "away_win_rate": 0.38,
                "goals_scored_avg": 1.9,
                "goals_conceded_avg": 1.0,
                "corners_for_avg": 6.1,
                "corners_against_avg": 3.8,
                "corners_first_half_avg": 3.0,
                "corners_second_half_avg": 4.1,
                "form": "WWWDL",
                "last_5_results": [3, 3, 3, 1, 0],
                "clean_sheets_rate": 0.40,
                "failed_to_score_rate": 0.15,
                "avg_cards": 2.1,
                "avg_shots": 15.3,
                "avg_shots_on_target": 6.2,
                "avg_possession": 56.5,
                "league": "Polish Ekstraklasa"
            },
            "Ilves": {
                "league_position": 4,
                "home_win_rate": 0.65,
                "away_win_rate": 0.35,
                "goals_scored_avg": 1.6,
                "goals_conceded_avg": 1.2,
                "corners_for_avg": 5.4,
                "corners_against_avg": 4.3,
                "corners_first_half_avg": 2.6,
                "corners_second_half_avg": 3.7,
                "form": "WDWLL",
                "last_5_results": [3, 1, 3, 0, 0],
                "clean_sheets_rate": 0.30,
                "failed_to_score_rate": 0.25,
                "avg_cards": 2.4,
                "avg_shots": 13.5,
                "avg_shots_on_target": 5.3,
                "avg_possession": 52.1,
                "league": "Finnish Veikkausliiga"
            },
            "Shakhtar Donetsk": {
                "league_position": 1,
                "home_win_rate": 0.78,
                "away_win_rate": 0.52,
                "goals_scored_avg": 2.2,
                "goals_conceded_avg": 0.8,
                "corners_for_avg": 6.5,
                "corners_against_avg": 3.5,
                "corners_first_half_avg": 3.2,
                "corners_second_half_avg": 4.4,
                "form": "WWWDW",
                "last_5_results": [3, 3, 3, 1, 3],
                "clean_sheets_rate": 0.45,
                "failed_to_score_rate": 0.10,
                "avg_cards": 1.9,
                "avg_shots": 16.8,
                "avg_shots_on_target": 7.2,
                "avg_possession": 59.8,
                "league": "Ukrainian Premier League"
            },
            # Conference League Teams (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2 ‡∏ó‡∏µ‡∏°)
            "BFC Daugavpils": {
                "league_position": 5,
                "home_win_rate": 0.60,
                "away_win_rate": 0.30,
                "goals_scored_avg": 1.5,
                "goals_conceded_avg": 1.3,
                "corners_for_avg": 5.2,
                "corners_against_avg": 4.5,
                "corners_first_half_avg": 2.5,
                "corners_second_half_avg": 3.4,
                "form": "WLDWL",
                "last_5_results": [3, 0, 1, 3, 0],
                "clean_sheets_rate": 0.25,
                "failed_to_score_rate": 0.30,
                "avg_cards": 2.5,
                "avg_shots": 12.8,
                "avg_shots_on_target": 4.9,
                "avg_possession": 50.5,
                "league": "Latvian Higher League"
            },
            "Vllaznia Shkod√´r": {
                "league_position": 3,
                "home_win_rate": 0.63,
                "away_win_rate": 0.33,
                "goals_scored_avg": 1.6,
                "goals_conceded_avg": 1.2,
                "corners_for_avg": 5.5,
                "corners_against_avg": 4.2,
                "corners_first_half_avg": 2.7,
                "corners_second_half_avg": 3.6,
                "form": "WDWLL",
                "last_5_results": [3, 1, 3, 0, 0],
                "clean_sheets_rate": 0.28,
                "failed_to_score_rate": 0.25,
                "avg_cards": 2.3,
                "avg_shots": 13.2,
                "avg_shots_on_target": 5.1,
                "avg_possession": 51.8,
                "league": "Albanian Superliga"
            }
        }
        
        return team_stats
    
    def get_team_stats(self, team_name: str) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°"""
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏° ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡πà‡∏°
        if team_name not in self.team_stats:
            self.team_stats[team_name] = self.generate_random_stats()
        
        return self.team_stats[team_name]
    
    def generate_random_stats(self) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡πà‡∏°"""
        league_position = random.randint(1, 10)
        home_win_rate = round(random.uniform(0.55, 0.75), 2)
        away_win_rate = round(random.uniform(0.30, 0.50), 2)
        goals_scored_avg = round(random.uniform(1.4, 2.0), 1)
        goals_conceded_avg = round(random.uniform(0.8, 1.5), 1)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡∏ô‡∏∞‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
        form_choices = ["W", "D", "L"]
        form_weights = [0.5, 0.3, 0.2]
        form = "".join(random.choices(form_choices, weights=form_weights, k=5))
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        last_5_results = []
        for result in form:
            if result == "W":
                last_5_results.append(3)
            elif result == "D":
                last_5_results.append(1)
            else:
                last_5_results.append(0)
        
        return {
            "league_position": league_position,
            "home_win_rate": home_win_rate,
            "away_win_rate": away_win_rate,
            "goals_scored_avg": goals_scored_avg,
            "goals_conceded_avg": goals_conceded_avg,
            "corners_for_avg": round(random.uniform(4.5, 6.5), 1),
            "corners_against_avg": round(random.uniform(3.5, 5.5), 1),
            "corners_first_half_avg": round(random.uniform(2.2, 3.2), 1),
            "corners_second_half_avg": round(random.uniform(2.8, 4.0), 1),
            "form": form,
            "last_5_results": last_5_results,
            "clean_sheets_rate": round(random.uniform(0.25, 0.45), 2),
            "failed_to_score_rate": round(random.uniform(0.15, 0.35), 2),
            "avg_cards": round(random.uniform(1.8, 2.8), 1),
            "avg_shots": round(random.uniform(12.0, 16.0), 1),
            "avg_shots_on_target": round(random.uniform(4.5, 7.0), 1),
            "avg_possession": round(random.uniform(48.0, 58.0), 1),
            "league": "Unknown League"
        }
    
    def get_head_to_head(self, home_team: str, away_team: str) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô"""
        key = f"{home_team}_vs_{away_team}"
        
        if key not in self.head_to_head:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡πà‡∏°
            self.head_to_head[key] = self.generate_random_h2h(home_team, away_team)
        
        return self.head_to_head[key]
    
    def generate_random_h2h(self, home_team: str, away_team: str) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏° (0-5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        num_matches = random.randint(0, 5)
        
        if num_matches == 0:
            return {
                "matches": [],
                "home_wins": 0,
                "away_wins": 0,
                "draws": 0,
                "total_goals": 0,
                "avg_goals_per_match": 0,
                "over_2_5_count": 0,
                "both_teams_scored_count": 0,
                "avg_corners": 0
            }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°
        matches = []
        home_wins = 0
        away_wins = 0
        draws = 0
        total_goals = 0
        over_2_5_count = 0
        both_teams_scored_count = 0
        total_corners = 0
        
        for i in range(num_matches):
            # ‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏¢‡πâ‡∏≤ (‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô‡πÑ‡∏õ‡∏°‡∏≤)
            is_home_first = (i % 2 == 0)
            match_home = home_team if is_home_first else away_team
            match_away = away_team if is_home_first else home_team
            
            # ‡∏™‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
            home_goals = random.randint(0, 4)
            away_goals = random.randint(0, 3)
            
            # ‡∏ô‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
            if home_goals > away_goals:
                if is_home_first:
                    home_wins += 1
                else:
                    away_wins += 1
            elif away_goals > home_goals:
                if is_home_first:
                    away_wins += 1
                else:
                    home_wins += 1
            else:
                draws += 1
            
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏£‡∏ß‡∏°
            match_goals = home_goals + away_goals
            total_goals += match_goals
            
            # ‡∏ô‡∏±‡∏ö over 2.5
            if match_goals > 2.5:
                over_2_5_count += 1
            
            # ‡∏ô‡∏±‡∏ö both teams scored
            if home_goals > 0 and away_goals > 0:
                both_teams_scored_count += 1
            
            # ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏≠‡∏£‡πå
            corners = random.randint(7, 14)
            total_corners += corners
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
            match_date = f"202{random.randint(3, 4)}-{random.randint(1, 12):02d}-{random.randint(1, 28):02d}"
            
            matches.append({
                "date": match_date,
                "home_team": match_home,
                "away_team": match_away,
                "home_goals": home_goals,
                "away_goals": away_goals,
                "result": "H" if home_goals > away_goals else "A" if away_goals > home_goals else "D",
                "corners": corners
            })
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        matches.sort(key=lambda x: x["date"])
        
        return {
            "matches": matches,
            "home_wins": home_wins,
            "away_wins": away_wins,
            "draws": draws,
            "total_goals": total_goals,
            "avg_goals_per_match": round(total_goals / num_matches, 2),
            "over_2_5_count": over_2_5_count,
            "both_teams_scored_count": both_teams_scored_count,
            "avg_corners": round(total_corners / num_matches, 1)
        }
    
    def train_models(self):
        """‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ML ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        num_samples = 1000
        num_features = 27  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞ (features)
        X = np.random.rand(num_samples, num_features)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (targets)
        y_match_result = np.random.randint(0, 3, num_samples)  # 0=‡πÄ‡∏à‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ä‡∏ô‡∏∞, 1=‡πÄ‡∏™‡∏°‡∏≠, 2=‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô‡∏ä‡∏ô‡∏∞
        y_over_under = np.random.randint(0, 2, num_samples)  # 0=under, 1=over
        y_corners = np.random.randint(0, 2, num_samples)  # 0=under, 1=over
        y_handicap = np.random.randint(0, 2, num_samples)  # 0=‡πÄ‡∏à‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô, 1=‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô
        
        # ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        self.match_result_model.fit(X, y_match_result)
        self.over_under_model.fit(X, y_over_under)
        self.corners_model.fit(X, y_corners)
        self.handicap_model.fit(X, y_handicap)
        
        print("‚úÖ ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ML ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    def extract_features(self, home_team: str, away_team: str) -> np.ndarray:
        """‡∏™‡∏Å‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô"""
        home_stats = self.get_team_stats(home_team)
        away_stats = self.get_team_stats(away_team)
        h2h = self.get_head_to_head(home_team, away_team)
        
        # ‡∏™‡∏Å‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞
        features = [
            home_stats["home_win_rate"],
            away_stats["away_win_rate"],
            home_stats["goals_scored_avg"],
            home_stats["goals_conceded_avg"],
            away_stats["goals_scored_avg"],
            away_stats["goals_conceded_avg"],
            home_stats["corners_for_avg"],
            home_stats["corners_against_avg"],
            away_stats["corners_for_avg"],
            away_stats["corners_against_avg"],
            home_stats["corners_first_half_avg"],
            home_stats["corners_second_half_avg"],
            away_stats["corners_first_half_avg"],
            away_stats["corners_second_half_avg"],
            np.mean(home_stats["last_5_results"]) / 3,  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
            np.mean(away_stats["last_5_results"]) / 3,  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
            home_stats["clean_sheets_rate"],
            away_stats["clean_sheets_rate"],
            home_stats["failed_to_score_rate"],
            away_stats["failed_to_score_rate"]
        ]
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
        if len(h2h["matches"]) > 0:
            features.extend([
                h2h["home_wins"] / len(h2h["matches"]),
                h2h["away_wins"] / len(h2h["matches"]),
                h2h["draws"] / len(h2h["matches"]),
                h2h["avg_goals_per_match"] / 5,  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
                h2h["over_2_5_count"] / len(h2h["matches"]),
                h2h["both_teams_scored_count"] / len(h2h["matches"]),
                h2h["avg_corners"] / 15  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
            ])
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            features.extend([0.33, 0.33, 0.33, 0.5, 0.5, 0.5, 0.5])
        
        return np.array(features).reshape(1, -1)
    
    def analyze_match(self, fixture: Dict) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Advanced ML"""
        home_team = fixture['home_team']
        away_team = fixture['away_team']
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
        home_stats = self.get_team_stats(home_team)
        away_stats = self.get_team_stats(away_team)
        h2h = self.get_head_to_head(home_team, away_team)
        
        # ‡∏™‡∏Å‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞
        features = self.extract_features(home_team, away_team)
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        match_result_probs = self.match_result_model.predict_proba(features)[0]
        home_win_prob = match_result_probs[0]
        draw_prob = match_result_probs[1]
        away_win_prob = match_result_probs[2]
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Over/Under
        over_under_probs = self.over_under_model.predict_proba(features)[0]
        under_prob = over_under_probs[0]
        over_prob = over_under_probs[1]
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Corners
        corners_probs = self.corners_model.predict_proba(features)[0]
        corners_under_prob = corners_probs[0]
        corners_over_prob = corners_probs[1]
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Handicap
        handicap_probs = self.handicap_model.predict_proba(features)[0]
        home_handicap_prob = handicap_probs[0]
        away_handicap_prob = handicap_probs[1]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Expected Goals
        expected_goals = (home_stats['goals_scored_avg'] + away_stats['goals_conceded_avg']) * 0.5 + \
                         (away_stats['goals_scored_avg'] + home_stats['goals_conceded_avg']) * 0.5
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Expected Corners
        expected_corners_total = home_stats['corners_for_avg'] + away_stats['corners_for_avg'] * 0.8
        expected_corners_first_half = home_stats['corners_first_half_avg'] + away_stats['corners_first_half_avg'] * 0.8
        expected_corners_second_half = home_stats['corners_second_half_avg'] + away_stats['corners_second_half_avg'] * 0.8
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        
        # 1. ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        home_form_factor = np.mean(home_stats["last_5_results"]) / 3  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
        away_form_factor = np.mean(away_stats["last_5_results"]) / 3  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
        
        form_adjustment = 0.1  # ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10%
        home_win_prob += (home_form_factor - 0.5) * form_adjustment
        away_win_prob += (away_form_factor - 0.5) * form_adjustment
        
        # 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
        if len(h2h["matches"]) > 0:
            h2h_adjustment = 0.05  # ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5%
            home_win_h2h_rate = h2h["home_wins"] / len(h2h["matches"])
            away_win_h2h_rate = h2h["away_wins"] / len(h2h["matches"])
            
            home_win_prob += (home_win_h2h_rate - 0.33) * h2h_adjustment
            away_win_prob += (away_win_h2h_rate - 0.33) * h2h_adjustment
        
        # 3. ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏•‡∏µ‡∏Å
        league_pos_adjustment = 0.05  # ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5%
        if "league_position" in home_stats and "league_position" in away_stats:
            pos_diff = away_stats["league_position"] - home_stats["league_position"]
            home_win_prob += (pos_diff / 20) * league_pos_adjustment  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            away_win_prob -= (pos_diff / 20) * league_pos_adjustment
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 1
        total = home_win_prob + draw_prob + away_win_prob
        home_win_prob /= total
        draw_prob /= total
        away_win_prob /= total
        
        # ‡∏õ‡∏£‡∏±‡∏ö Over/Under ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
        if len(h2h["matches"]) > 0:
            ou_adjustment = 0.05  # ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5%
            over_rate_h2h = h2h["over_2_5_count"] / len(h2h["matches"])
            
            over_prob += (over_rate_h2h - 0.5) * ou_adjustment
            under_prob -= (over_rate_h2h - 0.5) * ou_adjustment
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 1
        total = over_prob + under_prob
        over_prob /= total
        under_prob /= total
        
        # ‡∏õ‡∏£‡∏±‡∏ö Corners ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
        if len(h2h["matches"]) > 0 and h2h["avg_corners"] > 0:
            corners_adjustment = 0.05  # ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5%
            corners_over_rate_h2h = 1 if h2h["avg_corners"] > 9.5 else 0
            
            corners_over_prob += (corners_over_rate_h2h - 0.5) * corners_adjustment
            corners_under_prob -= (corners_over_rate_h2h - 0.5) * corners_adjustment
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 1
        total = corners_over_prob + corners_under_prob
        corners_over_prob /= total
        corners_under_prob /= total
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Handicap
        goal_diff_expectation = (home_stats['goals_scored_avg'] - away_stats['goals_scored_avg']) + \
                               (away_stats['goals_conceded_avg'] - home_stats['goals_conceded_avg'])
        
        handicap_value = 0
        if goal_diff_expectation > 0.5:
            handicap_value = -0.5 if goal_diff_expectation < 1 else -1
        elif goal_diff_expectation < -0.5:
            handicap_value = 0.5 if goal_diff_expectation > -1 else 1
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        analysis = {
            'fixture_id': fixture['fixture_id'],
            'home_team': home_team,
            'away_team': away_team,
            'kickoff_thai': fixture.get('kickoff_thai', 'N/A'),
            'competition': fixture.get('league_name', 'Unknown'),
            'match_result': {
                'home_win': round(home_win_prob * 100, 1),
                'draw': round(draw_prob * 100, 1),
                'away_win': round(away_win_prob * 100, 1),
                'prediction': 'Home Win' if home_win_prob > max(draw_prob, away_win_prob) else 
                             'Draw' if draw_prob > max(home_win_prob, away_win_prob) else 'Away Win',
                'confidence': round(max(home_win_prob, draw_prob, away_win_prob) * 100, 1)
            },
            'over_under': {
                'line': 2.5,
                'over_prob': round(over_prob * 100, 1),
                'under_prob': round(under_prob * 100, 1),
                'prediction': 'Over' if over_prob > under_prob else 'Under',
                'confidence': round(max(over_prob, under_prob) * 100, 1),
                'expected_goals': round(expected_goals, 1)
            },
            'corners': {
                'total': {
                    'line': 9.5,
                    'over_prob': round(corners_over_prob * 100, 1),
                    'under_prob': round(corners_under_prob * 100, 1),
                    'prediction': 'Over' if corners_over_prob > corners_under_prob else 'Under',
                    'confidence': round(max(corners_over_prob, corners_under_prob) * 100, 1),
                    'expected_corners': round(expected_corners_total, 1)
                },
                'first_half': {
                    'line': 4.5,
                    'over_prob': round(corners_over_prob * 0.9 * 100, 1),  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å
                    'under_prob': round(corners_under_prob * 1.1 * 100, 1),  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å
                    'prediction': 'Over' if corners_over_prob * 0.9 > corners_under_prob * 1.1 else 'Under',
                    'confidence': round(max(corners_over_prob * 0.9, corners_under_prob * 1.1) * 100, 1),
                    'expected_corners': round(expected_corners_first_half, 1)
                },
                'second_half': {
                    'line': 5.5,
                    'over_prob': round(corners_over_prob * 1.1 * 100, 1),  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á
                    'under_prob': round(corners_under_prob * 0.9 * 100, 1),  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á
                    'prediction': 'Over' if corners_over_prob * 1.1 > corners_under_prob * 0.9 else 'Under',
                    'confidence': round(max(corners_over_prob * 1.1, corners_under_prob * 0.9) * 100, 1),
                    'expected_corners': round(expected_corners_second_half, 1)
                }
            },
            'handicap': {
                'line': handicap_value,
                'home_prob': round(home_handicap_prob * 100, 1),
                'away_prob': round(away_handicap_prob * 100, 1),
                'prediction': f"{home_team} {handicap_value}" if home_handicap_prob > away_handicap_prob else f"{away_team} +{abs(handicap_value)}",
                'confidence': round(max(home_handicap_prob, away_handicap_prob) * 100, 1)
            },
            'team_stats': {
                'home': {
                    'win_rate_home': f"{home_stats['home_win_rate']:.0%}",
                    'goals_scored': home_stats['goals_scored_avg'],
                    'goals_conceded': home_stats['goals_conceded_avg'],
                    'corners_for': home_stats['corners_for_avg'],
                    'corners_against': home_stats['corners_against_avg'],
                    'form': home_stats.get('form', 'UNKNOWN'),
                    'league_position': home_stats.get('league_position', 'N/A')
                },
                'away': {
                    'win_rate_away': f"{away_stats['away_win_rate']:.0%}",
                    'goals_scored': away_stats['goals_scored_avg'],
                    'goals_conceded': away_stats['goals_conceded_avg'],
                    'corners_for': away_stats['corners_for_avg'],
                    'corners_against': away_stats['corners_against_avg'],
                    'form': away_stats.get('form', 'UNKNOWN'),
                    'league_position': away_stats.get('league_position', 'N/A')
                }
            },
            'head_to_head': {
                'matches_count': len(h2h['matches']),
                'home_wins': h2h['home_wins'],
                'away_wins': h2h['away_wins'],
                'draws': h2h['draws'],
                'avg_goals': h2h['avg_goals_per_match'],
                'over_2_5_rate': round(h2h['over_2_5_count'] / len(h2h['matches']) * 100, 1) if len(h2h['matches']) > 0 else 0,
                'both_teams_scored_rate': round(h2h['both_teams_scored_count'] / len(h2h['matches']) * 100, 1) if len(h2h['matches']) > 0 else 0,
                'avg_corners': h2h['avg_corners']
            }
        }
        
        return analysis
    
    def analyze_fixtures(self, fixtures: List[Dict]) -> List[Dict]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        analyses = []
        
        for fixture in fixtures:
            analysis = self.analyze_match(fixture)
            analyses.append(analysis)
        
        return analyses

def load_fixtures():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
    try:
        with open('uefa_competitions_fixtures_july_17_18_2025.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        europa_league = data.get('europa_league', [])
        conference_league = data.get('conference_league', [])
        
        return {
            'europa_league': europa_league,
            'conference_league': conference_league
        }
        
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {e}")
        return None

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ UEFA Advanced ML Analyzer - July 17-18, 2025")
    print("=" * 60)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    fixtures = load_fixtures()
    if not fixtures:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á analyzer
    analyzer = UEFAAdvancedMLAnalyzer()
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Europa League
    print("\nüèÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå UEFA Europa League...")
    europa_league_analyses = analyzer.analyze_fixtures(fixtures['europa_league'])
    print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå UEFA Europa League ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(europa_league_analyses)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Conference League
    print("\nüèÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå UEFA Europa Conference League...")
    conference_league_analyses = analyzer.analyze_fixtures(fixtures['conference_league'])
    print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå UEFA Europa Conference League ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(conference_league_analyses)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    output_data = {
        'europa_league': europa_league_analyses,
        'conference_league': conference_league_analyses,
        'analysis_time': datetime.now().isoformat()
    }
    
    with open('uefa_competitions_advanced_ml_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(output_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: uefa_competitions_advanced_ml_analysis.json")
    print(f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")

if __name__ == "__main__":
    main()
