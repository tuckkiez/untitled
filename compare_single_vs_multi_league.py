#!/usr/bin/env python3
"""
üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
Single League (Premier League) vs Multi League (PL + La Liga)
"""

import pandas as pd
import numpy as np
from ultra_predictor_fixed import UltraAdvancedPredictor

def test_single_league():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Premier League ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
    print("üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Single League (Premier League)")
    print("=" * 50)
    
    predictor = UltraAdvancedPredictor()
    data = predictor.load_premier_league_data()
    predictor.train_ensemble_models(data)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    test_matches = [
        ('Arsenal', 'Chelsea'),
        ('Manchester City', 'Liverpool'),
        ('Manchester United', 'Tottenham'),
        ('Newcastle United', 'Brighton'),
        ('Aston Villa', 'West Ham United')
    ]
    
    results = []
    total_confidence = 0
    
    print("\nüéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:")
    for home, away in test_matches:
        result = predictor.predict_match_ultra(home, away)
        results.append(result)
        total_confidence += result['confidence']
        print(f"   {home} vs {away}: {result['prediction']} ({result['confidence']:.1%})")
    
    avg_confidence = total_confidence / len(test_matches)
    
    return {
        'type': 'Single League',
        'data_size': len(data),
        'avg_confidence': avg_confidence,
        'results': results,
        'model_accuracy': getattr(predictor, 'last_ensemble_score', 0.51)
    }

def test_multi_league():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Premier League + La Liga"""
    print("\nüåç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Multi League (PL + La Liga)")
    print("=" * 50)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°
    try:
        combined_data = pd.read_csv('combined_pl_laliga_data.csv')
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(combined_data)} ‡πÄ‡∏Å‡∏°")
    except:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...")
        from add_laliga_data import combine_premier_league_and_laliga
        combined_data = combine_premier_league_and_laliga()
    
    predictor = UltraAdvancedPredictor()
    predictor.train_ensemble_models(combined_data)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    test_matches = [
        ('Arsenal', 'Chelsea'),
        ('Manchester City', 'Liverpool'),
        ('Manchester United', 'Tottenham'),
        ('Newcastle United', 'Brighton'),
        ('Aston Villa', 'West Ham United')
    ]
    
    results = []
    total_confidence = 0
    
    print("\nüéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:")
    for home, away in test_matches:
        result = predictor.predict_match_ultra(home, away)
        results.append(result)
        total_confidence += result['confidence']
        print(f"   {home} vs {away}: {result['prediction']} ({result['confidence']:.1%})")
    
    avg_confidence = total_confidence / len(test_matches)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö La Liga teams
    print("\nüá™üá∏ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡∏° La Liga:")
    laliga_matches = [
        ('Real Madrid', 'FC Barcelona'),
        ('Atletico Madrid', 'Real Sociedad')
    ]
    
    for home, away in laliga_matches:
        result = predictor.predict_match_ultra(home, away)
        print(f"   {home} vs {away}: {result['prediction']} ({result['confidence']:.1%})")
    
    return {
        'type': 'Multi League',
        'data_size': len(combined_data),
        'avg_confidence': avg_confidence,
        'results': results,
        'model_accuracy': getattr(predictor, 'last_ensemble_score', 0.51)
    }

def compare_performance(single_result, multi_result):
    """‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
    print(f"\nüìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
    print("=" * 60)
    
    print(f"üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô:")
    print(f"   Single League: {single_result['data_size']} ‡πÄ‡∏Å‡∏°")
    print(f"   Multi League:  {multi_result['data_size']} ‡πÄ‡∏Å‡∏°")
    print(f"   ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô: +{multi_result['data_size'] - single_result['data_size']} ‡πÄ‡∏Å‡∏° ({((multi_result['data_size'] / single_result['data_size']) - 1) * 100:.1f}%)")
    
    print(f"\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:")
    print(f"   Single League: {single_result['avg_confidence']:.1%}")
    print(f"   Multi League:  {multi_result['avg_confidence']:.1%}")
    
    confidence_diff = multi_result['avg_confidence'] - single_result['avg_confidence']
    if confidence_diff > 0:
        print(f"   ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: +{confidence_diff:.1%}")
    else:
        print(f"   ‚ùå ‡∏•‡∏î‡∏•‡∏á: {confidence_diff:.1%}")
    
    print(f"\nü§ñ ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏•:")
    print(f"   Single League: {single_result['model_accuracy']:.1%}")
    print(f"   Multi League:  {multi_result['model_accuracy']:.1%}")
    
    accuracy_diff = multi_result['model_accuracy'] - single_result['model_accuracy']
    if accuracy_diff > 0:
        print(f"   ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: +{accuracy_diff:.1%}")
    else:
        print(f"   ‚ùå ‡∏•‡∏î‡∏•‡∏á: {accuracy_diff:.1%}")
    
    # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà
    print(f"\nüîç ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà:")
    matches = ['Arsenal vs Chelsea', 'Man City vs Liverpool', 'Man Utd vs Tottenham', 
               'Newcastle vs Brighton', 'Aston Villa vs West Ham']
    
    for i, match in enumerate(matches):
        single_pred = single_result['results'][i]
        multi_pred = multi_result['results'][i]
        
        print(f"   {match}:")
        print(f"     Single: {single_pred['prediction']} ({single_pred['confidence']:.1%})")
        print(f"     Multi:  {multi_pred['prediction']} ({multi_pred['confidence']:.1%})")
        
        if single_pred['prediction'] != multi_pred['prediction']:
            print(f"     üîÑ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô!")
        
        conf_diff = multi_pred['confidence'] - single_pred['confidence']
        if abs(conf_diff) > 0.05:
            if conf_diff > 0:
                print(f"     üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°: +{conf_diff:.1%}")
            else:
                print(f"     üìâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏•‡∏î: {conf_diff:.1%}")

def analyze_data_quality():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    print(f"\nüî¨ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    print("=" * 40)
    
    try:
        combined_data = pd.read_csv('combined_pl_laliga_data.csv')
        
        # ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏•‡∏µ‡∏Å
        pl_data = combined_data[combined_data['league'] == 'Premier League']
        laliga_data = combined_data[combined_data['league'] == 'La Liga']
        
        print(f"üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        print(f"   Premier League: {len(pl_data)} ‡πÄ‡∏Å‡∏° ({len(pl_data)/len(combined_data)*100:.1f}%)")
        print(f"   La Liga: {len(laliga_data)} ‡πÄ‡∏Å‡∏° ({len(laliga_data)/len(combined_data)*100:.1f}%)")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π
        print(f"\n‚öΩ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏ï‡∏π:")
        print(f"   Premier League ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {(pl_data['home_goals'] + pl_data['away_goals']).mean():.2f} ‡∏õ‡∏£‡∏∞‡∏ï‡∏π/‡πÄ‡∏Å‡∏°")
        print(f"   La Liga ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {(laliga_data['home_goals'] + laliga_data['away_goals']).mean():.2f} ‡∏õ‡∏£‡∏∞‡∏ï‡∏π/‡πÄ‡∏Å‡∏°")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        def analyze_results(data, league_name):
            home_wins = len(data[data['home_goals'] > data['away_goals']])
            draws = len(data[data['home_goals'] == data['away_goals']])
            away_wins = len(data[data['home_goals'] < data['away_goals']])
            total = len(data)
            
            print(f"   {league_name}:")
            print(f"     ‡πÄ‡∏à‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ä‡∏ô‡∏∞: {home_wins/total*100:.1f}%")
            print(f"     ‡πÄ‡∏™‡∏°‡∏≠: {draws/total*100:.1f}%")
            print(f"     ‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô‡∏ä‡∏ô‡∏∞: {away_wins/total*100:.1f}%")
        
        print(f"\nüèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô:")
        analyze_results(pl_data, "Premier League")
        analyze_results(laliga_data, "La Liga")
        
    except Exception as e:
        print(f"‚ùå Error analyzing data: {e}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Single vs Multi League")
    print("=" * 70)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    single_result = test_single_league()
    multi_result = test_multi_league()
    
    # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    compare_performance(single_result, multi_result)
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    analyze_data_quality()
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print(f"\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("=" * 40)
    
    if multi_result['avg_confidence'] > single_result['avg_confidence']:
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° La Liga ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    else:
        print("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° La Liga ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à")
    
    if multi_result['model_accuracy'] > single_result['model_accuracy']:
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° La Liga ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    else:
        print("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° La Liga ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    
    print(f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    if (multi_result['avg_confidence'] > single_result['avg_confidence'] and 
        multi_result['model_accuracy'] >= single_result['model_accuracy']):
        print("üü¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Multi League")
        print("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        print("   - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏µ‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡πà‡∏≠‡πÑ‡∏õ")
    else:
        print("üü° ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏µ‡∏Å‡∏≠‡∏∑‡πà‡∏ô")
        print("   - ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö feature engineering")
        print("   - ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏µ‡∏Å")
    
    return single_result, multi_result

if __name__ == "__main__":
    single, multi = main()
