#!/usr/bin/env python3
"""
üöÄ UEFA Europa Competitions Fetcher - July 17, 2025
‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô UEFA Europa League ‡πÅ‡∏•‡∏∞ UEFA Europa Conference League 2025-2026
"""

import requests
import json
from datetime import datetime
import pytz
from typing import Dict, List, Any
import time

class UEFAEuropaCompetitionsFetcher:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api-football-v1.p.rapidapi.com/v3"
        self.headers = {
            'x-rapidapi-host': 'api-football-v1.p.rapidapi.com',
            'x-rapidapi-key': api_key
        }
        
        # UEFA competitions IDs
        self.competitions = {
            3: {"name": "UEFA Europa League", "short_name": "UEL", "flag": "üá™üá∫"},
            848: {"name": "UEFA Europa Conference League", "short_name": "UECL", "flag": "üá™üá∫"}
        }
        
        # Thai timezone for conversion
        self.thai_tz = pytz.timezone('Asia/Bangkok')
        
    def fetch_competition_fixtures(self, league_id: int, season: int = 2025) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏µ‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        url = f"{self.base_url}/fixtures"
        params = {'league': league_id, 'season': season}
        
        try:
            print(f"üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô League ID: {league_id}, Season: {season}...")
            response = requests.get(url, headers=self.headers, params=params, timeout=15)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {data.get('results', 0)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                return data
            else:
                print(f"‚ùå API Error: {response.status_code}")
                return {}
        except Exception as e:
            print(f"üö® Request Error: {e}")
            return {}
    
    def process_fixtures(self, api_data: Dict, competition_info: Dict) -> List[Dict]:
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"""
        if not api_data or 'response' not in api_data:
            return []
        
        processed_fixtures = []
        
        for fixture in api_data['response']:
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            fixture_data = {
                'fixture_id': fixture['fixture']['id'],
                'competition': competition_info['name'],
                'competition_short': competition_info['short_name'],
                'flag': competition_info['flag'],
                'round': fixture['league']['round'],
                'home_team': fixture['teams']['home']['name'],
                'away_team': fixture['teams']['away']['name'],
                'home_id': fixture['teams']['home']['id'],
                'away_id': fixture['teams']['away']['id'],
                'kickoff_utc': fixture['fixture']['date'],
                'venue': f"{fixture['fixture']['venue']['name'] if fixture['fixture']['venue']['name'] else 'TBD'}, {fixture['fixture']['venue']['city'] if fixture['fixture']['venue']['city'] else 'TBD'}",
                'referee': fixture['fixture']['referee'] if fixture['fixture']['referee'] else 'TBA',
                'status': fixture['fixture']['status']['short'],
            }
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô Thai Time
            if fixture_data['kickoff_utc']:
                utc_time = datetime.fromisoformat(fixture_data['kickoff_utc'].replace('Z', '+00:00'))
                thai_time = utc_time.astimezone(self.thai_tz)
                fixture_data['kickoff_thai'] = thai_time.strftime('%Y-%m-%d %H:%M')
                fixture_data['kickoff_thai_time'] = thai_time.strftime('%H:%M')
                fixture_data['match_date'] = thai_time.strftime('%Y-%m-%d')
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            if fixture['fixture']['status']['short'] == 'FT':
                fixture_data['home_goals'] = fixture['goals']['home']
                fixture_data['away_goals'] = fixture['goals']['away']
                fixture_data['score'] = f"{fixture['goals']['home']} - {fixture['goals']['away']}"
                fixture_data['winner'] = fixture['teams']['home']['winner'] and 'home' or fixture['teams']['away']['winner'] and 'away' or 'draw'
            
            processed_fixtures.append(fixture_data)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        processed_fixtures.sort(key=lambda x: x['kickoff_utc'])
        
        return processed_fixtures
    
    def categorize_by_round(self, fixtures: List[Dict]) -> Dict[str, List[Dict]]:
        """‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö"""
        categorized = {}
        
        for fixture in fixtures:
            round_key = fixture['round']
            if round_key not in categorized:
                categorized[round_key] = []
            
            categorized[round_key].append(fixture)
        
        return categorized
    
    def get_competition_summary(self, fixtures: List[Dict]) -> Dict:
        """‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô"""
        if not fixtures:
            return {}
            
        # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö
        rounds = {}
        for fixture in fixtures:
            round_name = fixture['round']
            if round_name not in rounds:
                rounds[round_name] = []
            rounds[round_name].append(fixture)
        
        # ‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_count = {
            'upcoming': len([f for f in fixtures if f['status'] in ['NS', 'TBD']]),
            'finished': len([f for f in fixtures if f['status'] == 'FT']),
            'live': len([f for f in fixtures if f['status'] in ['1H', '2H', 'HT']])
        }
        
        # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        dates = [datetime.fromisoformat(f['kickoff_utc'].replace('Z', '+00:00')) for f in fixtures if f['kickoff_utc']]
        first_match = min(dates).strftime('%Y-%m-%d') if dates else 'N/A'
        last_match = max(dates).strftime('%Y-%m-%d') if dates else 'N/A'
        
        return {
            'competition': fixtures[0]['competition'],
            'total_fixtures': len(fixtures),
            'rounds': {round_name: len(matches) for round_name, matches in rounds.items()},
            'status': status_count,
            'first_match': first_match,
            'last_match': last_match
        }

    def fetch_all_competitions(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô"""
        all_data = {
            'europa_league': [],
            'conference_league': [],
            'summary': {},
            'fetch_time': datetime.now().isoformat()
        }
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Europa League
        print("\nüèÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UEFA Europa League 2025-2026...")
        uel_data = self.fetch_competition_fixtures(3, 2025)
        if uel_data:
            uel_fixtures = self.process_fixtures(uel_data, self.competitions[3])
            all_data['europa_league'] = uel_fixtures
            all_data['europa_league_by_round'] = self.categorize_by_round(uel_fixtures)
            all_data['summary']['europa_league'] = self.get_competition_summary(uel_fixtures)
            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UEFA Europa League ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(uel_fixtures)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ API ‡πÇ‡∏î‡∏ô rate limit
        time.sleep(1)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Europa Conference League
        print("\nüèÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UEFA Europa Conference League 2025-2026...")
        uecl_data = self.fetch_competition_fixtures(848, 2025)
        if uecl_data:
            uecl_fixtures = self.process_fixtures(uecl_data, self.competitions[848])
            all_data['conference_league'] = uecl_fixtures
            all_data['conference_league_by_round'] = self.categorize_by_round(uecl_fixtures)
            all_data['summary']['conference_league'] = self.get_competition_summary(uecl_fixtures)
            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UEFA Europa Conference League ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(uecl_fixtures)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        return all_data

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ UEFA Europa Competitions Fetcher - July 17, 2025")
    print("=" * 60)
    
    # API key ‡∏à‡∏≤‡∏Å RapidAPI
    api_key = "f9cf9a3854mshf30572945114fb4p105c26jsnbbc82dcea9c0"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á fetcher
    fetcher = UEFAEuropaCompetitionsFetcher(api_key)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_data = fetcher.fetch_all_competitions()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
    print("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    
    if 'europa_league' in all_data and all_data['europa_league']:
        uel_summary = all_data['summary']['europa_league']
        print(f"\nüèÜ UEFA Europa League 2025-2026:")
        print(f"   üìÖ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {uel_summary['total_fixtures']} ‡∏ô‡∏±‡∏î")
        print(f"   üóìÔ∏è ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {uel_summary['first_match']} ‡∏ñ‡∏∂‡∏á {uel_summary['last_match']}")
        print(f"   üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß {uel_summary['status']['finished']} ‡∏ô‡∏±‡∏î, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ç‡πà‡∏á {uel_summary['status']['live']} ‡∏ô‡∏±‡∏î, ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° {uel_summary['status']['upcoming']} ‡∏ô‡∏±‡∏î")
        print(f"   üèÖ ‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô:")
        for round_name, count in uel_summary['rounds'].items():
            print(f"      - {round_name}: {count} ‡∏ô‡∏±‡∏î")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UEFA Europa League")
    
    if 'conference_league' in all_data and all_data['conference_league']:
        uecl_summary = all_data['summary']['conference_league']
        print(f"\nüèÜ UEFA Europa Conference League 2025-2026:")
        print(f"   üìÖ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {uecl_summary['total_fixtures']} ‡∏ô‡∏±‡∏î")
        print(f"   üóìÔ∏è ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {uecl_summary['first_match']} ‡∏ñ‡∏∂‡∏á {uecl_summary['last_match']}")
        print(f"   üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß {uecl_summary['status']['finished']} ‡∏ô‡∏±‡∏î, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ç‡πà‡∏á {uecl_summary['status']['live']} ‡∏ô‡∏±‡∏î, ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° {uecl_summary['status']['upcoming']} ‡∏ô‡∏±‡∏î")
        print(f"   üèÖ ‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô:")
        for round_name, count in uecl_summary['rounds'].items():
            print(f"      - {round_name}: {count} ‡∏ô‡∏±‡∏î")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UEFA Europa Conference League")
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    output_file = "uefa_europa_competitions_data.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(all_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: {output_file}")
    print(f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")

if __name__ == "__main__":
    main()
