    def backtest_advanced_ml(self, finished_fixtures: List[Dict], num_matches: int = 20) -> Dict:
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏î‡πâ‡∏ß‡∏¢ Advanced ML"""
        print(f"\nüî¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á Advanced ML {num_matches} ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        sorted_fixtures = sorted(finished_fixtures, key=lambda x: x['fixture']['date'])
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        train_fixtures = sorted_fixtures[:-num_matches]
        test_fixtures = sorted_fixtures[-num_matches:]
        
        print(f"üìö ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô: {len(train_fixtures)} ‡∏ô‡∏±‡∏î")
        print(f"üß™ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {len(test_fixtures)} ‡∏ô‡∏±‡∏î")
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        self.train_models(train_fixtures)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        results = {
            'match_result': {'correct': 0, 'total': 0},
            'handicap': {'correct': 0, 'total': 0},
            'over_under': {'correct': 0, 'total': 0},
            'corner_1st_half': {'correct': 0, 'total': 0},
            'corner_2nd_half': {'correct': 0, 'total': 0},
            'high_confidence': {'correct': 0, 'total': 0},
            'predictions': []
        }
        
        print(f"\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Advanced ML {num_matches} ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        print("=" * 100)
        
        for i, fixture in enumerate(test_fixtures, 1):
            home_team = fixture['teams']['home']['name']
            away_team = fixture['teams']['away']['name']
            home_goals = fixture['goals']['home'] or 0
            away_goals = fixture['goals']['away'] or 0
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            prediction = self.predict_match(home_team, away_team)
            
            if not prediction:
                continue
            
            # ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
            if home_goals > away_goals:
                actual_result = 'Home Win'
            elif home_goals < away_goals:
                actual_result = 'Away Win'
            else:
                actual_result = 'Draw'
            
            total_goals = home_goals + away_goals
            actual_over_under = 'Over 2.5' if total_goals > 2.5 else 'Under 2.5'
            
            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Corner ‡∏à‡∏£‡∏¥‡∏á
            estimated_corners_1st = max(2, min(8, 3 + total_goals * 0.8))
            estimated_corners_2nd = max(2, min(10, 4 + total_goals * 1.0))
            
            actual_corner_1st = 'Over 5 (1st Half)' if estimated_corners_1st > 5 else 'Under 5 (1st Half)'
            actual_corner_2nd = 'Over 5 (2nd Half)' if estimated_corners_2nd > 5 else 'Under 5 (2nd Half)'
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            match_correct = prediction['match_result']['prediction'] == actual_result
            handicap_correct = prediction['handicap']['prediction'] == actual_result
            over_under_correct = prediction['over_under']['prediction'] == actual_over_under
            corner_1st_correct = prediction['corner_1st_half']['prediction'] == actual_corner_1st
            corner_2nd_correct = prediction['corner_2nd_half']['prediction'] == actual_corner_2nd
            
            results['match_result']['correct'] += match_correct
            results['match_result']['total'] += 1
            results['handicap']['correct'] += handicap_correct
            results['handicap']['total'] += 1
            results['over_under']['correct'] += over_under_correct
            results['over_under']['total'] += 1
            results['corner_1st_half']['correct'] += corner_1st_correct
            results['corner_1st_half']['total'] += 1
            results['corner_2nd_half']['correct'] += corner_2nd_correct
            results['corner_2nd_half']['total'] += 1
            
            # High confidence
            avg_confidence = np.mean(list(prediction['confidence_scores'].values()))
            if avg_confidence > 0.7:
                results['high_confidence']['correct'] += match_correct
                results['high_confidence']['total'] += 1
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            status_match = "‚úÖ" if match_correct else "‚ùå"
            status_over_under = "‚úÖ" if over_under_correct else "‚ùå"
            status_corner_1st = "‚úÖ" if corner_1st_correct else "‚ùå"
            status_corner_2nd = "‚úÖ" if corner_2nd_correct else "‚ùå"
            
            print(f"{i:2d}. {home_team:<20} {home_goals}-{away_goals} {away_team:<20}")
            print(f"    üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {prediction['match_result']['prediction']:<10} {status_match}")
            print(f"    ‚öΩ Over/Under: {prediction['over_under']['prediction']:<10} {status_over_under}")
            print(f"    üö© Corner 1st: {prediction['corner_1st_half']['prediction']:<15} {status_corner_1st}")
            print(f"    üö© Corner 2nd: {prediction['corner_2nd_half']['prediction']:<15} {status_corner_2nd}")
            print(f"    üìä Confidence: {avg_confidence:.1%}")
            print()
        
        return results
    
    def print_backtest_summary(self, results: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        print("\n" + "=" * 80)
        print("üèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á J-League 2 Advanced ML")
        print("=" * 80)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
        match_accuracy = (results['match_result']['correct'] / results['match_result']['total']) * 100
        handicap_accuracy = (results['handicap']['correct'] / results['handicap']['total']) * 100
        over_under_accuracy = (results['over_under']['correct'] / results['over_under']['total']) * 100
        corner_1st_accuracy = (results['corner_1st_half']['correct'] / results['corner_1st_half']['total']) * 100
        corner_2nd_accuracy = (results['corner_2nd_half']['correct'] / results['corner_2nd_half']['total']) * 100
        
        print(f"üéØ **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô**: {results['match_result']['correct']}/{results['match_result']['total']} = {match_accuracy:.1f}%")
        print(f"üé≤ **Handicap**: {results['handicap']['correct']}/{results['handicap']['total']} = {handicap_accuracy:.1f}%")
        print(f"‚öΩ **Over/Under 2.5**: {results['over_under']['correct']}/{results['over_under']['total']} = {over_under_accuracy:.1f}%")
        print(f"üö© **Corner ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å (>5)**: {results['corner_1st_half']['correct']}/{results['corner_1st_half']['total']} = {corner_1st_accuracy:.1f}%")
        print(f"üö© **Corner ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á (>5)**: {results['corner_2nd_half']['correct']}/{results['corner_2nd_half']['total']} = {corner_2nd_accuracy:.1f}%")
        
        if results['high_confidence']['total'] > 0:
            high_conf_accuracy = (results['high_confidence']['correct'] / results['high_confidence']['total']) * 100
            print(f"üî• **‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á (>70%)**: {results['high_confidence']['correct']}/{results['high_confidence']['total']} = {high_conf_accuracy:.1f}%")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        avg_accuracy = (match_accuracy + over_under_accuracy + corner_1st_accuracy + corner_2nd_accuracy) / 4
        print(f"\nüìà **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢**: {avg_accuracy:.1f}%")
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        print(f"\nüìä **‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°**:")
        print(f"   ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (ELO): 25.0% | Advanced ML: {match_accuracy:.1f}% | ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á: {match_accuracy-25:.1f}%")
    
    def get_today_matches(self) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
        print(f"\nüìÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ({datetime.now().strftime('%Y-%m-%d')})...")
        
        today = datetime.now().strftime('%Y-%m-%d')
        
        params = {
            'league': self.league_id,
            'season': self.season,
            'date': today
        }
        
        data = self.make_api_request('fixtures', params)
        
        if 'response' in data and data['response']:
            matches = data['response']
            print(f"‚öΩ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ {len(matches)} ‡∏ô‡∏±‡∏î")
            return matches
        else:
            print("üòî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
            
            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            print("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...")
            
            for i in range(1, 8):
                future_date = (datetime.now() + timedelta(days=i)).strftime('%Y-%m-%d')
                params['date'] = future_date
                
                data = self.make_api_request('fixtures', params)
                if 'response' in data and data['response']:
                    matches = data['response']
                    print(f"‚öΩ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {future_date}: {len(matches)} ‡∏ô‡∏±‡∏î")
                    return matches
            
            return []
    
    def predict_today_matches(self, matches: List[Dict]):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
        if not matches:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
            return
        
        if not self.is_trained:
            print("‚ùå ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡∏£‡∏ô")
            return
        
        print(f"\nüîÆ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô J-League 2 ‡∏î‡πâ‡∏ß‡∏¢ Advanced ML")
        print("=" * 100)
        
        for i, match in enumerate(matches, 1):
            home_team = match['teams']['home']['name']
            away_team = match['teams']['away']['name']
            match_date = match['fixture']['date']
            venue = match['fixture']['venue']['name'] if match['fixture']['venue'] else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            prediction = self.predict_match(home_team, away_team)
            
            if not prediction:
                continue
            
            print(f"\nüèüÔ∏è  **‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà {i}**: {home_team} vs {away_team}")
            print(f"üìÖ **‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤**: {match_date}")
            print(f"üèüÔ∏è  **‡∏™‡∏ô‡∏≤‡∏°**: {venue}")
            
            print(f"\nüéØ **‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 5 ‡∏Ñ‡πà‡∏≤**:")
            print(f"   1Ô∏è‚É£ **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô**: {prediction['match_result']['prediction']} ({prediction['confidence_scores']['match_result']:.1%})")
            print(f"   2Ô∏è‚É£ **Handicap**: {prediction['handicap']['prediction']} ({prediction['confidence_scores']['handicap']:.1%})")
            print(f"   3Ô∏è‚É£ **Over/Under**: {prediction['over_under']['prediction']} ({prediction['confidence_scores']['over_under']:.1%})")
            print(f"   4Ô∏è‚É£ **Corner ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å**: {prediction['corner_1st_half']['prediction']} ({prediction['confidence_scores']['corner_1st_half']:.1%})")
            print(f"   5Ô∏è‚É£ **Corner ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á**: {prediction['corner_2nd_half']['prediction']} ({prediction['confidence_scores']['corner_2nd_half']:.1%})")
            
            print(f"\nüìä **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô**:")
            print(f"   üè† {home_team} ‡∏ä‡∏ô‡∏∞: {prediction['match_result']['home_win_prob']:.1%}")
            print(f"   ü§ù ‡πÄ‡∏™‡∏°‡∏≠: {prediction['match_result']['draw_prob']:.1%}")
            print(f"   ‚úàÔ∏è  {away_team} ‡∏ä‡∏ô‡∏∞: {prediction['match_result']['away_win_prob']:.1%}")
            
            # Value Assessment
            avg_confidence = np.mean(list(prediction['confidence_scores'].values()))
            if avg_confidence > 0.7:
                value_status = "üî• **High Value**"
            elif avg_confidence > 0.6:
                value_status = "‚úÖ **Good Value**"
            else:
                value_status = "‚ö†Ô∏è  **Low Value**"
            
            print(f"\nüí∞ **Value Assessment**: {value_status}")
            print(f"üìà **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢**: {avg_confidence:.1%}")
            
            print("-" * 100)

def main():
    # API Key
    API_KEY = "f9cf9a3854mshf30572945114fb4p105c26jsnbbc82dcea9c0"
    
    print("üöÄ J-League 2 Advanced ML Predictor")
    print("=" * 60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á predictor
    predictor = JLeague2AdvancedML(API_KEY)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    finished_fixtures, upcoming_fixtures = predictor.load_fixtures_data()
    
    if not finished_fixtures:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏ó‡∏≥ backtest ‡∏î‡πâ‡∏ß‡∏¢ Advanced ML
    results = predictor.backtest_advanced_ml(finished_fixtures, 20)
    predictor.print_backtest_summary(results)
    
    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    today_matches = predictor.get_today_matches()
    predictor.predict_today_matches(today_matches)
    
    print(f"\nüéâ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print(f"ü§ñ ‡πÇ‡∏°‡πÄ‡∏î‡∏•: Ensemble ML (RF + GB + ET + LR)")

if __name__ == "__main__":
    main()
