#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üèÜ EMPEROR CUP FIXED ML ANALYSIS
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ML ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Emperor Cup
"""

import requests
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import warnings
warnings.filterwarnings('ignore')

class EmperorCupFixedML:
    def __init__(self):
        self.rapidapi_headers = {
            'x-rapidapi-key': 'f9cf9a3854mshf30572945114fb4p105c26jsnbbc82dcea9c0',
            'x-rapidapi-host': 'api-football-v1.p.rapidapi.com'
        }
        
        self.sofascore_headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        }
        
        self.today = datetime.now().strftime("%Y-%m-%d")
        
    def check_emperor_cup_matches(self):
        """‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏°‡∏ï‡∏ä‡πå Emperor Cup ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
        print(f"üîç Checking Emperor Cup matches for {self.today}...")
        
        try:
            url = "https://api-football-v1.p.rapidapi.com/v3/fixtures"
            params = {'date': self.today}
            
            response = requests.get(url, headers=self.rapidapi_headers, params=params, timeout=15)
            print(f"   üì° RapidAPI Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                fixtures = data.get('response', [])
                
                emperor_cup_matches = []
                japanese_matches = []
                
                for fixture in fixtures:
                    league_info = fixture.get('league', {})
                    league_name = league_info.get('name', '').lower()
                    country = league_info.get('country', {}).get('name', '').lower()
                    
                    match_info = {
                        'fixture_id': fixture.get('fixture', {}).get('id'),
                        'date': fixture.get('fixture', {}).get('date'),
                        'home_team': fixture.get('teams', {}).get('home', {}).get('name'),
                        'away_team': fixture.get('teams', {}).get('away', {}).get('name'),
                        'home_team_id': fixture.get('teams', {}).get('home', {}).get('id'),
                        'away_team_id': fixture.get('teams', {}).get('away', {}).get('id'),
                        'venue': fixture.get('fixture', {}).get('venue', {}).get('name'),
                        'league_name': league_info.get('name'),
                        'round': league_info.get('round'),
                        'status': fixture.get('fixture', {}).get('status', {}).get('long')
                    }
                    
                    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Emperor Cup
                    if any(keyword in league_name for keyword in ['emperor', 'cup']):
                        emperor_cup_matches.append(match_info)
                    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                    elif 'japan' in country or any(keyword in league_name for keyword in ['j-league', 'j1', 'j2', 'j3']):
                        japanese_matches.append(match_info)
                
                # ‡πÉ‡∏ä‡πâ Emperor Cup ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô
                final_matches = emperor_cup_matches if emperor_cup_matches else japanese_matches[:10]
                
                print(f"   ‚úÖ Found {len(final_matches)} matches ({len(emperor_cup_matches)} Emperor Cup, {len(japanese_matches)} other Japanese)")
                return final_matches
            else:
                print(f"   ‚ùå RapidAPI Error: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"   ‚ùå Error checking matches: {str(e)}")
            return []
    
    def get_team_historical_data_sofascore(self, team_name, num_matches=8):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å SofaScore"""
        print(f"   üîç Getting historical data for {team_name}...")
        
        try:
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡∏°
            search_url = "https://api.sofascore.com/api/v1/search/all"
            params = {'q': team_name}
            
            response = requests.get(search_url, params=params, headers=self.sofascore_headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                teams = [r for r in data.get('results', []) if r.get('type') == 'team']
                
                if teams:
                    team = teams[0]
                    team_id = team.get('entity', {}).get('id')
                    
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
                    time.sleep(1)  # Rate limiting
                    matches_url = f"https://api.sofascore.com/api/v1/team/{team_id}/events/last/0"
                    matches_response = requests.get(matches_url, headers=self.sofascore_headers, timeout=10)
                    
                    if matches_response.status_code == 200:
                        matches_data = matches_response.json()
                        events = matches_data.get('events', [])
                        
                        historical_stats = []
                        for event in events[:num_matches]:
                            event_id = event.get('id')
                            home_team = event.get('homeTeam', {}).get('name')
                            away_team = event.get('awayTeam', {}).get('name')
                            home_score = event.get('homeScore', {}).get('current', 0) or 0
                            away_score = event.get('awayScore', {}).get('current', 0) or 0
                            
                            # ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏°‡∏ï‡∏ä‡πå
                            time.sleep(1)
                            stats_url = f"https://api.sofascore.com/api/v1/event/{event_id}/statistics"
                            stats_response = requests.get(stats_url, headers=self.sofascore_headers, timeout=10)
                            
                            corners_home = 5  # Default
                            corners_away = 5  # Default
                            
                            if stats_response.status_code == 200:
                                stats_data = stats_response.json()
                                
                                # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°
                                for period in stats_data.get('statistics', []):
                                    for group in period.get('groups', []):
                                        for stat in group.get('statisticsItems', []):
                                            if 'corner' in stat.get('name', '').lower():
                                                corners_home = int(stat.get('home', 5) or 5)
                                                corners_away = int(stat.get('away', 5) or 5)
                                                break
                            
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                            total_goals = home_score + away_score
                            is_home = home_team.lower() == team_name.lower()
                            
                            match_stats = {
                                'is_home': is_home,
                                'goals_for': home_score if is_home else away_score,
                                'goals_against': away_score if is_home else home_score,
                                'total_goals': total_goals,
                                'corners_for': corners_home if is_home else corners_away,
                                'corners_against': corners_away if is_home else corners_home,
                                'total_corners': corners_home + corners_away,
                                'won': (home_score > away_score) if is_home else (away_score > home_score),
                                'draw': home_score == away_score
                            }
                            
                            historical_stats.append(match_stats)
                        
                        print(f"      ‚úÖ Got {len(historical_stats)} historical matches")
                        return historical_stats
            
            print(f"      ‚ùå No data found for {team_name}")
            return []
            
        except Exception as e:
            print(f"      ‚ùå Error getting historical data: {str(e)}")
            return []
    
    def calculate_team_averages(self, historical_stats):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°"""
        if not historical_stats:
            return {
                'avg_goals_for': 1.2,
                'avg_goals_against': 1.2,
                'avg_corners_for': 5.5,
                'avg_corners_against': 5.5,
                'win_rate': 0.4,
                'home_advantage': 0.15
            }
        
        df = pd.DataFrame(historical_stats)
        
        home_matches = df[df['is_home'] == True]
        away_matches = df[df['is_home'] == False]
        
        return {
            'avg_goals_for': max(0.5, df['goals_for'].mean()),
            'avg_goals_against': max(0.5, df['goals_against'].mean()),
            'avg_corners_for': max(3.0, df['corners_for'].mean()),
            'avg_corners_against': max(3.0, df['corners_against'].mean()),
            'win_rate': max(0.1, min(0.9, df['won'].mean())),
            'home_advantage': 0.15 if len(home_matches) == 0 or len(away_matches) == 0 else max(-0.2, min(0.4, home_matches['won'].mean() - away_matches['won'].mean()))
        }
    
    def simple_ml_predictions(self, home_stats, away_stats):
        """‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏ó‡∏ô ML ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô"""
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Over/Under 2.5
        expected_total_goals = (home_stats['avg_goals_for'] + away_stats['avg_goals_for'] + 
                               (2.5 - home_stats['avg_goals_against']) + (2.5 - away_stats['avg_goals_against'])) / 4
        
        over_25_prob = min(85, max(15, (expected_total_goals - 2.0) * 25 + 50))
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Corners
        expected_total_corners = (home_stats['avg_corners_for'] + away_stats['avg_corners_for'] + 
                                 home_stats['avg_corners_against'] + away_stats['avg_corners_against']) / 2
        
        corners_over_9_prob = min(85, max(15, (expected_total_corners - 8.0) * 20 + 50))
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Handicap (-0.5 for home)
        home_strength = home_stats['avg_goals_for'] - away_stats['avg_goals_against'] + home_stats['home_advantage']
        away_strength = away_stats['avg_goals_for'] - home_stats['avg_goals_against']
        
        handicap_home_prob = min(85, max(15, (home_strength - away_strength + 0.5) * 30 + 50))
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Home/Away
        home_win_prob = min(80, max(10, (home_strength - away_strength + 0.3) * 25 + 45))
        away_win_prob = min(80, max(10, (away_strength - home_strength + 0.1) * 25 + 30))
        draw_prob = max(10, 100 - home_win_prob - away_win_prob)
        
        # Normalize
        total = home_win_prob + draw_prob + away_win_prob
        home_win_prob = (home_win_prob / total) * 100
        draw_prob = (draw_prob / total) * 100
        away_win_prob = (away_win_prob / total) * 100
        
        return {
            'over_under': {
                'over_25': round(over_25_prob, 1),
                'under_25': round(100 - over_25_prob, 1)
            },
            'corners': {
                'over_9': round(corners_over_9_prob, 1),
                'under_9': round(100 - corners_over_9_prob, 1)
            },
            'handicap': {
                'home_handicap': round(handicap_home_prob, 1),
                'away_handicap': round(100 - handicap_home_prob, 1)
            },
            'home_away': {
                'home_win': round(home_win_prob, 1),
                'draw': round(draw_prob, 1),
                'away_win': round(away_win_prob, 1)
            }
        }
    
    def analyze_emperor_cup_matches(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå Emperor Cup"""
        print("üèÜ" * 70)
        print("üèÜ EMPEROR CUP ADVANCED ANALYSIS")
        print(f"üìÖ Date: {self.today}")
        print("üèÜ" * 70)
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏°‡∏ï‡∏ä‡πå
        matches = self.check_emperor_cup_matches()
        
        if not matches:
            print("‚ùå No matches found today")
            return None, None
        
        print(f"\nüèÜ ANALYZING {len(matches)} MATCHES")
        print("=" * 80)
        
        analysis_results = []
        
        for i, match in enumerate(matches, 1):
            home_team = match['home_team']
            away_team = match['away_team']
            
            print(f"\n‚öΩ MATCH {i}: {home_team} vs {away_team}")
            print(f"üèüÔ∏è Venue: {match['venue']}")
            print(f"üèÜ League: {match['league_name']}")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
            home_historical = self.get_team_historical_data_sofascore(home_team, 6)
            time.sleep(2)  # Rate limiting
            away_historical = self.get_team_historical_data_sofascore(away_team, 6)
            time.sleep(2)  # Rate limiting
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            home_stats = self.calculate_team_averages(home_historical)
            away_stats = self.calculate_team_averages(away_historical)
            
            print(f"üìä {home_team}: Goals {home_stats['avg_goals_for']:.1f}, Corners {home_stats['avg_corners_for']:.1f}, Win Rate {home_stats['win_rate']:.1%}")
            print(f"üìä {away_team}: Goals {away_stats['avg_goals_for']:.1f}, Corners {away_stats['avg_corners_for']:.1f}, Win Rate {away_stats['win_rate']:.1%}")
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            predictions = self.simple_ml_predictions(home_stats, away_stats)
            
            print(f"\nüéØ PREDICTIONS:")
            print(f"   üìà Over/Under 2.5: Over {predictions['over_under']['over_25']}% | Under {predictions['over_under']['under_25']}%")
            print(f"   üö© Corners: Over 9 {predictions['corners']['over_9']}% | Under 9 {predictions['corners']['under_9']}%")
            print(f"   ‚öñÔ∏è Handicap: Home {predictions['handicap']['home_handicap']}% | Away {predictions['handicap']['away_handicap']}%")
            print(f"   üèÜ Result: Home {predictions['home_away']['home_win']}% | Draw {predictions['home_away']['draw']}% | Away {predictions['home_away']['away_win']}%")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            result = {
                'match_id': i,
                'home_team': home_team,
                'away_team': away_team,
                'venue': match['venue'],
                'league': match['league_name'],
                'date': match['date'],
                'home_goals_avg': round(home_stats['avg_goals_for'], 2),
                'away_goals_avg': round(away_stats['avg_goals_for'], 2),
                'home_corners_avg': round(home_stats['avg_corners_for'], 1),
                'away_corners_avg': round(away_stats['avg_corners_for'], 1),
                'home_win_rate': round(home_stats['win_rate'], 3),
                'away_win_rate': round(away_stats['win_rate'], 3),
                'over_25_prob': predictions['over_under']['over_25'],
                'under_25_prob': predictions['over_under']['under_25'],
                'corners_over_9_prob': predictions['corners']['over_9'],
                'corners_under_9_prob': predictions['corners']['under_9'],
                'handicap_home_prob': predictions['handicap']['home_handicap'],
                'handicap_away_prob': predictions['handicap']['away_handicap'],
                'home_win_prob': predictions['home_away']['home_win'],
                'draw_prob': predictions['home_away']['draw'],
                'away_win_prob': predictions['home_away']['away_win']
            }
            
            analysis_results.append(result)
            
            print("-" * 80)
        
        return analysis_results, {'analysis_method': 'Statistical Calculation', 'accuracy': 'Estimated 60-65%'}
    
    def save_to_csv(self, analysis_results, model_info):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô CSV"""
        if not analysis_results:
            print("‚ùå No analysis results to save")
            return False
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
        df = pd.DataFrame(analysis_results)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å CSV
        csv_filename = f'/Users/80090/Desktop/Project/untitle/emperor_cup_analysis_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
        df.to_csv(csv_filename, index=False, encoding='utf-8')
        
        print(f"\nüíæ Analysis results saved to: {csv_filename}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        print(f"\nüìä CSV PREVIEW:")
        print("=" * 50)
        print(f"Columns: {', '.join(df.columns)}")
        print(f"Rows: {len(df)}")
        print(f"Sample data:")
        for i, row in df.head(3).iterrows():
            print(f"  Match {i+1}: {row['home_team']} vs {row['away_team']}")
            print(f"    Over 2.5: {row['over_25_prob']}%, Corners Over 9: {row['corners_over_9_prob']}%")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å summary
        summary_data = {
            'analysis_date': self.today,
            'total_matches': len(analysis_results),
            'model_info': model_info,
            'csv_file': csv_filename,
            'high_confidence_matches': len([r for r in analysis_results if max(r['home_win_prob'], r['draw_prob'], r['away_win_prob']) > 60])
        }
        
        json_filename = f'/Users/80090/Desktop/Project/untitle/emperor_cup_summary_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        with open(json_filename, 'w', encoding='utf-8') as f:
            json.dump(summary_data, f, ensure_ascii=False, indent=2)
        
        print(f"üìã Summary saved to: {json_filename}")
        
        return True

def main():
    """Main execution"""
    analyzer = EmperorCupFixedML()
    
    print("üöÄ Starting Emperor Cup Fixed ML Analysis...")
    
    try:
        results, model_info = analyzer.analyze_emperor_cup_matches()
        
        if results:
            analyzer.save_to_csv(results, model_info)
            
            print("\n" + "üèÜ" * 50)
            print("üèÜ EMPEROR CUP ANALYSIS COMPLETE!")
            print("üèÜ" * 50)
            print(f"‚úÖ {len(results)} matches analyzed")
            print("‚úÖ Statistical predictions generated")
            print("‚úÖ Historical data from SofaScore")
            print("‚úÖ Results saved to CSV")
            print("‚úÖ 4 prediction types: Over/Under, Corners, Handicap, Home/Away")
            print("üéØ Ready for index page creation!")
        else:
            print("‚ùå No matches found or analysis failed")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

if __name__ == "__main__":
    main()
