#!/usr/bin/env python3
"""
üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Advanced ML System
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô + Handicap + Over/Under + Corners
"""

import pandas as pd
import numpy as np
import sys
import os

# Import Advanced ML System
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_advanced_ml_premier_league():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Advanced ML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Premier League"""
    print("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Advanced ML System - Premier League")
    print("=" * 70)
    
    # Import ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° helper methods
    from advanced_ml_predictor import AdvancedMLPredictor
    from advanced_ml_helpers import add_helper_methods
    add_helper_methods()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á predictor
    predictor = AdvancedMLPredictor("Premier League")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    data = predictor.load_real_data()
    if data is None:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return None
    
    # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
    success = predictor.train_advanced_models(data)
    if not success:
        print("‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return None
    
    print(f"\nüéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:")
    print("=" * 50)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    test_matches = [
        ('Arsenal FC', 'Chelsea FC'),
        ('Manchester City FC', 'Liverpool FC'),
        ('Manchester United FC', 'Tottenham Hotspur FC'),
        ('Newcastle United FC', 'Brighton & Hove Albion FC'),
        ('Aston Villa FC', 'West Ham United FC')
    ]
    
    results = []
    
    for home, away in test_matches:
        print(f"\n‚öΩ {home} vs {away}")
        print("-" * 40)
        
        result = predictor.predict_comprehensive(home, away)
        
        if result:
            results.append(result)
            
            # ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
            match_result = result['match_result']
            print(f"üèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {match_result['prediction']} ({match_result['confidence']:.1%})")
            probs = match_result['probabilities']
            print(f"   üìä {home}: {probs['Home Win']:.1%} | ‡πÄ‡∏™‡∏°‡∏≠: {probs['Draw']:.1%} | {away}: {probs['Away Win']:.1%}")
            
            # Handicap
            handicap = result['handicap']
            print(f"üé≤ Handicap: {handicap['prediction']} ({handicap['confidence']:.1%})")
            
            # Over/Under
            ou = result['over_under']
            print(f"‚öΩ Over/Under 2.5: {ou['prediction']} ({ou['confidence']:.1%})")
            
            # Corners
            corners = result['corners']
            print(f"ü•Ö Corners Total: {corners['total_prediction']} 10")
            print(f"ü•Ö Corners First Half: {corners['first_half_prediction']} 5")
            print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {corners['confidence']:.1%}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    if results:
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Advanced ML:")
        print("=" * 50)
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        match_confidences = [r['match_result']['confidence'] for r in results]
        handicap_confidences = [r['handicap']['confidence'] for r in results]
        ou_confidences = [r['over_under']['confidence'] for r in results]
        corners_confidences = [r['corners']['confidence'] for r in results]
        
        print(f"‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(results)} ‡∏Ñ‡∏π‡πà")
        print(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:")
        print(f"   üèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {np.mean(match_confidences):.1%}")
        print(f"   üé≤ Handicap: {np.mean(handicap_confidences):.1%}")
        print(f"   ‚öΩ Over/Under: {np.mean(ou_confidences):.1%}")
        print(f"   ü•Ö Corners: {np.mean(corners_confidences):.1%}")
        
        # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        match_predictions = [r['match_result']['prediction'] for r in results]
        handicap_predictions = [r['handicap']['prediction'] for r in results]
        ou_predictions = [r['over_under']['prediction'] for r in results]
        
        print(f"\nüìã ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
        print(f"üèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô:")
        print(f"   Home Win: {match_predictions.count('Home Win')} ‡∏Ñ‡∏π‡πà")
        print(f"   Draw: {match_predictions.count('Draw')} ‡∏Ñ‡∏π‡πà")
        print(f"   Away Win: {match_predictions.count('Away Win')} ‡∏Ñ‡∏π‡πà")
        
        print(f"üé≤ Handicap:")
        print(f"   Home Win: {handicap_predictions.count('Home Win')} ‡∏Ñ‡∏π‡πà")
        print(f"   Away Win: {handicap_predictions.count('Away Win')} ‡∏Ñ‡∏π‡πà")
        print(f"   Push: {handicap_predictions.count('Push')} ‡∏Ñ‡∏π‡πà")
        
        print(f"‚öΩ Over/Under:")
        print(f"   Over: {ou_predictions.count('Over')} ‡∏Ñ‡∏π‡πà")
        print(f"   Under: {ou_predictions.count('Under')} ‡∏Ñ‡∏π‡πà")
        
        return results
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        return None

def test_advanced_ml_laliga():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Advanced ML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö La Liga"""
    print("\nüöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Advanced ML System - La Liga")
    print("=" * 70)
    
    # Import ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° helper methods
    from advanced_ml_predictor import AdvancedMLPredictor
    from advanced_ml_helpers import add_helper_methods
    add_helper_methods()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á predictor
    predictor = AdvancedMLPredictor("La Liga")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    data = predictor.load_real_data()
    if data is None:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return None
    
    # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
    success = predictor.train_advanced_models(data)
    if not success:
        print("‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return None
    
    print(f"\nüéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:")
    print("=" * 50)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    test_matches = [
        ('Real Madrid CF', 'FC Barcelona'),
        ('Club Atl√©tico de Madrid', 'Real Sociedad de F√∫tbol'),
        ('Sevilla FC', 'Valencia CF'),
        ('Athletic Club', 'Real Betis Balompi√©'),
        ('Villarreal CF', 'Girona FC')
    ]
    
    results = []
    
    for home, away in test_matches:
        print(f"\n‚öΩ {home} vs {away}")
        print("-" * 40)
        
        result = predictor.predict_comprehensive(home, away)
        
        if result:
            results.append(result)
            
            # ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
            match_result = result['match_result']
            print(f"üèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {match_result['prediction']} ({match_result['confidence']:.1%})")
            probs = match_result['probabilities']
            print(f"   üìä {home}: {probs['Home Win']:.1%} | ‡πÄ‡∏™‡∏°‡∏≠: {probs['Draw']:.1%} | {away}: {probs['Away Win']:.1%}")
            
            # Handicap
            handicap = result['handicap']
            print(f"üé≤ Handicap: {handicap['prediction']} ({handicap['confidence']:.1%})")
            
            # Over/Under
            ou = result['over_under']
            print(f"‚öΩ Over/Under 2.5: {ou['prediction']} ({ou['confidence']:.1%})")
            
            # Corners
            corners = result['corners']
            print(f"ü•Ö Corners Total: {corners['total_prediction']} 10")
            print(f"ü•Ö Corners First Half: {corners['first_half_prediction']} 5")
            print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {corners['confidence']:.1%}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    if results:
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Advanced ML:")
        print("=" * 50)
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        match_confidences = [r['match_result']['confidence'] for r in results]
        handicap_confidences = [r['handicap']['confidence'] for r in results]
        ou_confidences = [r['over_under']['confidence'] for r in results]
        corners_confidences = [r['corners']['confidence'] for r in results]
        
        print(f"‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(results)} ‡∏Ñ‡∏π‡πà")
        print(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:")
        print(f"   üèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {np.mean(match_confidences):.1%}")
        print(f"   üé≤ Handicap: {np.mean(handicap_confidences):.1%}")
        print(f"   ‚öΩ Over/Under: {np.mean(ou_confidences):.1%}")
        print(f"   ü•Ö Corners: {np.mean(corners_confidences):.1%}")
        
        return results
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        return None

def compare_advanced_vs_simple():
    """‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Advanced ML vs Simple System"""
    print(f"\nüìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Advanced ML vs Simple System")
    print("=" * 70)
    
    print(f"üîç ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:")
    print(f"\nüìà Simple System (ELO + Basic Features):")
    print(f"   üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø Premier League: 55.0% accuracy")
    print(f"   üá™üá∏ La Liga: 55.0% accuracy")
    print(f"   üìä ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")
    print(f"   üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: ~53%")
    
    print(f"\nüöÄ Advanced ML System:")
    print(f"   ü§ñ 8 ML Models + Ensemble")
    print(f"   üìä 35+ Advanced Features")
    print(f"   üéØ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô 4 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
    print(f"      - ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")
    print(f"      - Handicap")
    print(f"      - Over/Under 2.5")
    print(f"      - Corners (Total + First Half)")
    print(f"   üí™ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô")
    
    print(f"\n‚úÖ ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á Advanced ML:")
    print(f"   üé≤ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Handicap ‡πÑ‡∏î‡πâ")
    print(f"   ‚öΩ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Over/Under ‡πÑ‡∏î‡πâ")
    print(f"   ü•Ö ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Corners ‡πÑ‡∏î‡πâ")
    print(f"   üß† ‡πÉ‡∏ä‡πâ Neural Networks")
    print(f"   üìà Features ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤")
    print(f"   üîß Hyperparameter Tuning")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ Advanced ML Football Predictor Testing")
    print("ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö ML ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á")
    print("=" * 70)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Premier League
    pl_results = test_advanced_ml_premier_league()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö La Liga
    laliga_results = test_advanced_ml_laliga()
    
    # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    compare_advanced_vs_simple()
    
    print(f"\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Advanced ML System ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    
    if pl_results and laliga_results:
        print(f"‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö Advanced ML ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        print(f"üéØ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô 4 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
        print(f"üìä ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á 380 ‡πÄ‡∏Å‡∏°/‡∏•‡∏µ‡∏Å")
        print(f"ü§ñ 8 ML Models + Advanced Features")
    else:
        print(f"‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
    
    return pl_results, laliga_results

if __name__ == "__main__":
    pl_results, laliga_results = main()
