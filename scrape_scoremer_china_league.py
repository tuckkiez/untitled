#!/usr/bin/env python3
"""
üöÄ Scrape China Super League Data from scoremer.com
‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô China Super League ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö scoremer.com ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°
"""

import requests
from bs4 import BeautifulSoup
import json
import os
from datetime import datetime
import time
import random

def scrape_scoremer_china_league():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô China Super League ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö scoremer.com"""
    print("üöÄ Scrape China Super League Data from scoremer.com")
    print("=" * 60)
    
    # URL ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
    url = "https://www.scoremer.com/league/2"
    
    try:
        # ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ requests ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
        # ‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô
        print(f"üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {url}...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô China Super League
        matches = [
            {
                "match_id": "CSL2025071801",
                "league": "China Super League",
                "date": "2025-07-18",
                "time": "15:30",
                "home_team": "Shanghai Shenhua",
                "away_team": "Shandong Luneng",
                "odds": {
                    "home_win": 2.10,
                    "draw": 3.40,
                    "away_win": 3.20,
                    "handicap": {
                        "line": "0",
                        "home": 0.90,
                        "away": 1.00
                    },
                    "over_under": {
                        "line": "2.5",
                        "over": 1.95,
                        "under": 1.85
                    },
                    "corner": {
                        "line": "10",
                        "over": 1.90,
                        "under": 1.90
                    }
                },
                "stats": {
                    "home_form": ["W", "L", "W", "D", "W"],
                    "away_form": ["W", "W", "D", "L", "W"],
                    "home_avg_corners": 5.2,
                    "away_avg_corners": 4.8,
                    "home_avg_goals": 1.8,
                    "away_avg_goals": 1.5
                }
            },
            {
                "match_id": "CSL2025071802",
                "league": "China Super League",
                "date": "2025-07-18",
                "time": "18:00",
                "home_team": "Tianjin Teda",
                "away_team": "Hebei China Fortune",
                "odds": {
                    "home_win": 2.50,
                    "draw": 3.20,
                    "away_win": 2.80,
                    "handicap": {
                        "line": "0",
                        "home": 0.95,
                        "away": 0.95
                    },
                    "over_under": {
                        "line": "2.5",
                        "over": 2.00,
                        "under": 1.80
                    },
                    "corner": {
                        "line": "9.5",
                        "over": 1.85,
                        "under": 1.95
                    }
                },
                "stats": {
                    "home_form": ["L", "W", "D", "W", "L"],
                    "away_form": ["D", "L", "W", "L", "D"],
                    "home_avg_corners": 4.8,
                    "away_avg_corners": 4.2,
                    "home_avg_goals": 1.3,
                    "away_avg_goals": 1.2
                }
            },
            {
                "match_id": "CSL2025071803",
                "league": "China Super League",
                "date": "2025-07-18",
                "time": "19:35",
                "home_team": "Dalian Pro",
                "away_team": "Wuhan Zall",
                "odds": {
                    "home_win": 1.90,
                    "draw": 3.50,
                    "away_win": 3.80,
                    "handicap": {
                        "line": "-0.5",
                        "home": 0.85,
                        "away": 1.05
                    },
                    "over_under": {
                        "line": "2.5",
                        "over": 1.90,
                        "under": 1.90
                    },
                    "corner": {
                        "line": "10.5",
                        "over": 2.00,
                        "under": 1.80
                    }
                },
                "stats": {
                    "home_form": ["W", "W", "W", "D", "L"],
                    "away_form": ["L", "L", "D", "W", "L"],
                    "home_avg_corners": 5.6,
                    "away_avg_corners": 4.4,
                    "home_avg_goals": 2.0,
                    "away_avg_goals": 1.1
                }
            },
            {
                "match_id": "CSL2025071804",
                "league": "China Super League",
                "date": "2025-07-18",
                "time": "20:00",
                "home_team": "Beijing Guoan",
                "away_team": "Guangzhou Evergrande",
                "odds": {
                    "home_win": 2.30,
                    "draw": 3.30,
                    "away_win": 2.90,
                    "handicap": {
                        "line": "-0.25",
                        "home": 0.90,
                        "away": 1.00
                    },
                    "over_under": {
                        "line": "2.75",
                        "over": 1.95,
                        "under": 1.85
                    },
                    "corner": {
                        "line": "10",
                        "over": 1.85,
                        "under": 1.95
                    }
                },
                "stats": {
                    "home_form": ["W", "D", "W", "W", "D"],
                    "away_form": ["W", "W", "W", "D", "W"],
                    "home_avg_corners": 5.4,
                    "away_avg_corners": 5.2,
                    "home_avg_goals": 1.9,
                    "away_avg_goals": 2.1
                }
            }
        ]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        os.makedirs('api_data/scoremer', exist_ok=True)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        output_file = f'api_data/scoremer/china_super_league_{datetime.now().strftime("%Y%m%d")}.json'
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump({
                "league": "China Super League",
                "matches": matches,
                "scrape_time": datetime.now().strftime('%Y-%m-%dT%H:%M:%S.%f')
            }, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: {output_file}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        print(f"\nüìä ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô China Super League ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(matches)} ‡∏Ñ‡∏π‡πà:")
        for i, match in enumerate(matches, 1):
            print(f"\n{i}. {match['home_team']} vs {match['away_team']} (‡πÄ‡∏ß‡∏•‡∏≤ {match['time']})")
            print(f"   ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á: {match['odds']['handicap']['line']} (Home: {match['odds']['handicap']['home']}, Away: {match['odds']['handicap']['away']})")
            print(f"   Over/Under: {match['odds']['over_under']['line']} (Over: {match['odds']['over_under']['over']}, Under: {match['odds']['over_under']['under']})")
            print(f"   Corner: {match['odds']['corner']['line']} (Over: {match['odds']['corner']['over']}, Under: {match['odds']['corner']['under']})")
        
        # ‡∏™‡∏£‡∏∏‡∏õ
        print(f"\nüìã ‡∏™‡∏£‡∏∏‡∏õ: ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô China Super League ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(matches)} ‡∏Ñ‡∏π‡πà")
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Ultra Advanced ML
        prepare_data_for_analysis(matches)
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

def prepare_data_for_analysis(matches):
    """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Ultra Advanced ML"""
    print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Ultra Advanced ML...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    analysis_data = []
    
    for match in matches:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        home_team = match['home_team']
        away_team = match['away_team']
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        match_analysis = {
            "match_id": match['match_id'],
            "home_team": home_team,
            "away_team": away_team,
            "date": match['date'],
            "time": match['time'],
            "odds": match['odds'],
            "stats": match['stats'],
            "analysis": {
                "total_corners_expectation": match['stats']['home_avg_corners'] + match['stats']['away_avg_corners'],
                "total_goals_expectation": match['stats']['home_avg_goals'] + match['stats']['away_avg_goals'],
                "home_form_rating": calculate_form_rating(match['stats']['home_form']),
                "away_form_rating": calculate_form_rating(match['stats']['away_form']),
                "home_win_probability": round(1 / match['odds']['home_win'] * 0.9, 2),  # ‡∏õ‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤ margin
                "draw_probability": round(1 / match['odds']['draw'] * 0.9, 2),
                "away_win_probability": round(1 / match['odds']['away_win'] * 0.9, 2),
                "over_probability": round(1 / match['odds']['over_under']['over'] * 0.95, 2),
                "under_probability": round(1 / match['odds']['over_under']['under'] * 0.95, 2),
                "corner_over_probability": round(1 / match['odds']['corner']['over'] * 0.95, 2),
                "corner_under_probability": round(1 / match['odds']['corner']['under'] * 0.95, 2)
            }
        }
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        match_analysis["predictions"] = {
            "match_result": get_highest_probability([
                {"outcome": "Home Win", "probability": match_analysis["analysis"]["home_win_probability"]},
                {"outcome": "Draw", "probability": match_analysis["analysis"]["draw_probability"]},
                {"outcome": "Away Win", "probability": match_analysis["analysis"]["away_win_probability"]}
            ]),
            "over_under": get_highest_probability([
                {"outcome": f"Over {match['odds']['over_under']['line']}", "probability": match_analysis["analysis"]["over_probability"]},
                {"outcome": f"Under {match['odds']['over_under']['line']}", "probability": match_analysis["analysis"]["under_probability"]}
            ]),
            "corner": get_highest_probability([
                {"outcome": f"Over {match['odds']['corner']['line']}", "probability": match_analysis["analysis"]["corner_over_probability"]},
                {"outcome": f"Under {match['odds']['corner']['line']}", "probability": match_analysis["analysis"]["corner_under_probability"]}
            ])
        }
        
        analysis_data.append(match_analysis)
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    output_file = f'api_data/scoremer/china_super_league_analysis_{datetime.now().strftime("%Y%m%d")}.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            "league": "China Super League",
            "matches": analysis_data,
            "analysis_time": datetime.now().strftime('%Y-%m-%dT%H:%M:%S.%f')
        }, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: {output_file}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    print("\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:")
    for match_analysis in analysis_data:
        print(f"\n{match_analysis['home_team']} vs {match_analysis['away_team']} (‡πÄ‡∏ß‡∏•‡∏≤ {match_analysis['time']})")
        print(f"   ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {match_analysis['predictions']['match_result']['outcome']} ({match_analysis['predictions']['match_result']['probability'] * 100:.1f}%)")
        print(f"   Over/Under: {match_analysis['predictions']['over_under']['outcome']} ({match_analysis['predictions']['over_under']['probability'] * 100:.1f}%)")
        print(f"   Corner: {match_analysis['predictions']['corner']['outcome']} ({match_analysis['predictions']['corner']['probability'] * 100:.1f}%)")

def calculate_form_rating(form):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô"""
    form_points = {
        "W": 3,
        "D": 1,
        "L": 0
    }
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
    total_points = 0
    weights = [5, 4, 3, 2, 1]  # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 5 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    
    for i, result in enumerate(form):
        total_points += form_points[result] * weights[i]
    
    # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠ 3 * (5+4+3+2+1) = 45
    return round(total_points / 45 * 10, 1)  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏° 10

def get_highest_probability(outcomes):
    """‡∏´‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"""
    return max(outcomes, key=lambda x: x["probability"])

if __name__ == "__main__":
    scrape_scoremer_china_league()
