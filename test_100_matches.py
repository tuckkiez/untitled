#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å 100 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
"""

from enhanced_predictor_fixed import EnhancedFootballPredictorFixed
from football_predictor import FootballPredictor
from real_data_example import RealDataPredictor
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

class Comprehensive100MatchTest:
    def __init__(self):
        self.api_token = "052fd4885cf943ad859c89cef542e2e5"
        self.enhanced_predictor = None
        self.basic_predictor = None
        self.historical_data = None
        
    def load_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö 100 ‡πÄ‡∏Å‡∏°...")
        
        real_predictor = RealDataPredictor(api_key=self.api_token)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•
        data_2024 = real_predictor.get_premier_league_data(season=2024)
        data_2023 = real_predictor.get_premier_league_data(season=2023)
        
        if data_2024 is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return False
        
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if data_2023 is not None:
            self.historical_data = pd.concat([data_2023, data_2024], ignore_index=True)
            print(f"‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 2 ‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        else:
            self.historical_data = data_2024
            print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏• 2024: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        self.historical_data = self.historical_data.sort_values('date').reset_index(drop=True)
        self.historical_data = self.historical_data.dropna(subset=['home_goals', 'away_goals'])
        
        print(f"üìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {self.historical_data['date'].min()} ‡∏ñ‡∏∂‡∏á {self.historical_data['date'].max()}")
        
        return True
    
    def train_models(self, train_data):
        """‡πÄ‡∏ó‡∏£‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        print("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö 100 ‡πÄ‡∏Å‡∏°...")
        
        # Enhanced Model
        print("1. ‡πÄ‡∏ó‡∏£‡∏ô Enhanced Model...")
        self.enhanced_predictor = EnhancedFootballPredictorFixed()
        enhanced_success = self.enhanced_predictor.train(train_data)
        
        # Basic Model
        print("2. ‡πÄ‡∏ó‡∏£‡∏ô Basic Model...")
        self.basic_predictor = FootballPredictor()
        basic_success = self.basic_predictor.train(train_data)
        
        return enhanced_success and basic_success
    
    def test_100_matches(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö 100 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 100 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")
        print("="*100)
        
        if len(self.historical_data) < 200:
            print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö 100 ‡πÄ‡∏Å‡∏°")
            return None
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        test_matches = self.historical_data.tail(100)
        train_data = self.historical_data.iloc[:-100]
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        if not self.train_models(train_data):
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ")
            return None
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        enhanced_results = []
        basic_results = []
        
        print(f"{'No.':<4} {'Date':<12} {'Match':<40} {'Result':<10} {'Enhanced':<12} {'Basic':<12} {'E-Conf':<8} {'B-Conf':<8}")
        print("-" * 100)
        
        for idx, (_, match) in enumerate(test_matches.iterrows(), 1):
            # ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
            home_goals = int(match['home_goals'])
            away_goals = int(match['away_goals'])
            
            if home_goals > away_goals:
                actual = 'Home Win'
                actual_short = 'H'
            elif home_goals < away_goals:
                actual = 'Away Win'
                actual_short = 'A'
            else:
                actual = 'Draw'
                actual_short = 'D'
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Enhanced Model
            enhanced_pred = self.enhanced_predictor.predict_match(
                match['home_team'], match['away_team'], train_data
            )
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Basic Model
            basic_pred = self.basic_predictor.predict_match(
                match['home_team'], match['away_team'], train_data
            )
            
            if enhanced_pred and basic_pred:
                # Enhanced results
                enhanced_correct = (enhanced_pred['prediction'] == actual)
                enhanced_results.append({
                    'match': f"{match['home_team']} vs {match['away_team']}",
                    'date': match['date'],
                    'actual': actual,
                    'predicted': enhanced_pred['prediction'],
                    'confidence': enhanced_pred['confidence'],
                    'correct': enhanced_correct
                })
                
                # Basic results
                basic_correct = (basic_pred['prediction'] == actual)
                basic_results.append({
                    'match': f"{match['home_team']} vs {match['away_team']}",
                    'date': match['date'],
                    'actual': actual,
                    'predicted': basic_pred['prediction'],
                    'confidence': basic_pred['confidence'],
                    'correct': basic_correct
                })
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                home_short = match['home_team'].replace(' FC', '').replace(' United', ' Utd')[:18]
                away_short = match['away_team'].replace(' FC', '').replace(' United', ' Utd')[:18]
                match_str = f"{home_short} vs {away_short}"
                
                result_str = f"{home_goals}-{away_goals} ({actual_short})"
                enhanced_short = enhanced_pred['prediction'][0] if enhanced_pred['prediction'] != 'Draw' else 'D'
                basic_short = basic_pred['prediction'][0] if basic_pred['prediction'] != 'Draw' else 'D'
                
                enhanced_status = "‚úÖ" if enhanced_correct else "‚ùå"
                basic_status = "‚úÖ" if basic_correct else "‚ùå"
                
                print(f"{idx:<4} {match['date'].strftime('%Y-%m-%d'):<12} {match_str:<40} {result_str:<10} "
                      f"{enhanced_short}{enhanced_status:<11} {basic_short}{basic_status:<11} "
                      f"{enhanced_pred['confidence']:.3f}    {basic_pred['confidence']:.3f}")
        
        return self.analyze_results(enhanced_results, basic_results)
    
    def analyze_results(self, enhanced_results, basic_results):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        print("\n" + "="*100)
        print("üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 100 ‡πÄ‡∏Å‡∏°")
        print("="*100)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        enhanced_correct = sum(r['correct'] for r in enhanced_results)
        basic_correct = sum(r['correct'] for r in basic_results)
        
        enhanced_accuracy = enhanced_correct / len(enhanced_results)
        basic_accuracy = basic_correct / len(basic_results)
        
        enhanced_avg_conf = np.mean([r['confidence'] for r in enhanced_results])
        basic_avg_conf = np.mean([r['confidence'] for r in basic_results])
        
        print(f"üèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
        print(f"   Enhanced Model: {enhanced_correct}/100 = {enhanced_accuracy:.3f} ({enhanced_accuracy*100:.1f}%)")
        print(f"   Basic Model:    {basic_correct}/100 = {basic_accuracy:.3f} ({basic_accuracy*100:.1f}%)")
        print(f"   ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:    +{(enhanced_accuracy - basic_accuracy):.3f} ({(enhanced_accuracy - basic_accuracy)*100:.1f} percentage points)")
        
        print(f"\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:")
        print(f"   Enhanced Model: {enhanced_avg_conf:.3f}")
        print(f"   Basic Model:    {basic_avg_conf:.3f}")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        self.analyze_by_confidence(enhanced_results, basic_results)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.analyze_by_outcome_type(enhanced_results, basic_results)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        self.analyze_by_time_period(enhanced_results, basic_results)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        self.create_analysis_charts(enhanced_results, basic_results)
        
        return {
            'enhanced': {
                'accuracy': enhanced_accuracy,
                'correct': enhanced_correct,
                'avg_confidence': enhanced_avg_conf,
                'results': enhanced_results
            },
            'basic': {
                'accuracy': basic_accuracy,
                'correct': basic_correct,
                'avg_confidence': basic_avg_conf,
                'results': basic_results
            }
        }
    
    def analyze_by_confidence(self, enhanced_results, basic_results):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à"""
        print(f"\nüéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à:")
        
        confidence_levels = [0.5, 0.6, 0.7, 0.8]
        
        for level in confidence_levels:
            # Enhanced Model
            enhanced_high_conf = [r for r in enhanced_results if r['confidence'] > level]
            enhanced_high_conf_correct = sum(r['correct'] for r in enhanced_high_conf)
            enhanced_high_conf_acc = enhanced_high_conf_correct / len(enhanced_high_conf) if enhanced_high_conf else 0
            
            # Basic Model
            basic_high_conf = [r for r in basic_results if r['confidence'] > level]
            basic_high_conf_correct = sum(r['correct'] for r in basic_high_conf)
            basic_high_conf_acc = basic_high_conf_correct / len(basic_high_conf) if basic_high_conf else 0
            
            print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à > {level:.1f}:")
            print(f"     Enhanced: {enhanced_high_conf_correct}/{len(enhanced_high_conf)} = {enhanced_high_conf_acc:.3f} ({enhanced_high_conf_acc*100:.1f}%)")
            print(f"     Basic:    {basic_high_conf_correct}/{len(basic_high_conf)} = {basic_high_conf_acc:.3f} ({basic_high_conf_acc*100:.1f}%)")
    
    def analyze_by_outcome_type(self, enhanced_results, basic_results):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        print(f"\n‚öΩ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
        
        outcome_types = ['Home Win', 'Away Win', 'Draw']
        
        for outcome in outcome_types:
            # ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
            actual_outcomes = [r for r in enhanced_results if r['actual'] == outcome]
            
            # Enhanced Model
            enhanced_correct_outcomes = [r for r in actual_outcomes if r['predicted'] == outcome]
            enhanced_acc = len(enhanced_correct_outcomes) / len(actual_outcomes) if actual_outcomes else 0
            
            # Basic Model
            basic_outcomes = [r for r in basic_results if r['actual'] == outcome]
            basic_correct_outcomes = [r for r in basic_outcomes if r['predicted'] == outcome]
            basic_acc = len(basic_correct_outcomes) / len(basic_outcomes) if basic_outcomes else 0
            
            print(f"   {outcome}: (‡∏à‡∏£‡∏¥‡∏á {len(actual_outcomes)} ‡πÄ‡∏Å‡∏°)")
            print(f"     Enhanced: {len(enhanced_correct_outcomes)}/{len(actual_outcomes)} = {enhanced_acc:.3f} ({enhanced_acc*100:.1f}%)")
            print(f"     Basic:    {len(basic_correct_outcomes)}/{len(basic_outcomes)} = {basic_acc:.3f} ({basic_acc*100:.1f}%)")
    
    def analyze_by_time_period(self, enhanced_results, basic_results):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤"""
        print(f"\nüìÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏ä‡πà‡∏ß‡∏á):")
        
        # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏ä‡πà‡∏ß‡∏á‡πÜ ‡∏•‡∏∞ 25 ‡πÄ‡∏Å‡∏°
        for i in range(4):
            start_idx = i * 25
            end_idx = (i + 1) * 25
            
            enhanced_period = enhanced_results[start_idx:end_idx]
            basic_period = basic_results[start_idx:end_idx]
            
            enhanced_correct = sum(r['correct'] for r in enhanced_period)
            basic_correct = sum(r['correct'] for r in basic_period)
            
            enhanced_acc = enhanced_correct / len(enhanced_period)
            basic_acc = basic_correct / len(basic_period)
            
            print(f"   ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà {i+1} (‡πÄ‡∏Å‡∏° {start_idx+1}-{end_idx}):")
            print(f"     Enhanced: {enhanced_correct}/25 = {enhanced_acc:.3f} ({enhanced_acc*100:.1f}%)")
            print(f"     Basic:    {basic_correct}/25 = {basic_acc:.3f} ({basic_acc*100:.1f}%)")
    
    def create_analysis_charts(self, enhanced_results, basic_results):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        print(f"\nüìà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        
        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        models = ['Enhanced Model', 'Basic Model']
        accuracies = [
            sum(r['correct'] for r in enhanced_results) / len(enhanced_results),
            sum(r['correct'] for r in basic_results) / len(basic_results)
        ]
        
        bars1 = ax1.bar(models, accuracies, color=['#2E8B57', '#4682B4'])
        ax1.set_title('‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (100 ‡πÄ‡∏Å‡∏°)', fontsize=14, pad=20)
        ax1.set_ylabel('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥')
        ax1.set_ylim(0, 1)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á
        for bar, acc in zip(bars1, accuracies):
            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
                    f'{acc:.3f}\n({acc*100:.1f}%)', ha='center', va='bottom')
        
        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        ax2.hist([r['confidence'] for r in enhanced_results], bins=20, alpha=0.7, 
                label='Enhanced', color='#2E8B57')
        ax2.hist([r['confidence'] for r in basic_results], bins=20, alpha=0.7, 
                label='Basic', color='#4682B4')
        ax2.set_title('‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à')
        ax2.set_xlabel('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à')
        ax2.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')
        ax2.legend()
        
        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        outcome_types = ['Home Win', 'Away Win', 'Draw']
        enhanced_by_outcome = []
        basic_by_outcome = []
        
        for outcome in outcome_types:
            enhanced_actual = [r for r in enhanced_results if r['actual'] == outcome]
            enhanced_correct = [r for r in enhanced_actual if r['predicted'] == outcome]
            enhanced_acc = len(enhanced_correct) / len(enhanced_actual) if enhanced_actual else 0
            enhanced_by_outcome.append(enhanced_acc)
            
            basic_actual = [r for r in basic_results if r['actual'] == outcome]
            basic_correct = [r for r in basic_actual if r['predicted'] == outcome]
            basic_acc = len(basic_correct) / len(basic_actual) if basic_actual else 0
            basic_by_outcome.append(basic_acc)
        
        x = np.arange(len(outcome_types))
        width = 0.35
        
        ax3.bar(x - width/2, enhanced_by_outcome, width, label='Enhanced', color='#2E8B57')
        ax3.bar(x + width/2, basic_by_outcome, width, label='Basic', color='#4682B4')
        ax3.set_title('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå')
        ax3.set_xlabel('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå')
        ax3.set_ylabel('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥')
        ax3.set_xticks(x)
        ax3.set_xticklabels(outcome_types)
        ax3.legend()
        
        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 4: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        periods = ['‡∏ä‡πà‡∏ß‡∏á 1', '‡∏ä‡πà‡∏ß‡∏á 2', '‡∏ä‡πà‡∏ß‡∏á 3', '‡∏ä‡πà‡∏ß‡∏á 4']
        enhanced_by_period = []
        basic_by_period = []
        
        for i in range(4):
            start_idx = i * 25
            end_idx = (i + 1) * 25
            
            enhanced_period = enhanced_results[start_idx:end_idx]
            basic_period = basic_results[start_idx:end_idx]
            
            enhanced_acc = sum(r['correct'] for r in enhanced_period) / len(enhanced_period)
            basic_acc = sum(r['correct'] for r in basic_period) / len(basic_period)
            
            enhanced_by_period.append(enhanced_acc)
            basic_by_period.append(basic_acc)
        
        x = np.arange(len(periods))
        ax4.bar(x - width/2, enhanced_by_period, width, label='Enhanced', color='#2E8B57')
        ax4.bar(x + width/2, basic_by_period, width, label='Basic', color='#4682B4')
        ax4.set_title('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤')
        ax4.set_xlabel('‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (25 ‡πÄ‡∏Å‡∏°/‡∏ä‡πà‡∏ß‡∏á)')
        ax4.set_ylabel('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥')
        ax4.set_xticks(x)
        ax4.set_xticklabels(periods)
        ax4.legend()
        
        plt.tight_layout()
        plt.savefig('/Users/80090/Desktop/Project/untitle/100_matches_analysis.png', 
                   dpi=300, bbox_inches='tight')
        plt.show()
        
        print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏ô 100_matches_analysis.png")
    
    def run_comprehensive_test(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô 100 ‡πÄ‡∏Å‡∏°"""
        print("üèÜ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô 100 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        print("üî¨ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Enhanced Model vs Basic Model")
        print("="*100)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if not self.load_data():
            return
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 100 ‡πÄ‡∏Å‡∏°
        results = self.test_100_matches()
        
        if results:
            print(f"\nüèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö 100 ‡πÄ‡∏Å‡∏°:")
            print(f"‚úÖ Enhanced Model: {results['enhanced']['accuracy']*100:.1f}% accuracy")
            print(f"üìä Basic Model: {results['basic']['accuracy']*100:.1f}% accuracy")
            print(f"üöÄ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: +{(results['enhanced']['accuracy'] - results['basic']['accuracy'])*100:.1f} percentage points")
            
            if results['enhanced']['accuracy'] > 0.55:
                print(f"\nüéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! Enhanced Model ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 55%")
            elif results['enhanced']['accuracy'] > 0.50:
                print(f"\n‚úÖ ‡∏î‡∏µ! Enhanced Model ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 50%")
            elif results['enhanced']['accuracy'] > results['basic']['accuracy']:
                print(f"\nüìà Enhanced Model ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ Basic Model")
            else:
                print(f"\nüìù ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô")
        
        return results

def main():
    tester = Comprehensive100MatchTest()
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()
