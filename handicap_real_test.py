#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
- ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô (‡∏ä‡∏ô‡∏∞/‡πÅ‡∏û‡πâ/‡πÄ‡∏™‡∏°‡∏≠)
- ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á (‡∏ï‡πà‡∏≠/‡∏£‡∏≠‡∏á)
- ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥
‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• 3 ‡∏Ñ‡πà‡∏≤: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô, ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á, ‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥
"""

from handicap_predictor import HandicapFootballPredictor
from real_data_example import RealDataPredictor
import pandas as pd
import numpy as np

class HandicapRealTest:
    def __init__(self):
        self.api_token = "052fd4885cf943ad859c89cef542e2e5"
        self.predictor = None
        self.historical_data = None
        
    def load_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á...")
        
        real_predictor = RealDataPredictor(api_key=self.api_token)
        data_2024 = real_predictor.get_premier_league_data(season=2024)
        data_2023 = real_predictor.get_premier_league_data(season=2023)
        
        if data_2024 is None:
            return False
        
        if data_2023 is not None:
            self.historical_data = pd.concat([data_2023, data_2024], ignore_index=True)
        else:
            self.historical_data = data_2024
        
        self.historical_data = self.historical_data.sort_values('date').reset_index(drop=True)
        self.historical_data = self.historical_data.dropna(subset=['home_goals', 'away_goals'])
        
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        return True
    
    def calculate_actual_handicap_result(self, home_goals, away_goals, handicap_line):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á"""
        actual_diff = home_goals - away_goals
        adjusted_diff = actual_diff - handicap_line
        
        if handicap_line >= 0:  # ‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏¢‡πâ‡∏≤‡∏ï‡πà‡∏≠
            if adjusted_diff > 0:
                return "‡∏ï‡πà‡∏≠"
            elif adjusted_diff < 0:
                return "‡∏£‡∏≠‡∏á"
            else:
                return "‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
        else:  # ‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠
            if adjusted_diff < 0:
                return "‡∏ï‡πà‡∏≠"
            elif adjusted_diff > 0:
                return "‡∏£‡∏≠‡∏á"
            else:
                return "‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
    
    def test_handicap_predictions(self, test_games=50):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á"""
        print(f"\nüéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á ({test_games} ‡πÄ‡∏Å‡∏°)")
        print("="*100)
        
        if len(self.historical_data) < test_games + 100:
            print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
            return None
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        train_data = self.historical_data.iloc[:-test_games]
        test_data = self.historical_data.iloc[-test_games:]
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        print("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á...")
        self.predictor = HandicapFootballPredictor()
        if not self.predictor.train(train_data):
            return None
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        results = []
        
        # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        result_correct = 0  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        handicap_correct = 0  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
        over_under_correct = 0  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥
        triple_correct = 0  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤
        
        print(f"{'No.':<3} {'Date':<12} {'Match':<35} {'Score':<8} {'Result':<6} {'H-Cap':<8} {'O/U':<6} {'R':<2} {'H':<2} {'O':<2}")
        print("-" * 100)
        
        for idx, (_, match) in enumerate(test_data.iterrows(), 1):
            # ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
            actual_home = int(match['home_goals'])
            actual_away = int(match['away_goals'])
            actual_total = actual_home + actual_away
            
            # ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á
            if actual_home > actual_away:
                actual_result = 'Home Win'
                actual_result_short = 'H'
            elif actual_home < actual_away:
                actual_result = 'Away Win'
                actual_result_short = 'A'
            else:
                actual_result = 'Draw'
                actual_result_short = 'D'
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            prediction = self.predictor.predict_handicap(
                match['home_team'], match['away_team'], train_data
            )
            
            if prediction:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
                actual_handicap = self.calculate_actual_handicap_result(
                    actual_home, actual_away, prediction['handicap_line']
                )
                
                # ‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥‡∏à‡∏£‡∏¥‡∏á
                actual_over_under = "Over" if actual_total > prediction['over_under_line'] else "Under"
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                
                # 1. ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
                result_match = prediction['result_prediction'] == actual_result
                if result_match:
                    result_correct += 1
                
                # 2. ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
                handicap_match = prediction['handicap_prediction'] == actual_handicap
                if handicap_match:
                    handicap_correct += 1
                
                # 3. ‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥
                over_under_match = prediction['over_under_prediction'] == actual_over_under
                if over_under_match:
                    over_under_correct += 1
                
                # 4. ‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤
                if result_match and handicap_match and over_under_match:
                    triple_correct += 1
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                home_short = match['home_team'].replace(' FC', '').replace(' United', ' Utd')[:15]
                away_short = match['away_team'].replace(' FC', '').replace(' United', ' Utd')[:15]
                match_str = f"{home_short} vs {away_short}"
                
                score_str = f"{actual_home}-{actual_away}"
                
                # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
                handicap_str = f"{prediction['handicap_line']:+.1f}"
                if prediction['handicap_line'] >= 0:
                    handicap_display = f"H{handicap_str}"
                else:
                    handicap_display = f"A{abs(prediction['handicap_line']):.1f}"
                
                # ‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥
                ou_str = f"{prediction['over_under_line']:.1f}"
                
                # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                r_status = "‚úÖ" if result_match else "‚ùå"
                h_status = "‚úÖ" if handicap_match else "‚ùå"
                o_status = "‚úÖ" if over_under_match else "‚ùå"
                
                print(f"{idx:<3} {match['date'].strftime('%Y-%m-%d'):<12} {match_str:<35} "
                      f"{score_str:<8} {actual_result_short:<6} {handicap_display:<8} {ou_str:<6} "
                      f"{r_status:<2} {h_status:<2} {o_status:<2}")
                
                results.append({
                    'match': match_str,
                    'date': match['date'],
                    'actual_result': actual_result,
                    'predicted_result': prediction['result_prediction'],
                    'actual_score': f"{actual_home}-{actual_away}",
                    'handicap_line': prediction['handicap_line'],
                    'actual_handicap': actual_handicap,
                    'predicted_handicap': prediction['handicap_prediction'],
                    'over_under_line': prediction['over_under_line'],
                    'actual_over_under': actual_over_under,
                    'predicted_over_under': prediction['over_under_prediction'],
                    'result_correct': result_match,
                    'handicap_correct': handicap_match,
                    'over_under_correct': over_under_match,
                    'triple_correct': result_match and handicap_match and over_under_match,
                    'confidence': prediction['result_confidence']
                })
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        total_tests = len(results)
        
        result_accuracy = result_correct / total_tests
        handicap_accuracy = handicap_correct / total_tests
        over_under_accuracy = over_under_correct / total_tests
        triple_accuracy = triple_correct / total_tests
        
        print("\n" + "="*100)
        print(f"üèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á ({total_tests} ‡πÄ‡∏Å‡∏°):")
        print(f"="*60)
        print(f"1Ô∏è‚É£  ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô (‡∏ä‡∏ô‡∏∞/‡πÅ‡∏û‡πâ/‡πÄ‡∏™‡∏°‡∏≠):")
        print(f"    ‡∏ñ‡∏π‡∏Å: {result_correct}/{total_tests} = {result_accuracy:.3f} ({result_accuracy*100:.1f}%)")
        
        print(f"\n2Ô∏è‚É£  ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á (‡∏ï‡πà‡∏≠/‡∏£‡∏≠‡∏á):")
        print(f"    ‡∏ñ‡∏π‡∏Å: {handicap_correct}/{total_tests} = {handicap_accuracy:.3f} ({handicap_accuracy*100:.1f}%)")
        
        print(f"\n3Ô∏è‚É£  ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥:")
        print(f"    ‡∏ñ‡∏π‡∏Å: {over_under_correct}/{total_tests} = {over_under_accuracy:.3f} ({over_under_accuracy*100:.1f}%)")
        
        print(f"\nüéØ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤:")
        print(f"    ‡∏ñ‡∏π‡∏Å: {triple_correct}/{total_tests} = {triple_accuracy:.3f} ({triple_accuracy*100:.1f}%)")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        self.analyze_handicap_results(results)
        
        return {
            'result_accuracy': result_accuracy,
            'handicap_accuracy': handicap_accuracy,
            'over_under_accuracy': over_under_accuracy,
            'triple_accuracy': triple_accuracy,
            'total_tests': total_tests,
            'results': results
        }
    
    def analyze_handicap_results(self, results):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á"""
        print(f"\nüîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å:")
        print("="*50)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        high_conf_results = [r for r in results if r['confidence'] > 0.6]
        if high_conf_results:
            high_conf_result_acc = sum(r['result_correct'] for r in high_conf_results) / len(high_conf_results)
            high_conf_handicap_acc = sum(r['handicap_correct'] for r in high_conf_results) / len(high_conf_results)
            print(f"üìà ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á (>60%) - {len(high_conf_results)} ‡πÄ‡∏Å‡∏°:")
            print(f"   ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {high_conf_result_acc:.3f} ({high_conf_result_acc*100:.1f}%)")
            print(f"   ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á: {high_conf_handicap_acc:.3f} ({high_conf_handicap_acc*100:.1f}%)")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
        home_handicap = [r for r in results if r['handicap_line'] > 0]
        away_handicap = [r for r in results if r['handicap_line'] < 0]
        even_handicap = [r for r in results if r['handicap_line'] == 0]
        
        if home_handicap:
            home_h_acc = sum(r['handicap_correct'] for r in home_handicap) / len(home_handicap)
            print(f"üè† ‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏¢‡πâ‡∏≤‡∏ï‡πà‡∏≠: {home_h_acc:.3f} ({len(home_handicap)} ‡πÄ‡∏Å‡∏°)")
        
        if away_handicap:
            away_h_acc = sum(r['handicap_correct'] for r in away_handicap) / len(away_handicap)
            print(f"‚úàÔ∏è  ‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠: {away_h_acc:.3f} ({len(away_handicap)} ‡πÄ‡∏Å‡∏°)")
        
        if even_handicap:
            even_h_acc = sum(r['handicap_correct'] for r in even_handicap) / len(even_handicap)
            print(f"‚öñÔ∏è  ‡πÄ‡∏™‡∏°‡∏≠: {even_h_acc:.3f} ({len(even_handicap)} ‡πÄ‡∏Å‡∏°)")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥
        over_25_games = [r for r in results if r['over_under_line'] == 2.5]
        over_35_games = [r for r in results if r['over_under_line'] == 3.5]
        
        if over_25_games:
            over_25_acc = sum(r['over_under_correct'] for r in over_25_games) / len(over_25_games)
            print(f"üìä ‡πÄ‡∏™‡πâ‡∏ô 2.5: {over_25_acc:.3f} ({len(over_25_games)} ‡πÄ‡∏Å‡∏°)")
        
        if over_35_games:
            over_35_acc = sum(r['over_under_correct'] for r in over_35_games) / len(over_35_games)
            print(f"üìä ‡πÄ‡∏™‡πâ‡∏ô 3.5: {over_35_acc:.3f} ({len(over_35_games)} ‡πÄ‡∏Å‡∏°)")
        
        # ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤
        triple_correct = [r for r in results if r['triple_correct']]
        if triple_correct:
            print(f"\nüèÜ ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤ ({len(triple_correct)} ‡πÄ‡∏Å‡∏°):")
            for r in triple_correct[:5]:  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡πÄ‡∏Å‡∏°‡πÅ‡∏£‡∏Å
                handicap_desc = f"‡∏ï‡πà‡∏≠ {r['handicap_line']}" if r['handicap_line'] > 0 else f"‡∏£‡∏≠‡∏á {abs(r['handicap_line'])}" if r['handicap_line'] < 0 else "‡πÄ‡∏™‡∏°‡∏≠"
                print(f"   ‚úÖ {r['match']}: {r['actual_score']} - {r['actual_result']} - {handicap_desc} - {r['actual_over_under']}")
    
    def predict_sample_matches(self):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏Å‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
        if not self.predictor:
            return
        
        print(f"\nüéÆ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á:")
        print("="*80)
        
        sample_matches = [
            ('Arsenal FC', 'Chelsea FC'),
            ('Manchester City FC', 'Liverpool FC'),
            ('Manchester United FC', 'Tottenham Hotspur FC')
        ]
        
        for home, away in sample_matches:
            result = self.predictor.predict_handicap(home, away, self.historical_data)
            if result:
                print(f"\n‚öΩ {result['match']}")
                print(f"   üèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {result['result_prediction']} (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {result['result_confidence']:.3f})")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
                handicap_line = result['handicap_line']
                if handicap_line > 0:
                    handicap_desc = f"‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏¢‡πâ‡∏≤‡∏ï‡πà‡∏≠ {handicap_line}"
                elif handicap_line < 0:
                    handicap_desc = f"‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠ {abs(handicap_line)}"
                else:
                    handicap_desc = "‡πÄ‡∏™‡∏°‡∏≠"
                
                print(f"   üéØ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á: {handicap_desc} ‚Üí {result['handicap_prediction']}")
                print(f"   üìä ‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥: {result['over_under_line']} ‚Üí {result['over_under_prediction']}")
                print(f"   üìà ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á {result['predicted_goal_difference']:+.1f}, ‡∏£‡∏ß‡∏° {result['predicted_total_goals']:.1f} ‡∏õ‡∏£‡∏∞‡∏ï‡∏π")
                
                print(f"   üé≤ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô:")
                for outcome, prob in result['result_probabilities'].items():
                    print(f"      {outcome}: {prob:.3f} ({prob*100:.1f}%)")
    
    def run_handicap_test(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á"""
        print("üèÜ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•")
        print("üéØ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 3 ‡∏Ñ‡πà‡∏≤: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô + ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á + ‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥")
        print("="*80)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if not self.load_data():
            return
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
        results = self.test_handicap_predictions(test_games=50)
        
        if results:
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            self.predict_sample_matches()
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            print(f"\nüèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á:")
            print(f"‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {results['result_accuracy']*100:.1f}%")
            print(f"üéØ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á: {results['handicap_accuracy']*100:.1f}%")
            print(f"üìà ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥: {results['over_under_accuracy']*100:.1f}%")
            print(f"üèÜ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤: {results['triple_accuracy']*100:.1f}%")
            
            if results['handicap_accuracy'] > 0.5:
                print(f"\nüéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏î‡∏µ")
            
            if results['triple_accuracy'] > 0.15:
                print(f"üî• ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!")
        
        return results

def main():
    tester = HandicapRealTest()
    tester.run_handicap_test()

if __name__ == "__main__":
    main()
