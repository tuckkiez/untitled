#!/usr/bin/env python3
"""
ЁЯЗкЁЯЗ╕ Simple La Liga Predictor
р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Щр╕▓р╕вр╕ер╕╡р╕Бр╕кр╣Ар╕Ыр╕Щр╣Бр╕вр╕Бр╕Хр╣Ир╕▓р╕Зр╕лр╕▓р╕Б (р╣Гр╕Кр╣Йр╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Ъ Ultra Advanced)
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import sys
import os

# Copy р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Ир╕▓р╕Б Ultra Advanced Predictor
class SimpleLaLigaPredictor:
    def __init__(self):
        self.team_ratings = {}
        self.historical_data = None
        
    def load_laliga_data(self):
        """р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е La Liga (р╕Ир╕│р╕ер╕нр╕З)"""
        print("ЁЯЗкЁЯЗ╕ р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е La Liga...")
        
        # р╕Чр╕╡р╕бр╣Гр╕Щ La Liga
        teams = [
            'Real Madrid', 'FC Barcelona', 'Atletico Madrid', 'Athletic Bilbao',
            'Real Sociedad', 'Real Betis', 'Villarreal CF', 'Valencia CF',
            'Sevilla FC', 'RC Celta', 'CA Osasuna', 'Getafe CF',
            'UD Las Palmas', 'Girona FC', 'Rayo Vallecano', 'RCD Espanyol',
            'Deportivo Alaves', 'Real Valladolid', 'CD Leganes', 'RCD Mallorca'
        ]
        
        matches = []
        
        # р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕│р╕ер╕нр╕З 200 р╣Ар╕Бр╕б
        for i in range(200):
            home_team = np.random.choice(teams)
            away_team = np.random.choice([t for t in teams if t != home_team])
            
            # р╕Др╕зр╕▓р╕бр╣Бр╕Вр╣Зр╕Зр╣Бр╕Бр╕гр╣Ир╕Зр╕Вр╕нр╕Зр╕Чр╕╡р╕б
            home_strength = self._get_team_strength(home_team)
            away_strength = self._get_team_strength(away_team)
            
            # Home advantage
            home_strength += 0.3
            
            # р╕Др╕│р╕Щр╕зр╕Ур╕Ыр╕гр╕░р╕Хр╕╣
            home_goals = max(0, int(np.random.poisson(home_strength)))
            away_goals = max(0, int(np.random.poisson(away_strength)))
            
            # р╕кр╕гр╣Йр╕▓р╕Зр╕зр╕▒р╕Щр╕Чр╕╡р╣И
            days_ago = np.random.randint(1, 120)
            match_date = datetime.now() - timedelta(days=days_ago)
            
            matches.append({
                'date': match_date.strftime('%Y-%m-%d'),
                'home_team': home_team,
                'away_team': away_team,
                'home_goals': home_goals,
                'away_goals': away_goals
            })
        
        data = pd.DataFrame(matches)
        data['date'] = pd.to_datetime(data['date'])
        data = data.sort_values('date').reset_index(drop=True)
        
        print(f"тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕│р╕ер╕нр╕З La Liga р╕кр╕│р╣Ар╕гр╣Зр╕И: {len(data)} р╣Ар╕Бр╕б")
        
        self.historical_data = data
        return data
    
    def _get_team_strength(self, team):
        """р╕Др╕зр╕▓р╕бр╣Бр╕Вр╣Зр╕Зр╣Бр╕Бр╕гр╣Ир╕Зр╕Вр╕нр╕Зр╕Чр╕╡р╕б La Liga"""
        strength_map = {
            'Real Madrid': 2.3, 'FC Barcelona': 2.2, 'Atletico Madrid': 1.9,
            'Athletic Bilbao': 1.6, 'Real Sociedad': 1.5, 'Real Betis': 1.4,
            'Villarreal CF': 1.4, 'Valencia CF': 1.2, 'Sevilla FC': 1.3,
            'RC Celta': 1.1, 'CA Osasuna': 1.0, 'Getafe CF': 0.9,
            'UD Las Palmas': 0.9, 'Girona FC': 1.2, 'Rayo Vallecano': 1.0,
            'RCD Espanyol': 0.8, 'Deportivo Alaves': 0.8, 'Real Valladolid': 0.7,
            'CD Leganes': 0.7, 'RCD Mallorca': 0.9
        }
        return strength_map.get(team, 1.0)
    
    def calculate_elo_ratings(self, matches_df):
        """р╕Др╕│р╕Щр╕зр╕У ELO Rating р╕кр╕│р╕лр╕гр╕▒р╕Ъ La Liga"""
        print("ЁЯПЖ р╕Бр╕│р╕ер╕▒р╕Зр╕Др╕│р╕Щр╕зр╕У ELO Ratings р╕кр╕│р╕лр╕гр╕▒р╕Ъ La Liga...")
        
        teams = set(matches_df['home_team'].unique()) | set(matches_df['away_team'].unique())
        elo_ratings = {team: 1500 for team in teams}
        
        K = 32
        
        for _, match in matches_df.iterrows():
            home_team = match['home_team']
            away_team = match['away_team']
            home_goals = match['home_goals']
            away_goals = match['away_goals']
            
            if home_goals > away_goals:
                home_result, away_result = 1.0, 0.0
            elif home_goals == away_goals:
                home_result, away_result = 0.5, 0.5
            else:
                home_result, away_result = 0.0, 1.0
            
            home_expected = 1 / (1 + 10**((elo_ratings[away_team] - elo_ratings[home_team]) / 400))
            away_expected = 1 - home_expected
            
            elo_ratings[home_team] += K * (home_result - home_expected)
            elo_ratings[away_team] += K * (away_result - away_expected)
        
        self.team_ratings = elo_ratings
        return elo_ratings
    
    def predict_match_laliga(self, home_team, away_team):
        """р╕Чр╕│р╕Щр╕▓р╕вр╕Бр╕▓р╕гр╣Бр╕Вр╣Ир╕Зр╕Вр╕▒р╕Щ La Liga (р╣Бр╕Ър╕Ър╕Зр╣Ир╕▓р╕в)"""
        print(f"ЁЯФз р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│р╕Щр╕▓р╕в {home_team} vs {away_team}...")
        
        if not self.team_ratings:
            print("тЭМ р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Др╕│р╕Щр╕зр╕У ELO Ratings")
            return None
        
        # р╕Фр╕╢р╕З ELO ratings
        home_elo = self.team_ratings.get(home_team, 1500)
        away_elo = self.team_ratings.get(away_team, 1500)
        
        # Home advantage
        home_elo += 100
        
        # р╕Др╕│р╕Щр╕зр╕Ур╕Др╕зр╕▓р╕бр╕Щр╣Ир╕▓р╕Ир╕░р╣Ар╕Ыр╣Зр╕Щ
        home_expected = 1 / (1 + 10**((away_elo - home_elo) / 400))
        away_expected = 1 - home_expected
        draw_prob = 0.25  # р╣Вр╕нр╕Бр╕▓р╕кр╣Ар╕кр╕бр╕н
        
        # р╕Ыр╕гр╕▒р╕Ър╣Гр╕лр╣Йр╕гр╕зр╕бр╣Ар╕Ыр╣Зр╕Щ 1
        total_prob = home_expected + away_expected + draw_prob
        home_prob = home_expected / total_prob
        away_prob = away_expected / total_prob
        draw_prob = draw_prob / total_prob
        
        # р╕Чр╕│р╕Щр╕▓р╕вр╕Ьр╕е
        if home_prob > away_prob and home_prob > draw_prob:
            prediction = "Home Win"
            confidence = home_prob
        elif away_prob > home_prob and away_prob > draw_prob:
            prediction = "Away Win"
            confidence = away_prob
        else:
            prediction = "Draw"
            confidence = draw_prob
        
        return {
            'prediction': prediction,
            'confidence': confidence,
            'probabilities': {
                'Home Win': home_prob,
                'Draw': draw_prob,
                'Away Win': away_prob
            }
        }

def test_simple_laliga():
    """р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ La Liga р╣Бр╕Ър╕Ър╕Зр╣Ир╕▓р╕в"""
    print("ЁЯЗкЁЯЗ╕ р╕Чр╕Фр╕кр╕нр╕Ъ Simple La Liga Predictor")
    print("=" * 50)
    
    # р╕кр╕гр╣Йр╕▓р╕З predictor
    predictor = SimpleLaLigaPredictor()
    
    # р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е
    data = predictor.load_laliga_data()
    
    # р╕Др╕│р╕Щр╕зр╕У ELO
    predictor.calculate_elo_ratings(data)
    
    # р╣Бр╕кр╕Фр╕З Top 5 р╕Чр╕╡р╕б
    print(f"\nЁЯПЖ Top 5 р╕Чр╕╡р╕бр╣Бр╕Вр╣Зр╕Зр╣Бр╕Бр╕гр╣Ир╕Зр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф (ELO Rating):")
    sorted_teams = sorted(predictor.team_ratings.items(), key=lambda x: x[1], reverse=True)
    for i, (team, rating) in enumerate(sorted_teams[:5]):
        print(f"   {i+1}. {team}: {rating:.0f}")
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Чр╕│р╕Щр╕▓р╕в
    print(f"\nЁЯОп р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Чр╕│р╕Щр╕▓р╕в:")
    test_matches = [
        ('Real Madrid', 'FC Barcelona'),
        ('Atletico Madrid', 'Real Sociedad'),
        ('Sevilla FC', 'Valencia CF'),
        ('Athletic Bilbao', 'Real Betis')
    ]
    
    results = []
    
    for home, away in test_matches:
        result = predictor.predict_match_laliga(home, away)
        if result:
            results.append(result)
            print(f"\nтЪ╜ {home} vs {away}")
            print(f"   ЁЯОп р╕Чр╕│р╕Щр╕▓р╕в: {result['prediction']} ({result['confidence']:.1%})")
            
            probs = result['probabilities']
            print(f"   ЁЯУК {home}: {probs['Home Win']:.1%} | р╣Ар╕кр╕бр╕н: {probs['Draw']:.1%} | {away}: {probs['Away Win']:.1%}")
    
    # р╕кр╕гр╕╕р╕Ы
    if results:
        avg_confidence = sum(r['confidence'] for r in results) / len(results)
        print(f"\nЁЯУК р╕кр╕гр╕╕р╕Ы:")
        print(f"   тЬЕ р╕Чр╕│р╕Щр╕▓р╕вр╕кр╕│р╣Ар╕гр╣Зр╕И: {len(results)} р╕Др╕╣р╣И")
        print(f"   ЁЯУИ р╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╣Гр╕Ир╣Ар╕Йр╕ер╕╡р╣Ир╕в: {avg_confidence:.1%}")
        
        if avg_confidence > 0.4:
            print(f"   ЁЯОЙ р╕гр╕░р╕Ър╕Ъ La Liga р╕Чр╕│р╕Зр╕▓р╕Щр╣Др╕Фр╣Йр╕Фр╕╡!")
        else:
            print(f"   тЪая╕П р╕Хр╣Йр╕нр╕Зр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б")
    
    return predictor

def main():
    """р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕лр╕ер╕▒р╕Б"""
    print("ЁЯЪА Simple La Liga Predictor")
    print("ЁЯЗкЁЯЗ╕ р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Щр╕▓р╕вр╕ер╕╡р╕Бр╕кр╣Ар╕Ыр╕Щр╣Бр╕вр╕Бр╕Хр╣Ир╕▓р╕Зр╕лр╕▓р╕Б")
    print("=" * 60)
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ
    predictor = test_simple_laliga()
    
    print(f"\nтЬЕ р╕гр╕░р╕Ър╕Ъ La Liga Predictor р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ!")
    print(f"ЁЯУЭ р╕гр╕░р╕Ър╕Ър╕Щр╕╡р╣Йр╣Бр╕вр╕Бр╕Хр╣Ир╕▓р╕Зр╕лр╕▓р╕Бр╕Ир╕▓р╕Б Premier League")
    print(f"ЁЯФз р╣Гр╕Кр╣Йр╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щ р╣Бр╕Хр╣Ир╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╣Ир╕▓р╕Зр╕Бр╕▒р╕Щ")
    
    return predictor

if __name__ == "__main__":
    predictor = main()
