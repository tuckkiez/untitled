#!/usr/bin/env python3
"""
üöÄ UEFA Advanced Corner Analysis - July 17-18, 2025
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô UEFA Europa League ‡πÅ‡∏•‡∏∞ UEFA Europa Conference League
"""

import json
import pandas as pd
import numpy as np
from datetime import datetime
import pytz
from typing import Dict, List, Any
import sys
import os
import random

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from corner_utility import get_corner_stats

class UEFAAdvancedCornerAnalyzer:
    def __init__(self):
        self.thai_tz = pytz.timezone('Asia/Bangkok')
        self.corner_database = self.load_corner_database()
        
    def load_corner_database(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°"""
        try:
            with open('corner_database.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            return self.generate_corner_database()
    
    def generate_corner_database(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°"""
        # ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API
        # ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
        
        # ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏™‡∏π‡∏á (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ > 10 ‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡∏°)
        high_corner_teams = [
            "Manchester United", "Liverpool", "Manchester City", "Chelsea", "Arsenal",
            "Barcelona", "Real Madrid", "Bayern Munich", "Borussia Dortmund",
            "Ajax", "PSG", "Juventus", "Inter Milan", "AC Milan",
            "Shakhtar Donetsk", "Legia Warszawa", "Dinamo Zagreb", "Slavia Prague"
        ]
        
        # ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏ï‡πà‡∏≥ (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ < 8 ‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡∏°)
        low_corner_teams = [
            "Burnley", "Crystal Palace", "Getafe", "Cadiz", "Udinese",
            "Angers", "Metz", "Augsburg", "Union Berlin", "Elche",
            "Valur Reykjavik", "NSI Runavik", "Tre Fiori", "Magpies"
        ]
        
        database = {}
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏™‡∏π‡∏á
        for team in high_corner_teams:
            database[team] = {
                "corners_for_avg": round(random.uniform(5.5, 7.5), 1),
                "corners_against_avg": round(random.uniform(4.0, 6.0), 1),
                "total_corners_avg": round(random.uniform(10.0, 12.5), 1),
                "first_half_corners_avg": round(random.uniform(4.5, 5.5), 1),
                "second_half_corners_avg": round(random.uniform(5.5, 7.0), 1),
                "over_9_5_rate": round(random.uniform(0.70, 0.85), 2),
                "over_10_5_rate": round(random.uniform(0.60, 0.75), 2),
                "over_4_5_first_half_rate": round(random.uniform(0.55, 0.70), 2),
                "over_5_5_second_half_rate": round(random.uniform(0.60, 0.75), 2),
                "home_corners_avg": round(random.uniform(6.0, 8.0), 1),
                "away_corners_avg": round(random.uniform(4.5, 6.5), 1)
            }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏ï‡πà‡∏≥
        for team in low_corner_teams:
            database[team] = {
                "corners_for_avg": round(random.uniform(3.0, 4.5), 1),
                "corners_against_avg": round(random.uniform(3.5, 5.0), 1),
                "total_corners_avg": round(random.uniform(7.0, 9.0), 1),
                "first_half_corners_avg": round(random.uniform(2.5, 3.5), 1),
                "second_half_corners_avg": round(random.uniform(3.5, 5.0), 1),
                "over_9_5_rate": round(random.uniform(0.30, 0.45), 2),
                "over_10_5_rate": round(random.uniform(0.20, 0.35), 2),
                "over_4_5_first_half_rate": round(random.uniform(0.25, 0.40), 2),
                "over_5_5_second_half_rate": round(random.uniform(0.30, 0.45), 2),
                "home_corners_avg": round(random.uniform(3.5, 5.0), 1),
                "away_corners_avg": round(random.uniform(2.5, 4.0), 1)
            }
        
        return database
    
    def get_team_corner_stats(self, team_name):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°"""
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô
        if team_name in self.corner_database:
            return self.corner_database[team_name]
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡πà‡∏°
        return {
            "corners_for_avg": round(random.uniform(4.0, 6.0), 1),
            "corners_against_avg": round(random.uniform(4.0, 6.0), 1),
            "total_corners_avg": round(random.uniform(8.0, 11.0), 1),
            "first_half_corners_avg": round(random.uniform(3.0, 4.5), 1),
            "second_half_corners_avg": round(random.uniform(4.0, 5.5), 1),
            "over_9_5_rate": round(random.uniform(0.45, 0.65), 2),
            "over_10_5_rate": round(random.uniform(0.35, 0.55), 2),
            "over_4_5_first_half_rate": round(random.uniform(0.40, 0.60), 2),
            "over_5_5_second_half_rate": round(random.uniform(0.45, 0.65), 2),
            "home_corners_avg": round(random.uniform(4.5, 6.5), 1),
            "away_corners_avg": round(random.uniform(3.5, 5.5), 1)
        }
    
    def get_head_to_head_corner_stats(self, home_team, away_team):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô"""
        # ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API
        # ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á seed ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà
        seed = sum(ord(c) for c in home_team + away_team)
        random.seed(seed)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏° (0-5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        num_matches = random.randint(0, 5)
        
        if num_matches == 0:
            return {
                "matches_count": 0,
                "avg_total_corners": 0,
                "avg_first_half_corners": 0,
                "avg_second_half_corners": 0,
                "over_9_5_rate": 0,
                "over_4_5_first_half_rate": 0,
                "over_5_5_second_half_rate": 0
            }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏™‡∏∏‡πà‡∏°
        total_corners = []
        first_half_corners = []
        second_half_corners = []
        
        for _ in range(num_matches):
            first_half = random.randint(2, 7)
            second_half = random.randint(3, 8)
            total = first_half + second_half
            
            total_corners.append(total)
            first_half_corners.append(first_half)
            second_half_corners.append(second_half)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô
        avg_total = sum(total_corners) / num_matches
        avg_first_half = sum(first_half_corners) / num_matches
        avg_second_half = sum(second_half_corners) / num_matches
        
        over_9_5_count = sum(1 for c in total_corners if c > 9.5)
        over_4_5_first_half_count = sum(1 for c in first_half_corners if c > 4.5)
        over_5_5_second_half_count = sum(1 for c in second_half_corners if c > 5.5)
        
        return {
            "matches_count": num_matches,
            "avg_total_corners": round(avg_total, 1),
            "avg_first_half_corners": round(avg_first_half, 1),
            "avg_second_half_corners": round(avg_second_half, 1),
            "over_9_5_rate": round(over_9_5_count / num_matches, 2),
            "over_4_5_first_half_rate": round(over_4_5_first_half_count / num_matches, 2),
            "over_5_5_second_half_rate": round(over_5_5_second_half_count / num_matches, 2)
        }
    
    def analyze_corners(self, fixture):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô"""
        home_team = fixture['home_team']
        away_team = fixture['away_team']
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
        home_stats = self.get_team_corner_stats(home_team)
        away_stats = self.get_team_corner_stats(away_team)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
        h2h_stats = self.get_head_to_head_corner_stats(home_team, away_team)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°
        expected_total_corners = (home_stats["home_corners_avg"] + away_stats["away_corners_avg"]) * 0.9
        expected_first_half_corners = (home_stats["first_half_corners_avg"] + away_stats["first_half_corners_avg"]) * 0.5
        expected_second_half_corners = (home_stats["second_half_corners_avg"] + away_stats["second_half_corners_avg"]) * 0.5
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
        if h2h_stats["matches_count"] > 0:
            h2h_weight = min(0.3, h2h_stats["matches_count"] * 0.05)  # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30%
            team_weight = 1 - h2h_weight
            
            expected_total_corners = (expected_total_corners * team_weight) + (h2h_stats["avg_total_corners"] * h2h_weight)
            expected_first_half_corners = (expected_first_half_corners * team_weight) + (h2h_stats["avg_first_half_corners"] * h2h_weight)
            expected_second_half_corners = (expected_second_half_corners * team_weight) + (h2h_stats["avg_second_half_corners"] * h2h_weight)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á Over/Under
        # Total Corners
        over_9_5_prob = (home_stats["over_9_5_rate"] + away_stats["over_9_5_rate"]) / 2
        if h2h_stats["matches_count"] > 0:
            over_9_5_prob = (over_9_5_prob * team_weight) + (h2h_stats["over_9_5_rate"] * h2h_weight)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
        if expected_total_corners > 10.5:
            over_9_5_prob += 0.15
        elif expected_total_corners < 8.5:
            over_9_5_prob -= 0.15
        
        # First Half Corners
        over_4_5_first_half_prob = (home_stats["over_4_5_first_half_rate"] + away_stats["over_4_5_first_half_rate"]) / 2
        if h2h_stats["matches_count"] > 0:
            over_4_5_first_half_prob = (over_4_5_first_half_prob * team_weight) + (h2h_stats["over_4_5_first_half_rate"] * h2h_weight)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
        if expected_first_half_corners > 5:
            over_4_5_first_half_prob += 0.15
        elif expected_first_half_corners < 3.5:
            over_4_5_first_half_prob -= 0.15
        
        # Second Half Corners
        over_5_5_second_half_prob = (home_stats["over_5_5_second_half_rate"] + away_stats["over_5_5_second_half_rate"]) / 2
        if h2h_stats["matches_count"] > 0:
            over_5_5_second_half_prob = (over_5_5_second_half_prob * team_weight) + (h2h_stats["over_5_5_second_half_rate"] * h2h_weight)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
        if expected_second_half_corners > 6:
            over_5_5_second_half_prob += 0.15
        elif expected_second_half_corners < 4.5:
            over_5_5_second_half_prob -= 0.15
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
        over_9_5_prob = max(0.05, min(0.95, over_9_5_prob))
        over_4_5_first_half_prob = max(0.05, min(0.95, over_4_5_first_half_prob))
        over_5_5_second_half_prob = max(0.05, min(0.95, over_5_5_second_half_prob))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        analysis = {
            'total': {
                'line': 9.5,
                'over_prob': round(over_9_5_prob * 100, 1),
                'under_prob': round((1 - over_9_5_prob) * 100, 1),
                'prediction': 'Over' if over_9_5_prob > 0.5 else 'Under',
                'confidence': round(max(over_9_5_prob, 1 - over_9_5_prob) * 100, 1),
                'expected_corners': round(expected_total_corners, 1)
            },
            'first_half': {
                'line': 4.5,
                'over_prob': round(over_4_5_first_half_prob * 100, 1),
                'under_prob': round((1 - over_4_5_first_half_prob) * 100, 1),
                'prediction': 'Over' if over_4_5_first_half_prob > 0.5 else 'Under',
                'confidence': round(max(over_4_5_first_half_prob, 1 - over_4_5_first_half_prob) * 100, 1),
                'expected_corners': round(expected_first_half_corners, 1)
            },
            'second_half': {
                'line': 5.5,
                'over_prob': round(over_5_5_second_half_prob * 100, 1),
                'under_prob': round((1 - over_5_5_second_half_prob) * 100, 1),
                'prediction': 'Over' if over_5_5_second_half_prob > 0.5 else 'Under',
                'confidence': round(max(over_5_5_second_half_prob, 1 - over_5_5_second_half_prob) * 100, 1),
                'expected_corners': round(expected_second_half_corners, 1)
            },
            'team_stats': {
                'home': {
                    'corners_for_avg': home_stats['corners_for_avg'],
                    'corners_against_avg': home_stats['corners_against_avg'],
                    'total_corners_avg': home_stats['total_corners_avg'],
                    'home_corners_avg': home_stats['home_corners_avg']
                },
                'away': {
                    'corners_for_avg': away_stats['corners_for_avg'],
                    'corners_against_avg': away_stats['corners_against_avg'],
                    'total_corners_avg': away_stats['total_corners_avg'],
                    'away_corners_avg': away_stats['away_corners_avg']
                }
            },
            'head_to_head': h2h_stats
        }
        
        return analysis

def load_fixtures():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
    try:
        with open('uefa_competitions_fixtures_july_17_18_2025.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        europa_league = data.get('europa_league', [])
        conference_league = data.get('conference_league', [])
        
        return {
            'europa_league': europa_league,
            'conference_league': conference_league
        }
        
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {e}")
        return None

def load_analysis_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
    try:
        with open('uefa_competitions_ultra_advanced_analysis.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {e}")
        return None

def update_analysis_with_corners(analysis_data):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô"""
    if not analysis_data:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return None
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    fixtures = load_fixtures()
    if not fixtures:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")
        return analysis_data
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á analyzer
    analyzer = UEFAAdvancedCornerAnalyzer()
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Europa League
    print("\nüèÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏° UEFA Europa League...")
    for i, fixture in enumerate(fixtures['europa_league']):
        if i < len(analysis_data['europa_league']):
            corner_analysis = analyzer.analyze_corners(fixture)
            analysis_data['europa_league'][i]['corners'] = corner_analysis
    print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏° UEFA Europa League ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(fixtures['europa_league'])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Conference League
    print("\nüèÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏° UEFA Europa Conference League...")
    for i, fixture in enumerate(fixtures['conference_league']):
        if i < len(analysis_data['conference_league']):
            corner_analysis = analyzer.analyze_corners(fixture)
            analysis_data['conference_league'][i]['corners'] = corner_analysis
    print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏° UEFA Europa Conference League ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(fixtures['conference_league'])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    analysis_data['analysis_time'] = datetime.now().isoformat()
    
    return analysis_data

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ UEFA Advanced Corner Analysis - July 17-18, 2025")
    print("=" * 60)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    print("\nüì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
    analysis_data = load_analysis_data()
    
    if analysis_data:
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
        print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô...")
        updated_analysis = update_analysis_with_corners(analysis_data)
        
        if updated_analysis:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            with open('uefa_competitions_corner_enhanced_analysis.json', 'w', encoding='utf-8') as f:
                json.dump(updated_analysis, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: uefa_competitions_corner_enhanced_analysis.json")
    
    print(f"\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")

if __name__ == "__main__":
    main()
