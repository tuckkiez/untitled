#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
‡πÉ‡∏ä‡πâ Enhanced Model ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
"""

from enhanced_predictor_fixed import EnhancedFootballPredictorFixed
from real_data_example import RealDataPredictor
from football_predictor import FootballPredictor
import pandas as pd
import numpy as np

class FinalEnhancedPredictor:
    def __init__(self):
        self.api_token = "052fd4885cf943ad859c89cef542e2e5"
        self.enhanced_predictor = None
        self.basic_predictor = None
        self.historical_data = None
        self.teams = []
        
    def load_comprehensive_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏à‡∏≤‡∏Å football-data.org...")
        
        real_predictor = RealDataPredictor(api_key=self.api_token)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•
        data_2024 = real_predictor.get_premier_league_data(season=2024)
        data_2023 = real_predictor.get_premier_league_data(season=2023)
        
        if data_2024 is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return False
        
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if data_2023 is not None:
            self.historical_data = pd.concat([data_2023, data_2024], ignore_index=True)
            print(f"‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 2 ‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        else:
            self.historical_data = data_2024
            print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏• 2024: {len(self.historical_data)} ‡πÄ‡∏Å‡∏°")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.historical_data = self.historical_data.sort_values('date').reset_index(drop=True)
        
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        self.historical_data = self.historical_data.dropna(subset=['home_goals', 'away_goals'])
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
        self.teams = sorted(list(set(
            self.historical_data['home_team'].tolist() + 
            self.historical_data['away_team'].tolist()
        )))
        
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡∏°: {len(self.teams)} ‡∏ó‡∏µ‡∏°")
        print(f"üìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {self.historical_data['date'].min()} ‡∏ñ‡∏∂‡∏á {self.historical_data['date'].max()}")
        
        return True
    
    def train_both_models(self):
        """‡πÄ‡∏ó‡∏£‡∏ô‡∏ó‡∏±‡πâ‡∏á Enhanced ‡πÅ‡∏•‡∏∞ Basic Model"""
        print("\nü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á...")
        
        # Enhanced Model
        print("1. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô Enhanced Model...")
        self.enhanced_predictor = EnhancedFootballPredictorFixed()
        enhanced_success = self.enhanced_predictor.train(self.historical_data)
        
        # Basic Model
        print("\n2. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô Basic Model...")
        self.basic_predictor = FootballPredictor()
        basic_success = self.basic_predictor.train(self.historical_data)
        
        if enhanced_success and basic_success:
            print("‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        else:
            print("‚ùå ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return False
    
    def comprehensive_backtest(self, test_games=80):
        """‡∏ó‡∏≥ backtest ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        print(f"\nüìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ Comprehensive Backtest ({test_games} ‡πÄ‡∏Å‡∏°)...")
        
        if len(self.historical_data) < test_games + 100:
            print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backtest")
            return None, None
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        train_data = self.historical_data.iloc[:-test_games]
        test_data = self.historical_data.iloc[-test_games:]
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backtest
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backtest...")
        
        # Enhanced Model
        enhanced_temp = EnhancedFootballPredictorFixed()
        enhanced_trained = enhanced_temp.train(train_data)
        
        # Basic Model
        basic_temp = FootballPredictor()
        basic_trained = basic_temp.train(train_data)
        
        if not (enhanced_trained and basic_trained):
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backtest ‡πÑ‡∏î‡πâ")
            return None, None
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        enhanced_results = []
        basic_results = []
        
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")
        for idx, match in test_data.iterrows():
            # ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
            if match['home_goals'] > match['away_goals']:
                actual = 'Home Win'
            elif match['home_goals'] < match['away_goals']:
                actual = 'Away Win'
            else:
                actual = 'Draw'
            
            # Enhanced Model
            enhanced_pred = enhanced_temp.predict_match(
                match['home_team'], match['away_team'], train_data
            )
            if enhanced_pred:
                enhanced_results.append({
                    'actual': actual,
                    'predicted': enhanced_pred['prediction'],
                    'correct': enhanced_pred['prediction'] == actual,
                    'confidence': enhanced_pred['confidence']
                })
            
            # Basic Model
            basic_pred = basic_temp.predict_match(
                match['home_team'], match['away_team'], train_data
            )
            if basic_pred:
                basic_results.append({
                    'actual': actual,
                    'predicted': basic_pred['prediction'],
                    'correct': basic_pred['prediction'] == actual,
                    'confidence': basic_pred['confidence']
                })
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        enhanced_accuracy = sum(r['correct'] for r in enhanced_results) / len(enhanced_results) if enhanced_results else 0
        basic_accuracy = sum(r['correct'] for r in basic_results) / len(basic_results) if basic_results else 0
        
        enhanced_avg_conf = np.mean([r['confidence'] for r in enhanced_results]) if enhanced_results else 0
        basic_avg_conf = np.mean([r['confidence'] for r in basic_results]) if basic_results else 0
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        enhanced_high_conf = [r for r in enhanced_results if r['confidence'] > 0.6]
        enhanced_high_conf_acc = sum(r['correct'] for r in enhanced_high_conf) / len(enhanced_high_conf) if enhanced_high_conf else 0
        
        basic_high_conf = [r for r in basic_results if r['confidence'] > 0.6]
        basic_high_conf_acc = sum(r['correct'] for r in basic_high_conf) / len(basic_high_conf) if basic_high_conf else 0
        
        print(f"\nüèÜ ‡∏ú‡∏• Comprehensive Backtest:")
        print(f"{'='*60}")
        print(f"üìà Enhanced Model:")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {enhanced_accuracy:.3f} ({enhanced_accuracy*100:.1f}%)")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {enhanced_avg_conf:.3f}")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à > 60%: {enhanced_high_conf_acc:.3f} ({len(enhanced_high_conf)} ‡πÄ‡∏Å‡∏°)")
        
        print(f"\nüìä Basic Model:")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {basic_accuracy:.3f} ({basic_accuracy*100:.1f}%)")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {basic_avg_conf:.3f}")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à > 60%: {basic_high_conf_acc:.3f} ({len(basic_high_conf)} ‡πÄ‡∏Å‡∏°)")
        
        improvement = enhanced_accuracy - basic_accuracy
        print(f"\nüöÄ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: +{improvement:.3f} ({improvement*100:.1f} percentage points)")
        
        return {
            'enhanced': {
                'accuracy': enhanced_accuracy,
                'avg_confidence': enhanced_avg_conf,
                'high_conf_accuracy': enhanced_high_conf_acc,
                'high_conf_games': len(enhanced_high_conf),
                'results': enhanced_results
            },
            'basic': {
                'accuracy': basic_accuracy,
                'avg_confidence': basic_avg_conf,
                'high_conf_accuracy': basic_high_conf_acc,
                'high_conf_games': len(basic_high_conf),
                'results': basic_results
            }
        }, improvement
    
    def smart_predict(self, home_team, away_team):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ - ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        print(f"\nüß† Smart Prediction: {home_team.replace(' FC', '')} vs {away_team.replace(' FC', '')}")
        print("="*70)
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        enhanced_result = self.enhanced_predictor.predict_match(home_team, away_team, self.historical_data)
        basic_result = self.basic_predictor.predict_match(home_team, away_team, self.historical_data)
        
        if not enhanced_result or not basic_result:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")
            return None
        
        print(f"ü§ñ Enhanced Model:")
        print(f"   ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {enhanced_result['prediction']}")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {enhanced_result['confidence']:.3f} ({enhanced_result['confidence']*100:.1f}%)")
        
        print(f"\nüìä Basic Model:")
        print(f"   ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {basic_result['prediction']}")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {basic_result['confidence']:.3f} ({basic_result['confidence']*100:.1f}%)")
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        if enhanced_result['confidence'] > basic_result['confidence']:
            final_result = enhanced_result
            chosen_model = "Enhanced Model"
        else:
            final_result = basic_result
            chosen_model = "Basic Model"
        
        print(f"\nüéØ Final Smart Prediction (‡πÉ‡∏ä‡πâ {chosen_model}):")
        print(f"   ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {final_result['prediction']}")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {final_result['confidence']:.3f} ({final_result['confidence']*100:.1f}%)")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        print(f"\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏•:")
        prediction_emoji = {'Home Win': 'üè†', 'Away Win': '‚úàÔ∏è', 'Draw': 'ü§ù'}
        for outcome, prob in final_result['probabilities'].items():
            emoji = prediction_emoji.get(outcome, '‚öΩ')
            bar_length = int(prob * 25)
            bar = "‚ñà" * bar_length + "‚ñë" * (25 - bar_length)
            print(f"   {emoji} {outcome:10s}: {bar} {prob:.3f} ({prob*100:.1f}%)")
        
        # ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
        if final_result['confidence'] > 0.7:
            reliability = "‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å üî•"
        elif final_result['confidence'] > 0.6:
            reliability = "‡∏™‡∏π‡∏á ‚úÖ"
        elif final_result['confidence'] > 0.5:
            reliability = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‚ö°"
        else:
            reliability = "‡∏ï‡πà‡∏≥ ‚ö†Ô∏è"
        
        print(f"\nüîç ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠: {reliability}")
        
        return final_result
    
    def run_final_analysis(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"""
        print("üèÜ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢")
        print("üöÄ Enhanced Model + Smart Prediction")
        print("="*60)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if not self.load_comprehensive_data():
            return
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        if not self.train_both_models():
            return
        
        # ‡∏ó‡∏≥ backtest
        backtest_results, improvement = self.comprehensive_backtest(test_games=100)
        
        if backtest_results is None:
            return
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        print(f"\nüéÆ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Smart Predictions:")
        sample_matches = [
            ('Arsenal FC', 'Chelsea FC'),
            ('Manchester City FC', 'Liverpool FC'),
            ('Manchester United FC', 'Tottenham Hotspur FC'),
            ('Newcastle United FC', 'Brighton & Hove Albion FC')
        ]
        
        for home, away in sample_matches:
            self.smart_predict(home, away)
            print("\n" + "-"*70)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        enhanced_acc = backtest_results['enhanced']['accuracy']
        basic_acc = backtest_results['basic']['accuracy']
        
        print(f"\nüèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤:")
        print(f"‚úÖ Enhanced Model: {enhanced_acc*100:.1f}% accuracy")
        print(f"üìä Basic Model: {basic_acc*100:.1f}% accuracy")
        print(f"üöÄ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: +{improvement*100:.1f} percentage points")
        
        if enhanced_acc > 0.55:
            print(f"\nüéâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Enhanced Model ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 55%!")
        elif enhanced_acc > 0.50:
            print(f"\n‚úÖ ‡∏ú‡∏•‡∏î‡∏µ: Enhanced Model ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 50%")
        else:
            print(f"\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏™‡∏π‡∏á ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå")
        
        print(f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print(f"   - ‡πÉ‡∏ä‡πâ Smart Prediction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
        print(f"   - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à > 60%")
        print(f"   - ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô")
        
        return backtest_results

def main():
    predictor = FinalEnhancedPredictor()
    predictor.run_final_analysis()

if __name__ == "__main__":
    main()
