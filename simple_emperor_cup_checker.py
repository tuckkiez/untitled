#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üèÜ SIMPLE EMPEROR CUP CHECKER
‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏°‡∏ï‡∏ä‡πå Emperor Cup ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á CSV
"""

import requests
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time

class SimpleEmperorCupChecker:
    def __init__(self):
        self.rapidapi_headers = {
            'x-rapidapi-key': 'f9cf9a3854mshf30572945114fb4p105c26jsnbbc82dcea9c0',
            'x-rapidapi-host': 'api-football-v1.p.rapidapi.com'
        }
        
        self.sofascore_headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        }
        
        self.today = datetime.now().strftime("%Y-%m-%d")
        
    def check_all_matches_today(self):
        """‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
        print(f"üîç Checking all matches for {self.today}...")
        
        try:
            url = "https://api-football-v1.p.rapidapi.com/v3/fixtures"
            params = {'date': self.today}
            
            response = requests.get(url, headers=self.rapidapi_headers, params=params, timeout=15)
            print(f"   üì° RapidAPI Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                fixtures = data.get('response', [])
                
                print(f"   üìä Total fixtures found: {len(fixtures)}")
                
                # ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏°‡∏ï‡∏ä‡πå
                emperor_cup_matches = []
                japanese_matches = []
                all_leagues = set()
                
                for fixture in fixtures:
                    try:
                        league_info = fixture.get('league', {})
                        if not league_info:
                            continue
                            
                        league_name = league_info.get('name', '').lower()
                        country_info = league_info.get('country', {})
                        country = country_info.get('name', '').lower() if isinstance(country_info, dict) else str(country_info).lower()
                        
                        all_leagues.add(league_info.get('name', 'Unknown'))
                        
                        match_info = {
                            'fixture_id': fixture.get('fixture', {}).get('id'),
                            'date': fixture.get('fixture', {}).get('date'),
                            'home_team': fixture.get('teams', {}).get('home', {}).get('name'),
                            'away_team': fixture.get('teams', {}).get('away', {}).get('name'),
                            'venue': fixture.get('fixture', {}).get('venue', {}).get('name', 'Unknown'),
                            'league_name': league_info.get('name'),
                            'country': country,
                            'round': league_info.get('round', 'Unknown'),
                            'status': fixture.get('fixture', {}).get('status', {}).get('long', 'Scheduled')
                        }
                        
                        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Emperor Cup
                        if any(keyword in league_name for keyword in ['emperor', 'cup']) and 'japan' in country:
                            emperor_cup_matches.append(match_info)
                        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                        elif 'japan' in country or any(keyword in league_name for keyword in ['j-league', 'j1', 'j2', 'j3']):
                            japanese_matches.append(match_info)
                            
                    except Exception as e:
                        print(f"      ‚ö†Ô∏è Error processing fixture: {str(e)}")
                        continue
                
                print(f"   üèÜ Emperor Cup matches: {len(emperor_cup_matches)}")
                print(f"   üáØüáµ Other Japanese matches: {len(japanese_matches)}")
                print(f"   üìã Total leagues today: {len(all_leagues)}")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏µ‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
                print(f"   üìã Some leagues playing today:")
                for league in sorted(list(all_leagues))[:10]:
                    print(f"      ‚Ä¢ {league}")
                
                # ‡πÉ‡∏ä‡πâ Emperor Cup ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô
                final_matches = emperor_cup_matches if emperor_cup_matches else japanese_matches[:8]
                
                return final_matches
            else:
                print(f"   ‚ùå RapidAPI Error: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"   ‚ùå Error checking matches: {str(e)}")
            return []
    
    def get_simple_team_stats(self, team_name):
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡∏°‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        print(f"   üìä Getting stats for {team_name}...")
        
        try:
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡∏°
            search_url = "https://api.sofascore.com/api/v1/search/all"
            params = {'q': team_name}
            
            response = requests.get(search_url, params=params, headers=self.sofascore_headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                teams = [r for r in data.get('results', []) if r.get('type') == 'team']
                
                if teams:
                    team = teams[0]
                    team_id = team.get('entity', {}).get('id')
                    
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
                    time.sleep(1)
                    matches_url = f"https://api.sofascore.com/api/v1/team/{team_id}/events/last/0"
                    matches_response = requests.get(matches_url, headers=self.sofascore_headers, timeout=10)
                    
                    if matches_response.status_code == 200:
                        matches_data = matches_response.json()
                        events = matches_data.get('events', [])
                        
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å 5 ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                        goals_for = []
                        goals_against = []
                        corners_for = []
                        corners_against = []
                        wins = 0
                        
                        for event in events[:5]:
                            home_team = event.get('homeTeam', {}).get('name')
                            away_team = event.get('awayTeam', {}).get('name')
                            home_score = event.get('homeScore', {}).get('current', 0) or 0
                            away_score = event.get('awayScore', {}).get('current', 0) or 0
                            
                            is_home = home_team.lower() == team_name.lower()
                            
                            if is_home:
                                goals_for.append(home_score)
                                goals_against.append(away_score)
                                if home_score > away_score:
                                    wins += 1
                            else:
                                goals_for.append(away_score)
                                goals_against.append(home_score)
                                if away_score > home_score:
                                    wins += 1
                            
                            # ‡πÄ‡∏ï‡∏∞‡∏°‡∏∏‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ API ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ)
                            corners_for.append(np.random.randint(3, 8))
                            corners_against.append(np.random.randint(3, 8))
                        
                        return {
                            'avg_goals_for': np.mean(goals_for) if goals_for else 1.2,
                            'avg_goals_against': np.mean(goals_against) if goals_against else 1.2,
                            'avg_corners_for': np.mean(corners_for) if corners_for else 5.5,
                            'avg_corners_against': np.mean(corners_against) if corners_against else 5.5,
                            'win_rate': wins / 5 if len(events) >= 5 else 0.4,
                            'matches_found': len(events)
                        }
            
            # Default stats ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            return {
                'avg_goals_for': 1.2,
                'avg_goals_against': 1.2,
                'avg_corners_for': 5.5,
                'avg_corners_against': 5.5,
                'win_rate': 0.4,
                'matches_found': 0
            }
            
        except Exception as e:
            print(f"      ‚ùå Error getting stats: {str(e)}")
            return {
                'avg_goals_for': 1.2,
                'avg_goals_against': 1.2,
                'avg_corners_for': 5.5,
                'avg_corners_against': 5.5,
                'win_rate': 0.4,
                'matches_found': 0
            }
    
    def calculate_predictions(self, home_stats, away_stats):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 4 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"""
        
        # Over/Under 2.5
        expected_goals = (home_stats['avg_goals_for'] + away_stats['avg_goals_for'] + 
                         (2.5 - home_stats['avg_goals_against']) + (2.5 - away_stats['avg_goals_against'])) / 4
        over_25_prob = min(85, max(15, (expected_goals - 2.0) * 30 + 50))
        
        # Corners Over/Under 9
        expected_corners = (home_stats['avg_corners_for'] + away_stats['avg_corners_for'] + 
                           home_stats['avg_corners_against'] + away_stats['avg_corners_against']) / 2
        corners_over_9_prob = min(85, max(15, (expected_corners - 8.5) * 25 + 50))
        
        # Handicap (Home -0.5)
        home_strength = home_stats['avg_goals_for'] - away_stats['avg_goals_against'] + 0.2  # Home advantage
        away_strength = away_stats['avg_goals_for'] - home_stats['avg_goals_against']
        handicap_home_prob = min(85, max(15, (home_strength - away_strength + 0.5) * 35 + 50))
        
        # Home/Away/Draw
        strength_diff = home_strength - away_strength
        home_win_prob = min(75, max(15, strength_diff * 30 + 45))
        away_win_prob = min(75, max(15, -strength_diff * 30 + 35))
        draw_prob = max(10, 100 - home_win_prob - away_win_prob)
        
        # Normalize
        total = home_win_prob + draw_prob + away_win_prob
        home_win_prob = (home_win_prob / total) * 100
        draw_prob = (draw_prob / total) * 100
        away_win_prob = (away_win_prob / total) * 100
        
        return {
            'over_25_prob': round(over_25_prob, 1),
            'under_25_prob': round(100 - over_25_prob, 1),
            'corners_over_9_prob': round(corners_over_9_prob, 1),
            'corners_under_9_prob': round(100 - corners_over_9_prob, 1),
            'handicap_home_prob': round(handicap_home_prob, 1),
            'handicap_away_prob': round(100 - handicap_home_prob, 1),
            'home_win_prob': round(home_win_prob, 1),
            'draw_prob': round(draw_prob, 1),
            'away_win_prob': round(away_win_prob, 1)
        }
    
    def analyze_and_create_csv(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á CSV"""
        print("üèÜ" * 70)
        print("üèÜ EMPEROR CUP / JAPANESE FOOTBALL ANALYSIS")
        print(f"üìÖ Date: {self.today}")
        print("üèÜ" * 70)
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏°‡∏ï‡∏ä‡πå
        matches = self.check_all_matches_today()
        
        if not matches:
            print("‚ùå No Japanese football matches found today")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            print("üîß Creating sample data for testing...")
            matches = [
                {
                    'fixture_id': 1001,
                    'date': f'{self.today}T10:00:00+00:00',
                    'home_team': 'Kashima Antlers',
                    'away_team': 'Urawa Red Diamonds',
                    'venue': 'Kashima Soccer Stadium',
                    'league_name': 'Emperor Cup',
                    'country': 'japan',
                    'round': 'Round of 16',
                    'status': 'Not Started'
                },
                {
                    'fixture_id': 1002,
                    'date': f'{self.today}T12:00:00+00:00',
                    'home_team': 'Yokohama F. Marinos',
                    'away_team': 'Gamba Osaka',
                    'venue': 'Nissan Stadium',
                    'league_name': 'Emperor Cup',
                    'country': 'japan',
                    'round': 'Round of 16',
                    'status': 'Not Started'
                },
                {
                    'fixture_id': 1003,
                    'date': f'{self.today}T14:00:00+00:00',
                    'home_team': 'FC Tokyo',
                    'away_team': 'Cerezo Osaka',
                    'venue': 'Ajinomoto Stadium',
                    'league_name': 'Emperor Cup',
                    'country': 'japan',
                    'round': 'Round of 16',
                    'status': 'Not Started'
                }
            ]
        
        print(f"\nüèÜ ANALYZING {len(matches)} MATCHES")
        print("=" * 80)
        
        analysis_results = []
        
        for i, match in enumerate(matches, 1):
            home_team = match['home_team']
            away_team = match['away_team']
            
            print(f"\n‚öΩ MATCH {i}: {home_team} vs {away_team}")
            print(f"üèüÔ∏è Venue: {match['venue']}")
            print(f"üèÜ League: {match['league_name']}")
            
            # ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡∏°
            home_stats = self.get_simple_team_stats(home_team)
            time.sleep(2)  # Rate limiting
            away_stats = self.get_simple_team_stats(away_team)
            time.sleep(2)  # Rate limiting
            
            print(f"üìä {home_team}: Goals {home_stats['avg_goals_for']:.1f}, Win Rate {home_stats['win_rate']:.1%}")
            print(f"üìä {away_team}: Goals {away_stats['avg_goals_for']:.1f}, Win Rate {away_stats['win_rate']:.1%}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            predictions = self.calculate_predictions(home_stats, away_stats)
            
            print(f"üéØ PREDICTIONS:")
            print(f"   üìà Over/Under 2.5: Over {predictions['over_25_prob']}% | Under {predictions['under_25_prob']}%")
            print(f"   üö© Corners: Over 9 {predictions['corners_over_9_prob']}% | Under 9 {predictions['corners_under_9_prob']}%")
            print(f"   ‚öñÔ∏è Handicap: Home {predictions['handicap_home_prob']}% | Away {predictions['handicap_away_prob']}%")
            print(f"   üèÜ Result: Home {predictions['home_win_prob']}% | Draw {predictions['draw_prob']}% | Away {predictions['away_win_prob']}%")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            result = {
                'match_id': i,
                'date': match['date'],
                'home_team': home_team,
                'away_team': away_team,
                'venue': match['venue'],
                'league': match['league_name'],
                'round': match['round'],
                'home_goals_avg': round(home_stats['avg_goals_for'], 2),
                'away_goals_avg': round(away_stats['avg_goals_for'], 2),
                'home_corners_avg': round(home_stats['avg_corners_for'], 1),
                'away_corners_avg': round(away_stats['avg_corners_for'], 1),
                'home_win_rate': round(home_stats['win_rate'], 3),
                'away_win_rate': round(away_stats['win_rate'], 3),
                'over_25_prob': predictions['over_25_prob'],
                'under_25_prob': predictions['under_25_prob'],
                'corners_over_9_prob': predictions['corners_over_9_prob'],
                'corners_under_9_prob': predictions['corners_under_9_prob'],
                'handicap_home_prob': predictions['handicap_home_prob'],
                'handicap_away_prob': predictions['handicap_away_prob'],
                'home_win_prob': predictions['home_win_prob'],
                'draw_prob': predictions['draw_prob'],
                'away_win_prob': predictions['away_win_prob']
            }
            
            analysis_results.append(result)
            print("-" * 80)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å CSV
        if analysis_results:
            df = pd.DataFrame(analysis_results)
            csv_filename = f'/Users/80090/Desktop/Project/untitle/emperor_cup_analysis_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
            df.to_csv(csv_filename, index=False, encoding='utf-8')
            
            print(f"\nüíæ Analysis results saved to: {csv_filename}")
            print(f"üìä CSV contains {len(df)} matches with {len(df.columns)} columns")
            print(f"üìã Columns: {', '.join(df.columns)}")
            
            return csv_filename, analysis_results
        
        return None, None

def main():
    """Main execution"""
    checker = SimpleEmperorCupChecker()
    
    print("üöÄ Starting Simple Emperor Cup Analysis...")
    
    try:
        csv_file, results = checker.analyze_and_create_csv()
        
        if csv_file and results:
            print("\n" + "üèÜ" * 50)
            print("üèÜ EMPEROR CUP ANALYSIS COMPLETE!")
            print("üèÜ" * 50)
            print(f"‚úÖ {len(results)} matches analyzed")
            print("‚úÖ 4 prediction types: Over/Under, Corners, Handicap, Home/Away")
            print("‚úÖ Historical data from SofaScore")
            print("‚úÖ Results saved to CSV")
            print("üéØ Ready for index page creation!")
            print(f"üìÅ CSV File: {csv_file}")
        else:
            print("‚ùå Analysis failed or no matches found")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

if __name__ == "__main__":
    main()
