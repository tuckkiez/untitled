#!/usr/bin/env python3
"""
üèÜ J-League 2 Ultra Advanced Predictor & Backtest System
‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö J-League 2 ‡∏î‡πâ‡∏ß‡∏¢ API-Sports
"""

import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
from typing import Dict, List, Tuple, Any
import warnings
warnings.filterwarnings('ignore')

class JLeague2Predictor:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api-football-v1.p.rapidapi.com/v3"
        self.headers = {
            'x-rapidapi-host': 'api-football-v1.p.rapidapi.com',
            'x-rapidapi-key': api_key
        }
        self.league_id = 99  # J2 League
        self.season = 2025
        self.team_ratings = {}
        self.fixtures_data = []
        
    def make_api_request(self, endpoint: str, params: Dict = None) -> Dict:
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ API"""
        url = f"{self.base_url}/{endpoint}"
        try:
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå API Error: {response.status_code}")
                return {}
        except Exception as e:
            print(f"üö® Request Error: {e}")
            return {}
    
    def load_fixtures_data(self) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô J-League 2...")
        
        params = {
            'league': self.league_id,
            'season': self.season
        }
        
        data = self.make_api_request('fixtures', params)
        
        if 'response' in data:
            fixtures = data['response']
            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ {len(fixtures)} ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            finished_fixtures = []
            upcoming_fixtures = []
            
            for fixture in fixtures:
                if fixture['fixture']['status']['short'] == 'FT':
                    finished_fixtures.append(fixture)
                elif fixture['fixture']['status']['short'] in ['NS', 'TBD']:
                    upcoming_fixtures.append(fixture)
            
            print(f"üèÅ ‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß: {len(finished_fixtures)} ‡∏ô‡∏±‡∏î")
            print(f"‚è≥ ‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏Ç‡πà‡∏á: {len(upcoming_fixtures)} ‡∏ô‡∏±‡∏î")
            
            self.fixtures_data = fixtures
            return finished_fixtures, upcoming_fixtures
        
        return [], []
    
    def calculate_team_ratings(self, fixtures: List[Dict]) -> Dict:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ELO Rating ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏µ‡∏°"""
        print("üßÆ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ELO Rating...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ELO ‡∏ó‡∏µ‡πà 1500 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡∏°
        ratings = {}
        
        for fixture in fixtures:
            home_team = fixture['teams']['home']['name']
            away_team = fixture['teams']['away']['name']
            
            if home_team not in ratings:
                ratings[home_team] = 1500
            if away_team not in ratings:
                ratings[away_team] = 1500
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ELO ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        for fixture in fixtures:
            home_team = fixture['teams']['home']['name']
            away_team = fixture['teams']['away']['name']
            home_goals = fixture['goals']['home'] or 0
            away_goals = fixture['goals']['away'] or 0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
            if home_goals > away_goals:
                home_result = 1.0  # ‡∏ä‡∏ô‡∏∞
                away_result = 0.0  # ‡πÅ‡∏û‡πâ
            elif home_goals < away_goals:
                home_result = 0.0  # ‡πÅ‡∏û‡πâ
                away_result = 1.0  # ‡∏ä‡∏ô‡∏∞
            else:
                home_result = 0.5  # ‡πÄ‡∏™‡∏°‡∏≠
                away_result = 0.5  # ‡πÄ‡∏™‡∏°‡∏≠
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Expected Score
            home_expected = 1 / (1 + 10**((ratings[away_team] - ratings[home_team] - 100) / 400))
            away_expected = 1 / (1 + 10**((ratings[home_team] - ratings[away_team] + 100) / 400))
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ELO (K-factor = 32)
            K = 32
            ratings[home_team] += K * (home_result - home_expected)
            ratings[away_team] += K * (away_result - away_expected)
        
        self.team_ratings = ratings
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡∏°
        sorted_teams = sorted(ratings.items(), key=lambda x: x[1], reverse=True)
        print("\nüèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏ï‡∏≤‡∏° ELO Rating:")
        for i, (team, rating) in enumerate(sorted_teams[:10], 1):
            print(f"  {i:2d}. {team:<25} {rating:.0f}")
        
        return ratings
    
    def predict_match(self, home_team: str, away_team: str) -> Dict:
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô"""
        if home_team not in self.team_ratings or away_team not in self.team_ratings:
            return {
                'home_win_prob': 0.33,
                'draw_prob': 0.34,
                'away_win_prob': 0.33,
                'prediction': 'Draw',
                'confidence': 0.34,
                'home_handicap': 'Draw',
                'over_under': 'Under 2.5'
            }
        
        home_rating = self.team_ratings[home_team]
        away_rating = self.team_ratings[away_team]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (‡∏£‡∏ß‡∏° Home Advantage +100)
        home_expected = 1 / (1 + 10**((away_rating - home_rating - 100) / 400))
        away_expected = 1 - home_expected
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏°‡∏≠
        draw_prob = 0.25  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        home_win_prob = home_expected * (1 - draw_prob)
        away_win_prob = away_expected * (1 - draw_prob)
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if home_win_prob > away_win_prob and home_win_prob > draw_prob:
            prediction = 'Home Win'
            confidence = home_win_prob
        elif away_win_prob > home_win_prob and away_win_prob > draw_prob:
            prediction = 'Away Win'
            confidence = away_win_prob
        else:
            prediction = 'Draw'
            confidence = draw_prob
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Handicap
        rating_diff = home_rating - away_rating + 100  # ‡∏£‡∏ß‡∏° home advantage
        if rating_diff > 100:
            handicap_pred = 'Home Win'
        elif rating_diff < -100:
            handicap_pred = 'Away Win'
        else:
            handicap_pred = 'Draw'
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Over/Under (‡πÉ‡∏ä‡πâ rating ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î)
        avg_rating = (home_rating + away_rating) / 2
        if avg_rating > 1550:
            over_under = 'Over 2.5'
        else:
            over_under = 'Under 2.5'
        
        return {
            'home_win_prob': home_win_prob,
            'draw_prob': draw_prob,
            'away_win_prob': away_win_prob,
            'prediction': prediction,
            'confidence': confidence,
            'home_handicap': handicap_pred,
            'over_under': over_under,
            'home_rating': home_rating,
            'away_rating': away_rating
        }
    
    def backtest_last_matches(self, finished_fixtures: List[Dict], num_matches: int = 20) -> Dict:
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á N ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        print(f"\nüî¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á {num_matches} ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        sorted_fixtures = sorted(finished_fixtures, key=lambda x: x['fixture']['date'])
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        train_fixtures = sorted_fixtures[:-num_matches]
        test_fixtures = sorted_fixtures[-num_matches:]
        
        print(f"üìö ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô: {len(train_fixtures)} ‡∏ô‡∏±‡∏î")
        print(f"üß™ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {len(test_fixtures)} ‡∏ô‡∏±‡∏î")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ELO ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô
        self.calculate_team_ratings(train_fixtures)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        results = {
            'match_result': {'correct': 0, 'total': 0},
            'handicap': {'correct': 0, 'total': 0},
            'over_under': {'correct': 0, 'total': 0},
            'high_confidence': {'correct': 0, 'total': 0},
            'predictions': []
        }
        
        print(f"\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö {num_matches} ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        print("=" * 80)
        
        for i, fixture in enumerate(test_fixtures, 1):
            home_team = fixture['teams']['home']['name']
            away_team = fixture['teams']['away']['name']
            home_goals = fixture['goals']['home'] or 0
            away_goals = fixture['goals']['away'] or 0
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            prediction = self.predict_match(home_team, away_team)
            
            # ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
            if home_goals > away_goals:
                actual_result = 'Home Win'
                actual_handicap = 'Home Win'
            elif home_goals < away_goals:
                actual_result = 'Away Win'
                actual_handicap = 'Away Win'
            else:
                actual_result = 'Draw'
                actual_handicap = 'Draw'
            
            total_goals = home_goals + away_goals
            actual_over_under = 'Over 2.5' if total_goals > 2.5 else 'Under 2.5'
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            match_correct = prediction['prediction'] == actual_result
            handicap_correct = prediction['home_handicap'] == actual_handicap
            over_under_correct = prediction['over_under'] == actual_over_under
            
            results['match_result']['correct'] += match_correct
            results['match_result']['total'] += 1
            results['handicap']['correct'] += handicap_correct
            results['handicap']['total'] += 1
            results['over_under']['correct'] += over_under_correct
            results['over_under']['total'] += 1
            
            # High confidence (>60%)
            if prediction['confidence'] > 0.6:
                results['high_confidence']['correct'] += match_correct
                results['high_confidence']['total'] += 1
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            status_match = "‚úÖ" if match_correct else "‚ùå"
            status_handicap = "‚úÖ" if handicap_correct else "‚ùå"
            status_over_under = "‚úÖ" if over_under_correct else "‚ùå"
            
            print(f"{i:2d}. {home_team:<20} {home_goals}-{away_goals} {away_team:<20}")
            print(f"    ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {prediction['prediction']:<8} {status_match} | "
                  f"Handicap: {prediction['home_handicap']:<8} {status_handicap} | "
                  f"O/U: {prediction['over_under']:<8} {status_over_under} | "
                  f"‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {prediction['confidence']:.1%}")
            
            results['predictions'].append({
                'home_team': home_team,
                'away_team': away_team,
                'home_goals': home_goals,
                'away_goals': away_goals,
                'prediction': prediction,
                'actual_result': actual_result,
                'match_correct': match_correct,
                'handicap_correct': handicap_correct,
                'over_under_correct': over_under_correct
            })
        
        return results
    
    def print_backtest_summary(self, results: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        print("\n" + "=" * 60)
        print("üèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á J-League 2")
        print("=" * 60)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
        match_accuracy = (results['match_result']['correct'] / results['match_result']['total']) * 100
        handicap_accuracy = (results['handicap']['correct'] / results['handicap']['total']) * 100
        over_under_accuracy = (results['over_under']['correct'] / results['over_under']['total']) * 100
        
        print(f"üìä **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô**: {results['match_result']['correct']}/{results['match_result']['total']} = {match_accuracy:.1f}%")
        print(f"üéØ **Handicap**: {results['handicap']['correct']}/{results['handicap']['total']} = {handicap_accuracy:.1f}%")
        print(f"‚öΩ **Over/Under**: {results['over_under']['correct']}/{results['over_under']['total']} = {over_under_accuracy:.1f}%")
        
        if results['high_confidence']['total'] > 0:
            high_conf_accuracy = (results['high_confidence']['correct'] / results['high_confidence']['total']) * 100
            print(f"üî• **‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á (>60%)**: {results['high_confidence']['correct']}/{results['high_confidence']['total']} = {high_conf_accuracy:.1f}%")
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        print(f"\nüìà **‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°**:")
        print(f"   ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°: 60.0% | ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà: {match_accuracy:.1f}% | ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á: {match_accuracy-60:.1f}%")
        
        # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        if match_accuracy >= 65:
            level = "ü•á ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
        elif match_accuracy >= 60:
            level = "ü•à ‡∏î‡∏µ‡∏°‡∏≤‡∏Å"
        elif match_accuracy >= 55:
            level = "ü•â ‡∏î‡∏µ"
        else:
            level = "üìà ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
        
        print(f"üèÜ **‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û**: {level}")
    
    def get_today_matches(self) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
        print(f"\nüìÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ({datetime.now().strftime('%Y-%m-%d')})...")
        
        today = datetime.now().strftime('%Y-%m-%d')
        
        params = {
            'league': self.league_id,
            'season': self.season,
            'date': today
        }
        
        data = self.make_api_request('fixtures', params)
        
        if 'response' in data and data['response']:
            matches = data['response']
            print(f"‚öΩ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ {len(matches)} ‡∏ô‡∏±‡∏î")
            return matches
        else:
            print("üòî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
            
            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            print("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...")
            
            for i in range(1, 8):  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ 7 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
                future_date = (datetime.now() + timedelta(days=i)).strftime('%Y-%m-%d')
                params['date'] = future_date
                
                data = self.make_api_request('fixtures', params)
                if 'response' in data and data['response']:
                    matches = data['response']
                    print(f"‚öΩ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {future_date}: {len(matches)} ‡∏ô‡∏±‡∏î")
                    return matches
            
            return []
    
    def predict_today_matches(self, matches: List[Dict]):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
        if not matches:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
            return
        
        print(f"\nüîÆ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô J-League 2")
        print("=" * 80)
        
        for i, match in enumerate(matches, 1):
            home_team = match['teams']['home']['name']
            away_team = match['teams']['away']['name']
            match_date = match['fixture']['date']
            venue = match['fixture']['venue']['name'] if match['fixture']['venue'] else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            prediction = self.predict_match(home_team, away_team)
            
            print(f"\nüèüÔ∏è  **‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà {i}**: {home_team} vs {away_team}")
            print(f"üìÖ **‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤**: {match_date}")
            print(f"üèüÔ∏è  **‡∏™‡∏ô‡∏≤‡∏°**: {venue}")
            print(f"‚≠ê **ELO Rating**: {home_team} ({prediction['home_rating']:.0f}) vs {away_team} ({prediction['away_rating']:.0f})")
            
            print(f"\nüéØ **‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 4 ‡∏Ñ‡πà‡∏≤**:")
            print(f"   1Ô∏è‚É£ **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô**: {prediction['prediction']} ({prediction['confidence']:.1%})")
            print(f"   2Ô∏è‚É£ **Handicap**: {prediction['home_handicap']}")
            print(f"   3Ô∏è‚É£ **Over/Under**: {prediction['over_under']}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Value Bet (‡∏™‡∏°‡∏°‡∏ï‡∏¥)
            if prediction['confidence'] > 0.6:
                value_status = "üî• **High Value**"
            elif prediction['confidence'] > 0.5:
                value_status = "‚úÖ **Good Value**"
            else:
                value_status = "‚ö†Ô∏è  **Low Value**"
            
            print(f"   4Ô∏è‚É£ **Value Bet**: {value_status}")
            
            print(f"\nüìä **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô**:")
            print(f"   üè† {home_team} ‡∏ä‡∏ô‡∏∞: {prediction['home_win_prob']:.1%}")
            print(f"   ü§ù ‡πÄ‡∏™‡∏°‡∏≠: {prediction['draw_prob']:.1%}")
            print(f"   ‚úàÔ∏è  {away_team} ‡∏ä‡∏ô‡∏∞: {prediction['away_win_prob']:.1%}")
            
            if prediction['confidence'] > 0.6:
                print(f"\nüí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**: ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏•‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô")
            
            print("-" * 80)

def main():
    # API Key
    API_KEY = "f9cf9a3854mshf30572945114fb4p105c26jsnbbc82dcea9c0"
    
    print("üöÄ J-League 2 Ultra Advanced Predictor")
    print("=" * 50)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á predictor
    predictor = JLeague2Predictor(API_KEY)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    finished_fixtures, upcoming_fixtures = predictor.load_fixtures_data()
    
    if not finished_fixtures:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏ó‡∏≥ backtest
    results = predictor.backtest_last_matches(finished_fixtures, 20)
    predictor.print_backtest_summary(results)
    
    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    today_matches = predictor.get_today_matches()
    predictor.predict_today_matches(today_matches)
    
    print(f"\nüéâ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print(f"üìä ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(finished_fixtures)} ‡∏ô‡∏±‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ELO Rating")
    print(f"üî¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 20 ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    print(f"üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á")

if __name__ == "__main__":
    main()
