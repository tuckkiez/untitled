#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö Sportmonks API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• J-League 2
"""

import requests
import json
from typing import Dict, Any, Optional

class SportmonksAPITester:
    def __init__(self, token: str):
        self.token = token
        self.base_url = "https://api.sportmonks.com/v3/football"
        self.headers = {
            "Authorization": f"Bearer {token}",
            "Accept": "application/json",
            "Content-Type": "application/json"
        }
    
    def make_request(self, endpoint: str, params: Optional[Dict] = None) -> Dict[str, Any]:
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ API ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        url = f"{self.base_url}/{endpoint}"
        
        try:
            print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö endpoint: {url}")
            if params:
                print(f"üìã ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå: {params}")
            
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            
            print(f"üìä Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß")
                return data
            else:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.text}")
                return {"error": response.text, "status_code": response.status_code}
                
        except requests.exceptions.RequestException as e:
            print(f"üö® ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
            return {"error": str(e)}
    
    def test_basic_endpoints(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö endpoint ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
        print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...")
        
        endpoints = [
            "leagues",
            "teams", 
            "countries",
            "seasons"
        ]
        
        for endpoint in endpoints:
            print(f"\n--- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {endpoint} ---")
            result = self.make_request(endpoint)
            
            if "error" not in result:
                print(f"‚úÖ {endpoint} ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!")
                if "data" in result:
                    print(f"üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(result['data'])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                return True
            else:
                print(f"‚ùå {endpoint} ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
        
        return False
    
    def search_japanese_leagues(self):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏µ‡∏Å‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á J-League 2"""
        print("\nüáØüáµ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏µ‡∏Å‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô...")
        
        search_terms = ["japan", "j-league", "j league", "jleague", "j2"]
        
        for term in search_terms:
            print(f"\n--- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤: {term} ---")
            
            result = self.make_request("leagues", {"search": term})
            
            if "error" not in result and "data" in result:
                leagues = result["data"]
                print(f"‚úÖ ‡∏û‡∏ö‡∏•‡∏µ‡∏Å {len(leagues)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö '{term}'")
                
                for league in leagues:
                    name = league.get("name", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠")
                    league_id = league.get("id", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö ID")
                    country_data = league.get("country", {})
                    country = country_data.get("name", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®") if country_data else "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®"
                    
                    print(f"  üèÜ {name} (ID: {league_id}) - {country}")
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô J-League 2 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    j2_keywords = ["j.league", "j-league", "division 2", "j2", "second"]
                    if any(keyword in name.lower() for keyword in j2_keywords):
                        print(f"    üéØ ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô J-League 2!")
                        return league_id
            else:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{term}'")
        
        return None
    
    def test_original_round(self, round_id: str = "339273"):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö round ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°"""
        print(f"\nüéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö round ‡πÄ‡∏â‡∏û‡∏≤‡∏∞: {round_id}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô
        result = self.make_request(f"rounds/{round_id}")
        
        if "error" not in result:
            print("‚úÖ round endpoint ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!")
            
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà include ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
            includes_to_test = [
                "fixtures",
                "fixtures.participants", 
                "league",
                "league.country"
            ]
            
            for include in includes_to_test:
                print(f"\n--- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö include: {include} ---")
                result_with_include = self.make_request(f"rounds/{round_id}", {"include": include})
                
                if "error" not in result_with_include:
                    print(f"‚úÖ Include '{include}' ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!")
                else:
                    print(f"‚ùå Include '{include}' ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
        else:
            print("‚ùå round endpoint ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
    
    def find_jleague2_current_season(self):
        """‡∏´‡∏≤ J-League 2 ‡πÉ‡∏ô‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        print("\nüîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ J-League 2 ‡πÉ‡∏ô‡∏ã‡∏µ‡∏ã‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô...")
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        countries_result = self.make_request("countries", {"search": "japan"})
        
        if "error" not in countries_result and "data" in countries_result:
            japan_countries = countries_result["data"]
            
            for country in japan_countries:
                country_id = country.get("id")
                country_name = country.get("name")
                print(f"üáØüáµ ‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: {country_name} (ID: {country_id})")
                
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏µ‡∏Å‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô
                leagues_result = self.make_request("leagues", {"countries": country_id})
                
                if "error" not in leagues_result and "data" in leagues_result:
                    leagues = leagues_result["data"]
                    print(f"üìä ‡∏û‡∏ö‡∏•‡∏µ‡∏Å {len(leagues)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô")
                    
                    for league in leagues:
                        league_name = league.get("name", "")
                        league_id = league.get("id")
                        
                        if "j2" in league_name.lower() or "division 2" in league_name.lower():
                            print(f"üéØ ‡∏û‡∏ö J-League 2: {league_name} (ID: {league_id})")
                            return league_id
        
        return None

def main():
    # Token ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤
    token = "21GtWoxlRVLIhk8mMYXLOgeigGEcmYtjq93veXNNnaV2iY287Zpz3OMd9OWd"
    
    print("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Sportmonks API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö J-League 2")
    print("=" * 60)
    
    tester = SportmonksAPITester(token)
    
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    if tester.test_basic_endpoints():
        print("\n‚úÖ API ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ! ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ J-League 2
        jleague2_id = tester.search_japanese_leagues()
        
        if not jleague2_id:
            jleague2_id = tester.find_jleague2_current_season()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö round ‡πÄ‡∏î‡∏¥‡∏°
        tester.test_original_round()
        
        if jleague2_id:
            print(f"\nüéâ ‡∏û‡∏ö J-League 2 ‡πÅ‡∏•‡πâ‡∏ß! ID: {jleague2_id}")
        else:
            print("\nüòî ‡πÑ‡∏°‡πà‡∏û‡∏ö J-League 2 ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    else:
        print("\n‚ùå API ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏±‡∏ö token ‡∏´‡∏£‡∏∑‡∏≠ endpoint")
    
    print("\n" + "=" * 60)
    print("üèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

if __name__ == "__main__":
    main()
