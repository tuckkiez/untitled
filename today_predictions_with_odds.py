#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Ultra Advanced Football Predictor - Today's Predictions with Real Odds
‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
from typing import Dict, List, Tuple
import warnings
warnings.filterwarnings('ignore')

class TodayPredictorWithOdds:
    def __init__(self):
        self.real_odds_data = {}
        self.predictions = {}
        self.value_bets = []
        
    def add_real_odds(self, match_data: Dict):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô"""
        match_key = f"{match_data['home_team']} vs {match_data['away_team']}"
        self.real_odds_data[match_key] = match_data
        
    def calculate_implied_probability(self, odds: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤"""
        return 1 / odds if odds > 0 else 0
        
    def calculate_value_bet(self, our_prob: float, bookmaker_odds: float) -> Dict:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Value Bet"""
        implied_prob = self.calculate_implied_probability(bookmaker_odds)
        edge = our_prob - implied_prob
        value = (our_prob * bookmaker_odds) - 1
        
        return {
            'our_probability': our_prob,
            'implied_probability': implied_prob,
            'edge': edge,
            'value': value,
            'is_value_bet': edge > 0.05,  # ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5%
            'confidence': 'HIGH' if edge > 0.1 else 'MEDIUM' if edge > 0.05 else 'LOW'
        }
        
    def analyze_match_with_odds(self, home_team: str, away_team: str, 
                               our_prediction: Dict, real_odds: Dict) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á"""
        
        analysis = {
            'match': f"{home_team} vs {away_team}",
            'datetime': real_odds.get('datetime', ''),
            'our_prediction': our_prediction,
            'real_odds': real_odds,
            'value_analysis': {},
            'recommendations': []
        }
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 1X2
        if 'win_probabilities' in our_prediction:
            home_prob = our_prediction['win_probabilities']['home']
            draw_prob = our_prediction['win_probabilities']['draw'] 
            away_prob = our_prediction['win_probabilities']['away']
            
            # Value Bet Analysis ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 1X2
            if 'odds_1x2' in real_odds:
                home_value = self.calculate_value_bet(home_prob, real_odds['odds_1x2']['home'])
                draw_value = self.calculate_value_bet(draw_prob, real_odds['odds_1x2']['draw'])
                away_value = self.calculate_value_bet(away_prob, real_odds['odds_1x2']['away'])
                
                analysis['value_analysis']['1x2'] = {
                    'home': home_value,
                    'draw': draw_value,
                    'away': away_value
                }
                
                # ‡∏´‡∏≤ Value Bets
                for result, value_data in [('HOME', home_value), ('DRAW', draw_value), ('AWAY', away_value)]:
                    if value_data['is_value_bet']:
                        analysis['recommendations'].append({
                            'type': '1X2',
                            'bet': result,
                            'odds': real_odds['odds_1x2'][result.lower() if result != 'HOME' else 'home'],
                            'our_prob': value_data['our_probability'],
                            'edge': value_data['edge'],
                            'confidence': value_data['confidence']
                        })
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Handicap
        if 'handicap_prediction' in our_prediction and 'handicap_odds' in real_odds:
            handicap_prob = our_prediction['handicap_prediction']['probability']
            handicap_value = self.calculate_value_bet(handicap_prob, real_odds['handicap_odds']['home'])
            
            analysis['value_analysis']['handicap'] = handicap_value
            
            if handicap_value['is_value_bet']:
                analysis['recommendations'].append({
                    'type': 'HANDICAP',
                    'bet': f"HOME {real_odds['handicap_odds']['line']}",
                    'odds': real_odds['handicap_odds']['home'],
                    'our_prob': handicap_prob,
                    'edge': handicap_value['edge'],
                    'confidence': handicap_value['confidence']
                })
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Over/Under
        if 'over_under_prediction' in our_prediction and 'over_under_odds' in real_odds:
            over_prob = our_prediction['over_under_prediction']['over_probability']
            over_value = self.calculate_value_bet(over_prob, real_odds['over_under_odds']['over'])
            under_value = self.calculate_value_bet(1-over_prob, real_odds['over_under_odds']['under'])
            
            analysis['value_analysis']['over_under'] = {
                'over': over_value,
                'under': under_value
            }
            
            for bet_type, value_data, odds in [('OVER', over_value, real_odds['over_under_odds']['over']),
                                             ('UNDER', under_value, real_odds['over_under_odds']['under'])]:
                if value_data['is_value_bet']:
                    analysis['recommendations'].append({
                        'type': 'OVER/UNDER',
                        'bet': f"{bet_type} {real_odds['over_under_odds']['line']}",
                        'odds': odds,
                        'our_prob': value_data['our_probability'],
                        'edge': value_data['edge'],
                        'confidence': value_data['confidence']
                    })
        
        return analysis

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
    
    print("üöÄ Ultra Advanced Football Predictor - Today's Analysis")
    print("=" * 60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á predictor
    predictor = TodayPredictorWithOdds()
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û
    real_match_data = {
        'home_team': '‡∏ã‡∏µ‡πÄ‡∏≠ ‡∏≠‡∏±‡∏•‡πÑ‡∏î‡∏£‡∏µ‡πà',
        'away_team': '‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏• ‡∏Ñ‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏ö‡∏≤ ‡πÄ‡∏≠‡∏™‡∏î‡∏µ‡∏≠‡∏µ',
        'datetime': '12 ‡∏Å.‡∏Ñ. 01:30',
        'odds_1x2': {
            'home': 2.13,  # ‡∏ã‡∏µ‡πÄ‡∏≠ ‡∏≠‡∏±‡∏•‡πÑ‡∏î‡∏£‡∏µ‡πà ‡∏ä‡∏ô‡∏∞
            'draw': 3.00,  # ‡πÄ‡∏™‡∏°‡∏≠
            'away': 2.53   # ‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏• ‡∏Ñ‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏ö‡∏≤ ‡∏ä‡∏ô‡∏∞
        },
        'handicap_odds': {
            'line': '0',
            'home': 1.78,  # ‡∏ã‡∏µ‡πÄ‡∏≠ ‡∏≠‡∏±‡∏•‡πÑ‡∏î‡∏£‡∏µ‡πà +0
            'away': 2.09   # ‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏• ‡∏Ñ‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏ö‡∏≤ +0
        },
        'over_under_odds': {
            'line': '2.5',
            'over': 1.99,  # ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2.5 ‡∏•‡∏π‡∏Å
            'under': 1.89  # ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2.5 ‡∏•‡∏π‡∏Å
        }
    }
    
    # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ (‡∏à‡∏≥‡∏•‡∏≠‡∏á - ‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ML)
    our_prediction = {
        'prediction': 'HOME_WIN',
        'confidence': 0.65,
        'win_probabilities': {
            'home': 0.45,    # ‡∏ã‡∏µ‡πÄ‡∏≠ ‡∏≠‡∏±‡∏•‡πÑ‡∏î‡∏£‡∏µ‡πà ‡∏ä‡∏ô‡∏∞ 45%
            'draw': 0.25,    # ‡πÄ‡∏™‡∏°‡∏≠ 25%
            'away': 0.30     # ‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏• ‡∏Ñ‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏ö‡∏≤ ‡∏ä‡∏ô‡∏∞ 30%
        },
        'handicap_prediction': {
            'prediction': 'HOME_COVER',
            'probability': 0.55
        },
        'over_under_prediction': {
            'prediction': 'UNDER',
            'over_probability': 0.40,
            'under_probability': 0.60
        },
        'expected_score': {
            'home': 1.8,
            'away': 1.2
        }
    }
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    analysis = predictor.analyze_match_with_odds(
        real_match_data['home_team'],
        real_match_data['away_team'],
        our_prediction,
        real_match_data
    )
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    print(f"\nüèÜ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô: {analysis['match']}")
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {analysis['datetime']}")
    print("-" * 60)
    
    print("\nüìä ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤:")
    pred = analysis['our_prediction']
    print(f"   ‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {pred['prediction']} (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {pred['confidence']:.1%})")
    print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: ‡πÄ‡∏à‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô {pred['win_probabilities']['home']:.1%} | "
          f"‡πÄ‡∏™‡∏°‡∏≠ {pred['win_probabilities']['draw']:.1%} | "
          f"‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô {pred['win_probabilities']['away']:.1%}")
    print(f"   ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≤‡∏î: {pred['expected_score']['home']:.1f} - {pred['expected_score']['away']:.1f}")
    
    print("\nüí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô:")
    odds = analysis['real_odds']
    print(f"   1X2: ‡πÄ‡∏à‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô {odds['odds_1x2']['home']:.2f} | "
          f"‡πÄ‡∏™‡∏°‡∏≠ {odds['odds_1x2']['draw']:.2f} | "
          f"‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô {odds['odds_1x2']['away']:.2f}")
    print(f"   Handicap (0): ‡πÄ‡∏à‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô {odds['handicap_odds']['home']:.2f} | "
          f"‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô {odds['handicap_odds']['away']:.2f}")
    print(f"   Over/Under (2.5): Over {odds['over_under_odds']['over']:.2f} | "
          f"Under {odds['over_under_odds']['under']:.2f}")
    
    print("\nüéØ Value Bet Analysis:")
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 1X2
    if '1x2' in analysis['value_analysis']:
        print("   1X2 Value Analysis:")
        for outcome, data in analysis['value_analysis']['1x2'].items():
            edge_pct = data['edge'] * 100
            print(f"     {outcome.upper()}: Edge {edge_pct:+.1f}% | "
                  f"Value {data['value']:+.3f} | "
                  f"{'‚úÖ VALUE BET' if data['is_value_bet'] else '‚ùå No Value'}")
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Handicap
    if 'handicap' in analysis['value_analysis']:
        hcp_data = analysis['value_analysis']['handicap']
        edge_pct = hcp_data['edge'] * 100
        print(f"   Handicap: Edge {edge_pct:+.1f}% | "
              f"Value {hcp_data['value']:+.3f} | "
              f"{'‚úÖ VALUE BET' if hcp_data['is_value_bet'] else '‚ùå No Value'}")
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Over/Under
    if 'over_under' in analysis['value_analysis']:
        print("   Over/Under Value Analysis:")
        for bet_type, data in analysis['value_analysis']['over_under'].items():
            edge_pct = data['edge'] * 100
            print(f"     {bet_type.upper()}: Edge {edge_pct:+.1f}% | "
                  f"Value {data['value']:+.3f} | "
                  f"{'‚úÖ VALUE BET' if data['is_value_bet'] else '‚ùå No Value'}")
    
    print("\nüî• ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:")
    if analysis['recommendations']:
        for i, rec in enumerate(analysis['recommendations'], 1):
            print(f"   {i}. {rec['type']}: {rec['bet']}")
            print(f"      ‡∏£‡∏≤‡∏Ñ‡∏≤: {rec['odds']:.2f} | "
                  f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤: {rec['our_prob']:.1%}")
            print(f"      Edge: {rec['edge']:+.1%} | "
                  f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {rec['confidence']}")
            print()
    else:
        print("   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Value Bet ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à")
    
    print("\nüìà ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
    total_value_bets = len(analysis['recommendations'])
    high_confidence_bets = len([r for r in analysis['recommendations'] if r['confidence'] == 'HIGH'])
    
    print(f"   üìä Value Bets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_value_bets}")
    print(f"   üî• ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á: {high_confidence_bets}")
    
    if total_value_bets > 0:
        avg_edge = np.mean([r['edge'] for r in analysis['recommendations']])
        print(f"   üìà Edge ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_edge:+.1%}")
        
        if high_confidence_bets > 0:
            print("   ‚úÖ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô")
        else:
            print("   ‚ö†Ô∏è  ‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á - Edge ‡πÑ‡∏°‡πà‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å")
    else:
        print("   ‚ùå ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ")
    
    print("\n" + "=" * 60)
    print("üöÄ Ultra Advanced Football Predictor")
    print("üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Value Bet ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    print("‚öΩ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û 60%+")

if __name__ == "__main__":
    main()
